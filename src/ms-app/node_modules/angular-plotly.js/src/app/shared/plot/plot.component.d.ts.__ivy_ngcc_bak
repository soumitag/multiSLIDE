import { ElementRef, EventEmitter, OnDestroy, OnChanges, OnInit, SimpleChanges, DoCheck, IterableDiffer, IterableDiffers, KeyValueDiffer, KeyValueDiffers } from '@angular/core';
import { PlotlyService } from '../plotly.service';
import { Plotly } from '../plotly.interface';
export declare class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {
    plotly: PlotlyService;
    iterableDiffers: IterableDiffers;
    keyValueDiffers: KeyValueDiffers;
    protected defaultClassName: string;
    plotlyInstance: Plotly.PlotlyHTMLElement;
    resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;
    layoutDiffer: KeyValueDiffer<string, any>;
    dataDiffer: IterableDiffer<Plotly.Data>;
    plotEl: ElementRef;
    data?: Plotly.Data[];
    layout?: Partial<Plotly.Layout>;
    config?: Partial<Plotly.Config>;
    frames?: Partial<Plotly.Config>[];
    style?: {
        [key: string]: string;
    };
    divId?: string;
    revision: number;
    className?: string | string[];
    debug: boolean;
    useResizeHandler: boolean;
    updateOnLayoutChange: boolean;
    updateOnDataChange: boolean;
    updateOnlyWithRevision: boolean;
    initialized: EventEmitter<Plotly.Figure>;
    update: EventEmitter<Plotly.Figure>;
    purge: EventEmitter<Plotly.Figure>;
    error: EventEmitter<Error>;
    afterExport: EventEmitter<any>;
    afterPlot: EventEmitter<any>;
    animated: EventEmitter<any>;
    animatingFrame: EventEmitter<any>;
    animationInterrupted: EventEmitter<any>;
    autoSize: EventEmitter<any>;
    beforeExport: EventEmitter<any>;
    buttonClicked: EventEmitter<any>;
    click: EventEmitter<any>;
    plotly_click: EventEmitter<any>;
    clickAnnotation: EventEmitter<any>;
    deselect: EventEmitter<any>;
    doubleClick: EventEmitter<any>;
    framework: EventEmitter<any>;
    hover: EventEmitter<any>;
    legendClick: EventEmitter<any>;
    legendDoubleClick: EventEmitter<any>;
    relayout: EventEmitter<any>;
    restyle: EventEmitter<any>;
    redraw: EventEmitter<any>;
    selected: EventEmitter<any>;
    selecting: EventEmitter<any>;
    sliderChange: EventEmitter<any>;
    sliderEnd: EventEmitter<any>;
    sliderStart: EventEmitter<any>;
    transitioning: EventEmitter<any>;
    transitionInterrupted: EventEmitter<any>;
    unhover: EventEmitter<any>;
    relayouting: EventEmitter<any>;
    treemapclick: EventEmitter<any>;
    sunburstclick: EventEmitter<any>;
    eventNames: string[];
    constructor(plotly: PlotlyService, iterableDiffers: IterableDiffers, keyValueDiffers: KeyValueDiffers);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): boolean;
    getWindow(): any;
    getClassName(): string;
    createPlot(): Promise<void>;
    createFigure(): Plotly.Figure;
    updatePlot(): Promise<void>;
    updateWindowResizeHandler(): void;
    dataDifferTrackBy(_: number, item: any): any;
}
