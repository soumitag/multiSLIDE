import { ElementRef, EventEmitter, OnDestroy, OnChanges, OnInit, SimpleChanges, DoCheck, IterableDiffer, IterableDiffers, KeyValueDiffer, KeyValueDiffers } from '@angular/core';
import { PlotlyService } from '../plotly.service';
import { Plotly } from '../plotly.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {
    plotly: PlotlyService;
    iterableDiffers: IterableDiffers;
    keyValueDiffers: KeyValueDiffers;
    protected defaultClassName: string;
    plotlyInstance: Plotly.PlotlyHTMLElement;
    resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;
    layoutDiffer: KeyValueDiffer<string, any>;
    dataDiffer: IterableDiffer<Plotly.Data>;
    plotEl: ElementRef;
    data?: Plotly.Data[];
    layout?: Partial<Plotly.Layout>;
    config?: Partial<Plotly.Config>;
    frames?: Partial<Plotly.Config>[];
    style?: {
        [key: string]: string;
    };
    divId?: string;
    revision: number;
    className?: string | string[];
    debug: boolean;
    useResizeHandler: boolean;
    updateOnLayoutChange: boolean;
    updateOnDataChange: boolean;
    updateOnlyWithRevision: boolean;
    initialized: EventEmitter<Plotly.Figure>;
    update: EventEmitter<Plotly.Figure>;
    purge: EventEmitter<Plotly.Figure>;
    error: EventEmitter<Error>;
    afterExport: EventEmitter<any>;
    afterPlot: EventEmitter<any>;
    animated: EventEmitter<any>;
    animatingFrame: EventEmitter<any>;
    animationInterrupted: EventEmitter<any>;
    autoSize: EventEmitter<any>;
    beforeExport: EventEmitter<any>;
    buttonClicked: EventEmitter<any>;
    click: EventEmitter<any>;
    plotly_click: EventEmitter<any>;
    clickAnnotation: EventEmitter<any>;
    deselect: EventEmitter<any>;
    doubleClick: EventEmitter<any>;
    framework: EventEmitter<any>;
    hover: EventEmitter<any>;
    legendClick: EventEmitter<any>;
    legendDoubleClick: EventEmitter<any>;
    relayout: EventEmitter<any>;
    restyle: EventEmitter<any>;
    redraw: EventEmitter<any>;
    selected: EventEmitter<any>;
    selecting: EventEmitter<any>;
    sliderChange: EventEmitter<any>;
    sliderEnd: EventEmitter<any>;
    sliderStart: EventEmitter<any>;
    transitioning: EventEmitter<any>;
    transitionInterrupted: EventEmitter<any>;
    unhover: EventEmitter<any>;
    relayouting: EventEmitter<any>;
    treemapclick: EventEmitter<any>;
    sunburstclick: EventEmitter<any>;
    eventNames: string[];
    constructor(plotly: PlotlyService, iterableDiffers: IterableDiffers, keyValueDiffers: KeyValueDiffers);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): boolean;
    getWindow(): any;
    getClassName(): string;
    createPlot(): Promise<void>;
    createFigure(): Plotly.Figure;
    updatePlot(): Promise<void>;
    updateWindowResizeHandler(): void;
    dataDifferTrackBy(_: number, item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PlotComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PlotComponent, "plotly-plot", never, { "revision": "revision"; "debug": "debug"; "useResizeHandler": "useResizeHandler"; "updateOnLayoutChange": "updateOnLayoutChange"; "updateOnDataChange": "updateOnDataChange"; "updateOnlyWithRevision": "updateOnlyWithRevision"; "data": "data"; "layout": "layout"; "config": "config"; "frames": "frames"; "style": "style"; "divId": "divId"; "className": "className"; }, { "initialized": "initialized"; "update": "update"; "purge": "purge"; "error": "error"; "afterExport": "afterExport"; "afterPlot": "afterPlot"; "animated": "animated"; "animatingFrame": "animatingFrame"; "animationInterrupted": "animationInterrupted"; "autoSize": "autoSize"; "beforeExport": "beforeExport"; "buttonClicked": "buttonClicked"; "click": "click"; "plotly_click": "plotly_click"; "clickAnnotation": "clickAnnotation"; "deselect": "deselect"; "doubleClick": "doubleClick"; "framework": "framework"; "hover": "hover"; "legendClick": "legendClick"; "legendDoubleClick": "legendDoubleClick"; "relayout": "relayout"; "restyle": "restyle"; "redraw": "redraw"; "selected": "selected"; "selecting": "selecting"; "sliderChange": "sliderChange"; "sliderEnd": "sliderEnd"; "sliderStart": "sliderStart"; "transitioning": "transitioning"; "transitionInterrupted": "transitionInterrupted"; "unhover": "unhover"; "relayouting": "relayouting"; "treemapclick": "treemapclick"; "sunburstclick": "sunburstclick"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGxvdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBEb0NoZWNrLCBJdGVyYWJsZURpZmZlciwgSXRlcmFibGVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlciwgS2V5VmFsdWVEaWZmZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbG90bHlTZXJ2aWNlIH0gZnJvbSAnLi4vcGxvdGx5LnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxvdGx5IH0gZnJvbSAnLi4vcGxvdGx5LmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQbG90Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgRG9DaGVjayB7XG4gICAgcGxvdGx5OiBQbG90bHlTZXJ2aWNlO1xuICAgIGl0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzO1xuICAgIGtleVZhbHVlRGlmZmVyczogS2V5VmFsdWVEaWZmZXJzO1xuICAgIHByb3RlY3RlZCBkZWZhdWx0Q2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgcGxvdGx5SW5zdGFuY2U6IFBsb3RseS5QbG90bHlIVE1MRWxlbWVudDtcbiAgICByZXNpemVIYW5kbGVyPzogKGluc3RhbmNlOiBQbG90bHkuUGxvdGx5SFRNTEVsZW1lbnQpID0+IHZvaWQ7XG4gICAgbGF5b3V0RGlmZmVyOiBLZXlWYWx1ZURpZmZlcjxzdHJpbmcsIGFueT47XG4gICAgZGF0YURpZmZlcjogSXRlcmFibGVEaWZmZXI8UGxvdGx5LkRhdGE+O1xuICAgIHBsb3RFbDogRWxlbWVudFJlZjtcbiAgICBkYXRhPzogUGxvdGx5LkRhdGFbXTtcbiAgICBsYXlvdXQ/OiBQYXJ0aWFsPFBsb3RseS5MYXlvdXQ+O1xuICAgIGNvbmZpZz86IFBhcnRpYWw8UGxvdGx5LkNvbmZpZz47XG4gICAgZnJhbWVzPzogUGFydGlhbDxQbG90bHkuQ29uZmlnPltdO1xuICAgIHN0eWxlPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICBkaXZJZD86IHN0cmluZztcbiAgICByZXZpc2lvbjogbnVtYmVyO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIGRlYnVnOiBib29sZWFuO1xuICAgIHVzZVJlc2l6ZUhhbmRsZXI6IGJvb2xlYW47XG4gICAgdXBkYXRlT25MYXlvdXRDaGFuZ2U6IGJvb2xlYW47XG4gICAgdXBkYXRlT25EYXRhQ2hhbmdlOiBib29sZWFuO1xuICAgIHVwZGF0ZU9ubHlXaXRoUmV2aXNpb246IGJvb2xlYW47XG4gICAgaW5pdGlhbGl6ZWQ6IEV2ZW50RW1pdHRlcjxQbG90bHkuRmlndXJlPjtcbiAgICB1cGRhdGU6IEV2ZW50RW1pdHRlcjxQbG90bHkuRmlndXJlPjtcbiAgICBwdXJnZTogRXZlbnRFbWl0dGVyPFBsb3RseS5GaWd1cmU+O1xuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8RXJyb3I+O1xuICAgIGFmdGVyRXhwb3J0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhZnRlclBsb3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGFuaW1hdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBhbmltYXRpbmdGcmFtZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYW5pbWF0aW9uSW50ZXJydXB0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGF1dG9TaXplOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBiZWZvcmVFeHBvcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwbG90bHlfY2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNsaWNrQW5ub3RhdGlvbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVzZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGRvdWJsZUNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmcmFtZXdvcms6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGhvdmVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBsZWdlbmRDbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbGVnZW5kRG91YmxlQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlbGF5b3V0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZXN0eWxlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZWRyYXc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzZWxlY3Rpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHNsaWRlckNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgc2xpZGVyRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzbGlkZXJTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdHJhbnNpdGlvbmluZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdHJhbnNpdGlvbkludGVycnVwdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB1bmhvdmVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZWxheW91dGluZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdHJlZW1hcGNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzdW5idXJzdGNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVudE5hbWVzOiBzdHJpbmdbXTtcbiAgICBjb25zdHJ1Y3RvcihwbG90bHk6IFBsb3RseVNlcnZpY2UsIGl0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBrZXlWYWx1ZURpZmZlcnM6IEtleVZhbHVlRGlmZmVycyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiBib29sZWFuO1xuICAgIGdldFdpbmRvdygpOiBhbnk7XG4gICAgZ2V0Q2xhc3NOYW1lKCk6IHN0cmluZztcbiAgICBjcmVhdGVQbG90KCk6IFByb21pc2U8dm9pZD47XG4gICAgY3JlYXRlRmlndXJlKCk6IFBsb3RseS5GaWd1cmU7XG4gICAgdXBkYXRlUGxvdCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHVwZGF0ZVdpbmRvd1Jlc2l6ZUhhbmRsZXIoKTogdm9pZDtcbiAgICBkYXRhRGlmZmVyVHJhY2tCeShfOiBudW1iZXIsIGl0ZW06IGFueSk6IGFueTtcbn1cbiJdfQ==