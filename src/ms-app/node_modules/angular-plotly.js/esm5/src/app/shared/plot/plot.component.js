import { __assign, __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, Input, OnDestroy, OnChanges, OnInit, Output, SimpleChange, SimpleChanges, ViewChild, DoCheck, IterableDiffer, IterableDiffers, KeyValueDiffer, KeyValueDiffers, } from '@angular/core';
import { PlotlyService } from '../plotly.service';
// @dynamic
var PlotComponent = /** @class */ (function () {
    function PlotComponent(plotly, iterableDiffers, keyValueDiffers) {
        this.plotly = plotly;
        this.iterableDiffers = iterableDiffers;
        this.keyValueDiffers = keyValueDiffers;
        this.defaultClassName = 'js-plotly-plot';
        this.revision = 0;
        this.debug = false;
        this.useResizeHandler = false;
        this.updateOnLayoutChange = true;
        this.updateOnDataChange = true;
        this.updateOnlyWithRevision = false;
        this.initialized = new EventEmitter();
        this.update = new EventEmitter();
        this.purge = new EventEmitter();
        this.error = new EventEmitter();
        this.afterExport = new EventEmitter();
        this.afterPlot = new EventEmitter();
        this.animated = new EventEmitter();
        this.animatingFrame = new EventEmitter();
        this.animationInterrupted = new EventEmitter();
        this.autoSize = new EventEmitter();
        this.beforeExport = new EventEmitter();
        this.buttonClicked = new EventEmitter();
        this.click = new EventEmitter();
        this.plotly_click = new EventEmitter();
        this.clickAnnotation = new EventEmitter();
        this.deselect = new EventEmitter();
        this.doubleClick = new EventEmitter();
        this.framework = new EventEmitter();
        this.hover = new EventEmitter();
        this.legendClick = new EventEmitter();
        this.legendDoubleClick = new EventEmitter();
        this.relayout = new EventEmitter();
        this.restyle = new EventEmitter();
        this.redraw = new EventEmitter();
        this.selected = new EventEmitter();
        this.selecting = new EventEmitter();
        this.sliderChange = new EventEmitter();
        this.sliderEnd = new EventEmitter();
        this.sliderStart = new EventEmitter();
        this.transitioning = new EventEmitter();
        this.transitionInterrupted = new EventEmitter();
        this.unhover = new EventEmitter();
        this.relayouting = new EventEmitter();
        this.treemapclick = new EventEmitter();
        this.sunburstclick = new EventEmitter();
        this.eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',
            'beforeExport', 'buttonClicked', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',
            'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',
            'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover', 'relayouting', 'treemapclick',
            'sunburstclick'];
    }
    PlotComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.createPlot().then(function () {
            var figure = _this.createFigure();
            _this.initialized.emit(figure);
        });
        if (this.plotly.debug && this.click.observers.length > 0) {
            var msg = 'DEPRECATED: Reconsider using `(plotly_click)` instead of `(click)` to avoid event conflict. '
                + 'Please check https://github.com/plotly/angular-plotly.js#FAQ';
            console.error(msg);
        }
    };
    PlotComponent.prototype.ngOnDestroy = function () {
        if (typeof this.resizeHandler === 'function') {
            this.getWindow().removeEventListener('resize', this.resizeHandler);
            this.resizeHandler = undefined;
        }
        var figure = this.createFigure();
        this.purge.emit(figure);
        PlotlyService.remove(this.plotlyInstance);
    };
    PlotComponent.prototype.ngOnChanges = function (changes) {
        var shouldUpdate = false;
        var revision = changes.revision;
        if (revision && !revision.isFirstChange()) {
            shouldUpdate = true;
        }
        var debug = changes.debug;
        if (debug && !debug.isFirstChange()) {
            shouldUpdate = true;
        }
        if (shouldUpdate) {
            this.updatePlot();
        }
        this.updateWindowResizeHandler();
    };
    PlotComponent.prototype.ngDoCheck = function () {
        if (this.updateOnlyWithRevision) {
            return false;
        }
        var shouldUpdate = false;
        if (this.updateOnLayoutChange) {
            if (this.layoutDiffer) {
                var layoutHasDiff = this.layoutDiffer.diff(this.layout);
                if (layoutHasDiff) {
                    shouldUpdate = true;
                }
            }
            else if (this.layout) {
                this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();
            }
            else {
                this.layoutDiffer = undefined;
            }
        }
        if (this.updateOnDataChange) {
            if (this.dataDiffer) {
                var dataHasDiff = this.dataDiffer.diff(this.data);
                if (dataHasDiff) {
                    shouldUpdate = true;
                }
            }
            else if (Array.isArray(this.data)) {
                this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);
            }
            else {
                this.dataDiffer = undefined;
            }
        }
        if (shouldUpdate && this.plotlyInstance) {
            this.updatePlot();
        }
    };
    PlotComponent.prototype.getWindow = function () {
        return window;
    };
    PlotComponent.prototype.getClassName = function () {
        var classes = [this.defaultClassName];
        if (Array.isArray(this.className)) {
            classes = classes.concat(this.className);
        }
        else if (this.className) {
            classes.push(this.className);
        }
        return classes.join(' ');
    };
    PlotComponent.prototype.createPlot = function () {
        var _this = this;
        return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(function (plotlyInstance) {
            _this.plotlyInstance = plotlyInstance;
            _this.getWindow().gd = _this.debug ? plotlyInstance : undefined;
            _this.eventNames.forEach(function (name) {
                var eventName = "plotly_" + name.toLowerCase();
                plotlyInstance.on(eventName, function (data) { return _this[name].emit(data); });
            });
            plotlyInstance.on('plotly_click', function (data) {
                _this.click.emit(data);
                _this.plotly_click.emit(data);
            });
            _this.updateWindowResizeHandler();
        }, function (err) {
            console.error('Error while plotting:', err);
            _this.error.emit(err);
        });
    };
    PlotComponent.prototype.createFigure = function () {
        var p = this.plotlyInstance;
        var figure = {
            data: p.data,
            layout: p.layout,
            frames: p._transitionData ? p._transitionData._frames : null
        };
        return figure;
    };
    PlotComponent.prototype.updatePlot = function () {
        var _this = this;
        if (!this.plotlyInstance) {
            var error = new Error("Plotly component wasn't initialized");
            this.error.emit(error);
            throw error;
        }
        var layout = __assign({}, this.layout);
        return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(function () {
            var figure = _this.createFigure();
            _this.update.emit(figure);
        }, function (err) {
            console.error('Error while updating plot:', err);
            _this.error.emit(err);
        });
    };
    PlotComponent.prototype.updateWindowResizeHandler = function () {
        var _this = this;
        if (this.useResizeHandler) {
            if (this.resizeHandler === undefined) {
                this.resizeHandler = function () { return _this.plotly.resize(_this.plotlyInstance); };
                this.getWindow().addEventListener('resize', this.resizeHandler);
            }
        }
        else {
            if (typeof this.resizeHandler === 'function') {
                this.getWindow().removeEventListener('resize', this.resizeHandler);
                this.resizeHandler = undefined;
            }
        }
    };
    PlotComponent.prototype.dataDifferTrackBy = function (_, item) {
        var obj = Object.assign({}, item, { uid: '' });
        return JSON.stringify(obj);
    };
    PlotComponent.ctorParameters = function () { return [
        { type: PlotlyService },
        { type: IterableDiffers },
        { type: KeyValueDiffers }
    ]; };
    __decorate([
        ViewChild('plot', { static: true })
    ], PlotComponent.prototype, "plotEl", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "data", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "layout", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "frames", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "style", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "divId", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "revision", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "className", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "debug", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "useResizeHandler", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "updateOnLayoutChange", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "updateOnDataChange", void 0);
    __decorate([
        Input()
    ], PlotComponent.prototype, "updateOnlyWithRevision", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "initialized", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "update", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "purge", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "error", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "afterExport", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "afterPlot", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "animated", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "animatingFrame", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "animationInterrupted", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "autoSize", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "beforeExport", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "buttonClicked", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "click", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "plotly_click", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "clickAnnotation", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "deselect", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "doubleClick", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "framework", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "hover", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "legendClick", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "legendDoubleClick", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "relayout", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "restyle", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "redraw", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "selected", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "selecting", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "sliderChange", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "sliderEnd", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "sliderStart", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "transitioning", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "transitionInterrupted", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "unhover", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "relayouting", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "treemapclick", void 0);
    __decorate([
        Output()
    ], PlotComponent.prototype, "sunburstclick", void 0);
    PlotComponent = __decorate([
        Component({
            selector: 'plotly-plot',
            template: "<div #plot [attr.id]=\"divId\" [className]=\"getClassName()\" [ngStyle]=\"style\"></div>",
            providers: [PlotlyService]
        })
    ], PlotComponent);
    return PlotComponent;
}());
export { PlotComponent };
//# sourceMappingURL=data:application/json;base64,