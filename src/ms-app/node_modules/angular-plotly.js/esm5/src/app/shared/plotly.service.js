import { __awaiter, __decorate, __generator, __values } from "tslib";
import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import * as i0 from "@angular/core";
var PlotlyService = /** @class */ (function () {
    function PlotlyService() {
    }
    PlotlyService_1 = PlotlyService;
    PlotlyService.setModuleName = function (moduleName) {
        PlotlyService_1._moduleName = moduleName;
    };
    PlotlyService.setPlotly = function (plotly) {
        if (typeof plotly === 'object' && typeof plotly.react !== 'function') {
            throw new Error('Invalid plotly.js version. Please, use any version above 1.40.0');
        }
        PlotlyService_1._plotly = plotly;
    };
    PlotlyService.insert = function (instance) {
        var index = PlotlyService_1.instances.indexOf(instance);
        if (index === -1) {
            PlotlyService_1.instances.push(instance);
        }
        return instance;
    };
    PlotlyService.remove = function (div) {
        var index = PlotlyService_1.instances.indexOf(div);
        if (index >= 0) {
            PlotlyService_1.instances.splice(index, 1);
            PlotlyService_1._plotly.purge(div);
        }
    };
    Object.defineProperty(PlotlyService.prototype, "debug", {
        get: function () {
            return environment.production === false;
        },
        enumerable: true,
        configurable: true
    });
    PlotlyService.prototype.getInstanceByDivId = function (id) {
        var e_1, _a;
        try {
            for (var _b = __values(PlotlyService_1.instances), _c = _b.next(); !_c.done; _c = _b.next()) {
                var instance = _c.value;
                if (instance && instance.id === id) {
                    return instance;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return undefined;
    };
    PlotlyService.prototype.getPlotly = function () {
        if (typeof PlotlyService_1._plotly === 'undefined') {
            var msg = PlotlyService_1._moduleName === 'ViaCDN'
                ? "Error loading Peer dependency plotly.js from CDN url"
                : "Peer dependency plotly.js isn't installed";
            throw new Error(msg);
        }
        return PlotlyService_1._plotly;
    };
    PlotlyService.prototype.waitFor = function (fn) {
        return new Promise(function (resolve) {
            var localFn = function () {
                fn() ? resolve() : setTimeout(localFn, 10);
            };
            localFn();
        });
    };
    // tslint:disable max-line-length
    PlotlyService.prototype.newPlot = function (div, data, layout, config, frames) {
        return __awaiter(this, void 0, void 0, function () {
            var obj;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.waitFor(function () { return _this.getPlotly() !== 'waiting'; })];
                    case 1:
                        _a.sent();
                        if (frames) {
                            obj = { data: data, layout: layout, config: config, frames: frames };
                            return [2 /*return*/, this.getPlotly().newPlot(div, obj).then(function () { return PlotlyService_1.insert(div); })];
                        }
                        return [2 /*return*/, this.getPlotly().newPlot(div, data, layout, config).then(function () { return PlotlyService_1.insert(div); })];
                }
            });
        });
    };
    PlotlyService.prototype.plot = function (div, data, layout, config, frames) {
        if (frames) {
            var obj = { data: data, layout: layout, config: config, frames: frames };
            return this.getPlotly().plot(div, obj);
        }
        return this.getPlotly().plot(div, data, layout, config);
    };
    PlotlyService.prototype.update = function (div, data, layout, config, frames) {
        if (frames) {
            var obj = { data: data, layout: layout, config: config, frames: frames };
            return this.getPlotly().react(div, obj);
        }
        return this.getPlotly().react(div, data, layout, config);
    };
    // tslint:enable max-line-length
    PlotlyService.prototype.resize = function (div) {
        return this.getPlotly().Plots.resize(div);
    };
    var PlotlyService_1;
    PlotlyService.instances = [];
    PlotlyService._plotly = undefined;
    PlotlyService._moduleName = undefined;
    PlotlyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PlotlyService_Factory() { return new PlotlyService(); }, token: PlotlyService, providedIn: "root" });
    PlotlyService = PlotlyService_1 = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], PlotlyService);
    return PlotlyService;
}());
export { PlotlyService };
//# sourceMappingURL=data:application/json;base64,