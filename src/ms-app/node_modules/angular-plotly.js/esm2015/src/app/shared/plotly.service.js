var PlotlyService_1;
import { __awaiter, __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { environment } from '../../environments/environment';
import * as i0 from "@angular/core";
let PlotlyService = PlotlyService_1 = class PlotlyService {
    static setModuleName(moduleName) {
        PlotlyService_1._moduleName = moduleName;
    }
    static setPlotly(plotly) {
        if (typeof plotly === 'object' && typeof plotly.react !== 'function') {
            throw new Error('Invalid plotly.js version. Please, use any version above 1.40.0');
        }
        PlotlyService_1._plotly = plotly;
    }
    static insert(instance) {
        const index = PlotlyService_1.instances.indexOf(instance);
        if (index === -1) {
            PlotlyService_1.instances.push(instance);
        }
        return instance;
    }
    static remove(div) {
        const index = PlotlyService_1.instances.indexOf(div);
        if (index >= 0) {
            PlotlyService_1.instances.splice(index, 1);
            PlotlyService_1._plotly.purge(div);
        }
    }
    get debug() {
        return environment.production === false;
    }
    getInstanceByDivId(id) {
        for (const instance of PlotlyService_1.instances) {
            if (instance && instance.id === id) {
                return instance;
            }
        }
        return undefined;
    }
    getPlotly() {
        if (typeof PlotlyService_1._plotly === 'undefined') {
            const msg = PlotlyService_1._moduleName === 'ViaCDN'
                ? `Error loading Peer dependency plotly.js from CDN url`
                : `Peer dependency plotly.js isn't installed`;
            throw new Error(msg);
        }
        return PlotlyService_1._plotly;
    }
    waitFor(fn) {
        return new Promise((resolve) => {
            const localFn = () => {
                fn() ? resolve() : setTimeout(localFn, 10);
            };
            localFn();
        });
    }
    // tslint:disable max-line-length
    newPlot(div, data, layout, config, frames) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.waitFor(() => this.getPlotly() !== 'waiting');
            if (frames) {
                const obj = { data, layout, config, frames };
                return this.getPlotly().newPlot(div, obj).then(() => PlotlyService_1.insert(div));
            }
            return this.getPlotly().newPlot(div, data, layout, config).then(() => PlotlyService_1.insert(div));
        });
    }
    plot(div, data, layout, config, frames) {
        if (frames) {
            const obj = { data, layout, config, frames };
            return this.getPlotly().plot(div, obj);
        }
        return this.getPlotly().plot(div, data, layout, config);
    }
    update(div, data, layout, config, frames) {
        if (frames) {
            const obj = { data, layout, config, frames };
            return this.getPlotly().react(div, obj);
        }
        return this.getPlotly().react(div, data, layout, config);
    }
    // tslint:enable max-line-length
    resize(div) {
        return this.getPlotly().Plots.resize(div);
    }
};
PlotlyService.instances = [];
PlotlyService._plotly = undefined;
PlotlyService._moduleName = undefined;
PlotlyService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PlotlyService_Factory() { return new PlotlyService(); }, token: PlotlyService, providedIn: "root" });
PlotlyService = PlotlyService_1 = __decorate([
    Injectable({
        providedIn: 'root'
    })
], PlotlyService);
export { PlotlyService };
//# sourceMappingURL=data:application/json;base64,