{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\nimport { AsyncScheduler } from '../scheduler/AsyncScheduler';\nvar defaultMaxFrame = 750;\nexport var TestScheduler = /*#__PURE__*/function (_VirtualTimeScheduler) {\n  _inherits(TestScheduler, _VirtualTimeScheduler);\n\n  var _super = _createSuper(TestScheduler);\n\n  function TestScheduler(assertDeepEqual) {\n    var _this;\n\n    _classCallCheck(this, TestScheduler);\n\n    _this = _super.call(this, VirtualAction, defaultMaxFrame);\n    _this.assertDeepEqual = assertDeepEqual;\n    _this.hotObservables = [];\n    _this.coldObservables = [];\n    _this.flushTests = [];\n    _this.runMode = false;\n    return _this;\n  }\n\n  _createClass(TestScheduler, [{\n    key: \"createTime\",\n    value: function createTime(marbles) {\n      var indexOf = marbles.indexOf('|');\n\n      if (indexOf === -1) {\n        throw new Error('marble diagram for time should have a completion marker \"|\"');\n      }\n\n      return indexOf * TestScheduler.frameTimeFactor;\n    }\n  }, {\n    key: \"createColdObservable\",\n    value: function createColdObservable(marbles, values, error) {\n      if (marbles.indexOf('^') !== -1) {\n        throw new Error('cold observable cannot have subscription offset \"^\"');\n      }\n\n      if (marbles.indexOf('!') !== -1) {\n        throw new Error('cold observable cannot have unsubscription marker \"!\"');\n      }\n\n      var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n      var cold = new ColdObservable(messages, this);\n      this.coldObservables.push(cold);\n      return cold;\n    }\n  }, {\n    key: \"createHotObservable\",\n    value: function createHotObservable(marbles, values, error) {\n      if (marbles.indexOf('!') !== -1) {\n        throw new Error('hot observable cannot have unsubscription marker \"!\"');\n      }\n\n      var messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n      var subject = new HotObservable(messages, this);\n      this.hotObservables.push(subject);\n      return subject;\n    }\n  }, {\n    key: \"materializeInnerObservable\",\n    value: function materializeInnerObservable(observable, outerFrame) {\n      var _this2 = this;\n\n      var messages = [];\n      observable.subscribe(function (value) {\n        messages.push({\n          frame: _this2.frame - outerFrame,\n          notification: Notification.createNext(value)\n        });\n      }, function (err) {\n        messages.push({\n          frame: _this2.frame - outerFrame,\n          notification: Notification.createError(err)\n        });\n      }, function () {\n        messages.push({\n          frame: _this2.frame - outerFrame,\n          notification: Notification.createComplete()\n        });\n      });\n      return messages;\n    }\n  }, {\n    key: \"expectObservable\",\n    value: function expectObservable(observable) {\n      var _this3 = this;\n\n      var subscriptionMarbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var actual = [];\n      var flushTest = {\n        actual: actual,\n        ready: false\n      };\n      var subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n      var subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ? 0 : subscriptionParsed.subscribedFrame;\n      var unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n      var subscription;\n      this.schedule(function () {\n        subscription = observable.subscribe(function (x) {\n          var value = x;\n\n          if (x instanceof Observable) {\n            value = _this3.materializeInnerObservable(value, _this3.frame);\n          }\n\n          actual.push({\n            frame: _this3.frame,\n            notification: Notification.createNext(value)\n          });\n        }, function (err) {\n          actual.push({\n            frame: _this3.frame,\n            notification: Notification.createError(err)\n          });\n        }, function () {\n          actual.push({\n            frame: _this3.frame,\n            notification: Notification.createComplete()\n          });\n        });\n      }, subscriptionFrame);\n\n      if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n        this.schedule(function () {\n          return subscription.unsubscribe();\n        }, unsubscriptionFrame);\n      }\n\n      this.flushTests.push(flushTest);\n      var runMode = this.runMode;\n      return {\n        toBe: function toBe(marbles, values, errorValue) {\n          flushTest.ready = true;\n          flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n        }\n      };\n    }\n  }, {\n    key: \"expectSubscriptions\",\n    value: function expectSubscriptions(actualSubscriptionLogs) {\n      var flushTest = {\n        actual: actualSubscriptionLogs,\n        ready: false\n      };\n      this.flushTests.push(flushTest);\n      var runMode = this.runMode;\n      return {\n        toBe: function toBe(marbles) {\n          var marblesArray = typeof marbles === 'string' ? [marbles] : marbles;\n          flushTest.ready = true;\n          flushTest.expected = marblesArray.map(function (marbles) {\n            return TestScheduler.parseMarblesAsSubscriptions(marbles, runMode);\n          });\n        }\n      };\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var _this4 = this;\n\n      var hotObservables = this.hotObservables;\n\n      while (hotObservables.length > 0) {\n        hotObservables.shift().setup();\n      }\n\n      _get(_getPrototypeOf(TestScheduler.prototype), \"flush\", this).call(this);\n\n      this.flushTests = this.flushTests.filter(function (test) {\n        if (test.ready) {\n          _this4.assertDeepEqual(test.actual, test.expected);\n\n          return false;\n        }\n\n        return true;\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function run(callback) {\n      var prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n      var prevMaxFrames = this.maxFrames;\n      TestScheduler.frameTimeFactor = 1;\n      this.maxFrames = Number.POSITIVE_INFINITY;\n      this.runMode = true;\n      AsyncScheduler.delegate = this;\n      var helpers = {\n        cold: this.createColdObservable.bind(this),\n        hot: this.createHotObservable.bind(this),\n        flush: this.flush.bind(this),\n        expectObservable: this.expectObservable.bind(this),\n        expectSubscriptions: this.expectSubscriptions.bind(this)\n      };\n\n      try {\n        var ret = callback(helpers);\n        this.flush();\n        return ret;\n      } finally {\n        TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n        this.maxFrames = prevMaxFrames;\n        this.runMode = false;\n        AsyncScheduler.delegate = undefined;\n      }\n    }\n  }], [{\n    key: \"parseMarblesAsSubscriptions\",\n    value: function parseMarblesAsSubscriptions(marbles) {\n      var _this5 = this;\n\n      var runMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (typeof marbles !== 'string') {\n        return new SubscriptionLog(Number.POSITIVE_INFINITY);\n      }\n\n      var len = marbles.length;\n      var groupStart = -1;\n      var subscriptionFrame = Number.POSITIVE_INFINITY;\n      var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n      var frame = 0;\n\n      for (var i = 0; i < len; i++) {\n        var nextFrame = frame;\n\n        var advanceFrameBy = function advanceFrameBy(count) {\n          nextFrame += count * _this5.frameTimeFactor;\n        };\n\n        var c = marbles[i];\n\n        switch (c) {\n          case ' ':\n            if (!runMode) {\n              advanceFrameBy(1);\n            }\n\n            break;\n\n          case '-':\n            advanceFrameBy(1);\n            break;\n\n          case '(':\n            groupStart = frame;\n            advanceFrameBy(1);\n            break;\n\n          case ')':\n            groupStart = -1;\n            advanceFrameBy(1);\n            break;\n\n          case '^':\n            if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n              throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n            }\n\n            subscriptionFrame = groupStart > -1 ? groupStart : frame;\n            advanceFrameBy(1);\n            break;\n\n          case '!':\n            if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n              throw new Error('found a second subscription point \\'^\\' in a ' + 'subscription marble diagram. There can only be one.');\n            }\n\n            unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n            break;\n\n          default:\n            if (runMode && c.match(/^[0-9]$/)) {\n              if (i === 0 || marbles[i - 1] === ' ') {\n                var buffer = marbles.slice(i);\n                var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n                if (match) {\n                  i += match[0].length - 1;\n                  var duration = parseFloat(match[1]);\n                  var unit = match[2];\n                  var durationInMs = void 0;\n\n                  switch (unit) {\n                    case 'ms':\n                      durationInMs = duration;\n                      break;\n\n                    case 's':\n                      durationInMs = duration * 1000;\n                      break;\n\n                    case 'm':\n                      durationInMs = duration * 1000 * 60;\n                      break;\n\n                    default:\n                      break;\n                  }\n\n                  advanceFrameBy(durationInMs / this.frameTimeFactor);\n                  break;\n                }\n              }\n            }\n\n            throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' + 'subscription marble diagram. Found instead \\'' + c + '\\'.');\n        }\n\n        frame = nextFrame;\n      }\n\n      if (unsubscriptionFrame < 0) {\n        return new SubscriptionLog(subscriptionFrame);\n      } else {\n        return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n      }\n    }\n  }, {\n    key: \"parseMarbles\",\n    value: function parseMarbles(marbles, values, errorValue) {\n      var _this6 = this;\n\n      var materializeInnerObservables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var runMode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (marbles.indexOf('!') !== -1) {\n        throw new Error('conventional marble diagrams cannot have the ' + 'unsubscription marker \"!\"');\n      }\n\n      var len = marbles.length;\n      var testMessages = [];\n      var subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n      var frame = subIndex === -1 ? 0 : subIndex * -this.frameTimeFactor;\n      var getValue = typeof values !== 'object' ? function (x) {\n        return x;\n      } : function (x) {\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n\n        return values[x];\n      };\n      var groupStart = -1;\n\n      for (var i = 0; i < len; i++) {\n        var nextFrame = frame;\n\n        var advanceFrameBy = function advanceFrameBy(count) {\n          nextFrame += count * _this6.frameTimeFactor;\n        };\n\n        var notification = void 0;\n        var c = marbles[i];\n\n        switch (c) {\n          case ' ':\n            if (!runMode) {\n              advanceFrameBy(1);\n            }\n\n            break;\n\n          case '-':\n            advanceFrameBy(1);\n            break;\n\n          case '(':\n            groupStart = frame;\n            advanceFrameBy(1);\n            break;\n\n          case ')':\n            groupStart = -1;\n            advanceFrameBy(1);\n            break;\n\n          case '|':\n            notification = Notification.createComplete();\n            advanceFrameBy(1);\n            break;\n\n          case '^':\n            advanceFrameBy(1);\n            break;\n\n          case '#':\n            notification = Notification.createError(errorValue || 'error');\n            advanceFrameBy(1);\n            break;\n\n          default:\n            if (runMode && c.match(/^[0-9]$/)) {\n              if (i === 0 || marbles[i - 1] === ' ') {\n                var buffer = marbles.slice(i);\n                var match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n\n                if (match) {\n                  i += match[0].length - 1;\n                  var duration = parseFloat(match[1]);\n                  var unit = match[2];\n                  var durationInMs = void 0;\n\n                  switch (unit) {\n                    case 'ms':\n                      durationInMs = duration;\n                      break;\n\n                    case 's':\n                      durationInMs = duration * 1000;\n                      break;\n\n                    case 'm':\n                      durationInMs = duration * 1000 * 60;\n                      break;\n\n                    default:\n                      break;\n                  }\n\n                  advanceFrameBy(durationInMs / this.frameTimeFactor);\n                  break;\n                }\n              }\n            }\n\n            notification = Notification.createNext(getValue(c));\n            advanceFrameBy(1);\n            break;\n        }\n\n        if (notification) {\n          testMessages.push({\n            frame: groupStart > -1 ? groupStart : frame,\n            notification: notification\n          });\n        }\n\n        frame = nextFrame;\n      }\n\n      return testMessages;\n    }\n  }]);\n\n  return TestScheduler;\n}(VirtualTimeScheduler);","map":{"version":3,"sources":["../../../src/internal/testing/TestScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\nimport { AsyncScheduler } from '../scheduler/AsyncScheduler';\nconst defaultMaxFrame = 750;\nexport class TestScheduler extends VirtualTimeScheduler {\n    constructor(assertDeepEqual) {\n        super(VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n        this.runMode = false;\n    }\n    createTime(marbles) {\n        const indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    }\n    createColdObservable(marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        const messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        const cold = new ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    }\n    createHotObservable(marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        const messages = TestScheduler.parseMarbles(marbles, values, error, undefined, this.runMode);\n        const subject = new HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    }\n    materializeInnerObservable(observable, outerFrame) {\n        const messages = [];\n        observable.subscribe((value) => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n        }, (err) => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n        }, () => {\n            messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n        });\n        return messages;\n    }\n    expectObservable(observable, subscriptionMarbles = null) {\n        const actual = [];\n        const flushTest = { actual, ready: false };\n        const subscriptionParsed = TestScheduler.parseMarblesAsSubscriptions(subscriptionMarbles, this.runMode);\n        const subscriptionFrame = subscriptionParsed.subscribedFrame === Number.POSITIVE_INFINITY ?\n            0 : subscriptionParsed.subscribedFrame;\n        const unsubscriptionFrame = subscriptionParsed.unsubscribedFrame;\n        let subscription;\n        this.schedule(() => {\n            subscription = observable.subscribe(x => {\n                let value = x;\n                if (x instanceof Observable) {\n                    value = this.materializeInnerObservable(value, this.frame);\n                }\n                actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n            }, (err) => {\n                actual.push({ frame: this.frame, notification: Notification.createError(err) });\n            }, () => {\n                actual.push({ frame: this.frame, notification: Notification.createComplete() });\n            });\n        }, subscriptionFrame);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        const { runMode } = this;\n        return {\n            toBe(marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true, runMode);\n            }\n        };\n    }\n    expectSubscriptions(actualSubscriptionLogs) {\n        const flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        const { runMode } = this;\n        return {\n            toBe(marbles) {\n                const marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(marbles => TestScheduler.parseMarblesAsSubscriptions(marbles, runMode));\n            }\n        };\n    }\n    flush() {\n        const hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        super.flush();\n        this.flushTests = this.flushTests.filter(test => {\n            if (test.ready) {\n                this.assertDeepEqual(test.actual, test.expected);\n                return false;\n            }\n            return true;\n        });\n    }\n    static parseMarblesAsSubscriptions(marbles, runMode = false) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        const len = marbles.length;\n        let groupStart = -1;\n        let subscriptionFrame = Number.POSITIVE_INFINITY;\n        let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        let frame = 0;\n        for (let i = 0; i < len; i++) {\n            let nextFrame = frame;\n            const advanceFrameBy = (count) => {\n                nextFrame += count * this.frameTimeFactor;\n            };\n            const c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    advanceFrameBy(1);\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            const buffer = marbles.slice(i);\n                            const match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                const duration = parseFloat(match[1]);\n                                const unit = match[2];\n                                let durationInMs;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n            frame = nextFrame;\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    }\n    static parseMarbles(marbles, values, errorValue, materializeInnerObservables = false, runMode = false) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        const len = marbles.length;\n        const testMessages = [];\n        const subIndex = runMode ? marbles.replace(/^[ ]+/, '').indexOf('^') : marbles.indexOf('^');\n        let frame = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        const getValue = typeof values !== 'object' ?\n            (x) => x :\n            (x) => {\n                if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        let groupStart = -1;\n        for (let i = 0; i < len; i++) {\n            let nextFrame = frame;\n            const advanceFrameBy = (count) => {\n                nextFrame += count * this.frameTimeFactor;\n            };\n            let notification;\n            const c = marbles[i];\n            switch (c) {\n                case ' ':\n                    if (!runMode) {\n                        advanceFrameBy(1);\n                    }\n                    break;\n                case '-':\n                    advanceFrameBy(1);\n                    break;\n                case '(':\n                    groupStart = frame;\n                    advanceFrameBy(1);\n                    break;\n                case ')':\n                    groupStart = -1;\n                    advanceFrameBy(1);\n                    break;\n                case '|':\n                    notification = Notification.createComplete();\n                    advanceFrameBy(1);\n                    break;\n                case '^':\n                    advanceFrameBy(1);\n                    break;\n                case '#':\n                    notification = Notification.createError(errorValue || 'error');\n                    advanceFrameBy(1);\n                    break;\n                default:\n                    if (runMode && c.match(/^[0-9]$/)) {\n                        if (i === 0 || marbles[i - 1] === ' ') {\n                            const buffer = marbles.slice(i);\n                            const match = buffer.match(/^([0-9]+(?:\\.[0-9]+)?)(ms|s|m) /);\n                            if (match) {\n                                i += match[0].length - 1;\n                                const duration = parseFloat(match[1]);\n                                const unit = match[2];\n                                let durationInMs;\n                                switch (unit) {\n                                    case 'ms':\n                                        durationInMs = duration;\n                                        break;\n                                    case 's':\n                                        durationInMs = duration * 1000;\n                                        break;\n                                    case 'm':\n                                        durationInMs = duration * 1000 * 60;\n                                        break;\n                                    default:\n                                        break;\n                                }\n                                advanceFrameBy(durationInMs / this.frameTimeFactor);\n                                break;\n                            }\n                        }\n                    }\n                    notification = Notification.createNext(getValue(c));\n                    advanceFrameBy(1);\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n            }\n            frame = nextFrame;\n        }\n        return testMessages;\n    }\n    run(callback) {\n        const prevFrameTimeFactor = TestScheduler.frameTimeFactor;\n        const prevMaxFrames = this.maxFrames;\n        TestScheduler.frameTimeFactor = 1;\n        this.maxFrames = Number.POSITIVE_INFINITY;\n        this.runMode = true;\n        AsyncScheduler.delegate = this;\n        const helpers = {\n            cold: this.createColdObservable.bind(this),\n            hot: this.createHotObservable.bind(this),\n            flush: this.flush.bind(this),\n            expectObservable: this.expectObservable.bind(this),\n            expectSubscriptions: this.expectSubscriptions.bind(this),\n        };\n        try {\n            const ret = callback(helpers);\n            this.flush();\n            return ret;\n        }\n        finally {\n            TestScheduler.frameTimeFactor = prevFrameTimeFactor;\n            this.maxFrames = prevMaxFrames;\n            this.runMode = false;\n            AsyncScheduler.delegate = undefined;\n        }\n    }\n}\n//# sourceMappingURL=TestScheduler.js.map"]},"metadata":{},"sourceType":"module"}