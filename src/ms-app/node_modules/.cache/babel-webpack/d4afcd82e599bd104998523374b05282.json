{"ast":null,"code":"import _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nvar MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * Base interface for a `MatGridList`.\n * \\@docs-private\n * @record\n */\n\nfunction MatGridListBase() {}\n\nif (false) {\n  /** @type {?} */\n  MatGridListBase.prototype.cols;\n  /** @type {?} */\n\n  MatGridListBase.prototype.gutterSize;\n  /** @type {?} */\n\n  MatGridListBase.prototype.rowHeight;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-tile.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatGridTile = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?=} _gridList\n   */\n  function MatGridTile(_element, _gridList) {\n    _classCallCheck(this, MatGridTile);\n\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /**\n   * Amount of rows that the grid tile takes up.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTile, [{\n    key: \"_setStyle\",\n\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    value: function _setStyle(property, value) {\n      /** @type {?} */\n      this._element.nativeElement.style[property] = value;\n    }\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      return this._rowspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._rowspan = Math.round(coerceNumberProperty(value));\n    }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n\n  }, {\n    key: \"colspan\",\n    get: function get() {\n      return this._colspan;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._colspan = Math.round(coerceNumberProperty(value));\n    }\n  }]);\n\n  return MatGridTile;\n}();\n\nMatGridTile.ɵfac = function MatGridTile_Factory(t) {\n  return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n};\n\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTile,\n  selectors: [[\"mat-grid-tile\"]],\n  hostAttrs: [1, \"mat-grid-tile\"],\n  hostVars: 2,\n  hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    }\n  },\n  inputs: {\n    rowspan: \"rowspan\",\n    colspan: \"colspan\"\n  },\n  exportAs: [\"matGridTile\"],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-figure\"]],\n  template: function MatGridTile_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTile.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_GRID_LIST]\n    }]\n  }];\n};\n\nMatGridTile.propDecorators = {\n  rowspan: [{\n    type: Input\n  }],\n  colspan: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_GRID_LIST]\n      }]\n    }];\n  }, {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatGridTile.ngAcceptInputType_rowspan;\n  /** @type {?} */\n\n  MatGridTile.ngAcceptInputType_colspan;\n  /** @type {?} */\n\n  MatGridTile.prototype._rowspan;\n  /** @type {?} */\n\n  MatGridTile.prototype._colspan;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatGridTile.prototype._element;\n  /** @type {?} */\n\n  MatGridTile.prototype._gridList;\n}\n\nvar MatGridTileText = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   */\n  function MatGridTileText(_element) {\n    _classCallCheck(this, MatGridTileText);\n\n    this._element = _element;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatGridTileText, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n  }]);\n\n  return MatGridTileText;\n}();\n\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) {\n  return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridTileText,\n  selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n  contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  ngContentSelectors: _c2,\n  decls: 4,\n  vars: 0,\n  consts: [[1, \"mat-grid-list-text\"]],\n  template: function MatGridTileText_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(3, 2);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridTileText.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nMatGridTileText.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine, {\n      descendants: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatGridTileText.prototype._lines;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatGridTileText.prototype._element;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridAvatarCssMatStyler = function MatGridAvatarCssMatStyler() {\n  _classCallCheck(this, MatGridAvatarCssMatStyler);\n};\n\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) {\n  return new (t || MatGridAvatarCssMatStyler)();\n};\n\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-grid-avatar\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileHeaderCssMatStyler = function MatGridTileHeaderCssMatStyler() {\n  _classCallCheck(this, MatGridTileHeaderCssMatStyler);\n};\n\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) {\n  return new (t || MatGridTileHeaderCssMatStyler)();\n};\n\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileHeaderCssMatStyler,\n  selectors: [[\"mat-grid-tile-header\"]],\n  hostAttrs: [1, \"mat-grid-tile-header\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatGridTileFooterCssMatStyler = function MatGridTileFooterCssMatStyler() {\n  _classCallCheck(this, MatGridTileFooterCssMatStyler);\n};\n\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) {\n  return new (t || MatGridTileFooterCssMatStyler)();\n};\n\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatGridTileFooterCssMatStyler,\n  selectors: [[\"mat-grid-tile-footer\"]],\n  hostAttrs: [1, \"mat-grid-tile-footer\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-coordinator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Interface describing a tile.\n * \\@docs-private\n * @record\n */\n\n\nfunction Tile() {}\n\nif (false) {\n  /**\n   * Amount of rows that the tile takes up.\n   * @type {?}\n   */\n  Tile.prototype.rowspan;\n  /**\n   * Amount of columns that the tile takes up.\n   * @type {?}\n   */\n\n  Tile.prototype.colspan;\n}\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\n\n\nvar TileCoordinator = /*#__PURE__*/function () {\n  function TileCoordinator() {\n    _classCallCheck(this, TileCoordinator);\n\n    /**\n     * Index at which the search for the next gap will start.\n     */\n    this.columnIndex = 0;\n    /**\n     * The current row index.\n     */\n\n    this.rowIndex = 0;\n  }\n  /**\n   * Gets the total number of rows occupied by tiles\n   * @return {?}\n   */\n\n\n  _createClass(TileCoordinator, [{\n    key: \"update\",\n\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles Tiles to be positioned.\n     * @return {?}\n     */\n    value: function update(numColumns, tiles) {\n      var _this = this;\n\n      this.columnIndex = 0;\n      this.rowIndex = 0;\n      this.tracker = new Array(numColumns);\n      this.tracker.fill(0, 0, this.tracker.length);\n      this.positions = tiles.map(\n      /**\n      * @param {?} tile\n      * @return {?}\n      */\n      function (tile) {\n        return _this._trackTile(tile);\n      });\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackTile\",\n    value: function _trackTile(tile) {\n      // Find a gap large enough for this tile.\n\n      /** @type {?} */\n      var gapStartIndex = this._findMatchingGap(tile.colspan); // Place tile in the resulting gap.\n\n\n      this._markTilePosition(gapStartIndex, tile); // The next time we look for a gap, the search will start at columnIndex, which should be\n      // immediately after the tile that has just been placed.\n\n\n      this.columnIndex = gapStartIndex + tile.colspan;\n      return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findMatchingGap\",\n    value: function _findMatchingGap(tileCols) {\n      if (tileCols > this.tracker.length) {\n        throw Error(\"mat-grid-list: tile with colspan \".concat(tileCols, \" is wider than \") + \"grid with cols=\\\"\".concat(this.tracker.length, \"\\\".\"));\n      } // Start index is inclusive, end index is exclusive.\n\n      /** @type {?} */\n\n\n      var gapStartIndex = -1;\n      /** @type {?} */\n\n      var gapEndIndex = -1; // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n\n      do {\n        // If we've reached the end of the row, go to the next row.\n        if (this.columnIndex + tileCols > this.tracker.length) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex); // If there are no more empty spaces in this row at all, move on to the next row.\n\n        if (gapStartIndex == -1) {\n          this._nextRow();\n\n          gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n          gapEndIndex = this._findGapEndIndex(gapStartIndex);\n          continue;\n        }\n\n        gapEndIndex = this._findGapEndIndex(gapStartIndex); // If a gap large enough isn't found, we want to start looking immediately after the current\n        // gap on the next iteration.\n\n        this.columnIndex = gapStartIndex + 1; // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n        // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n      } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0); // If we still didn't manage to find a gap, ensure that the index is\n      // at least zero so the tile doesn't get pulled out of the grid.\n\n\n      return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_nextRow\",\n    value: function _nextRow() {\n      this.columnIndex = 0;\n      this.rowIndex++; // Decrement all spaces by one to reflect moving down one row.\n\n      for (var i = 0; i < this.tracker.length; i++) {\n        this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n      }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_findGapEndIndex\",\n    value: function _findGapEndIndex(gapStartIndex) {\n      for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\n        if (this.tracker[i] != 0) {\n          return i;\n        }\n      } // The gap ends with the end of the row.\n\n\n      return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markTilePosition\",\n    value: function _markTilePosition(start, tile) {\n      for (var i = 0; i < tile.colspan; i++) {\n        this.tracker[start + i] = tile.rowspan;\n      }\n    }\n  }, {\n    key: \"rowCount\",\n    get: function get() {\n      return this.rowIndex + 1;\n    }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowspan\",\n    get: function get() {\n      /** @type {?} */\n      var lastRowMax = Math.max.apply(Math, _toConsumableArray(this.tracker)); // if any of the tiles has a rowspan that pushes it beyond the total row count,\n      // add the difference to the rowcount\n\n      return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n  }]);\n\n  return TileCoordinator;\n}();\n\nif (false) {\n  /**\n   * Tracking array (see class description).\n   * @type {?}\n   */\n  TileCoordinator.prototype.tracker;\n  /**\n   * Index at which the search for the next gap will start.\n   * @type {?}\n   */\n\n  TileCoordinator.prototype.columnIndex;\n  /**\n   * The current row index.\n   * @type {?}\n   */\n\n  TileCoordinator.prototype.rowIndex;\n  /**\n   * The computed (row, col) position of each tile (the output).\n   * @type {?}\n   */\n\n  TileCoordinator.prototype.positions;\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\n\n\nvar TilePosition =\n/**\n * @param {?} row\n * @param {?} col\n */\nfunction TilePosition(row, col) {\n  _classCallCheck(this, TilePosition);\n\n  this.row = row;\n  this.col = col;\n};\n\nif (false) {\n  /** @type {?} */\n  TilePosition.prototype.row;\n  /** @type {?} */\n\n  TilePosition.prototype.col;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\n\n\nvar cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\n\nvar TileStyler = /*#__PURE__*/function () {\n  function TileStyler() {\n    _classCallCheck(this, TileStyler);\n\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param {?} gutterSize Size of the grid's gutter.\n   * @param {?} tracker Instance of the TileCoordinator.\n   * @param {?} cols Amount of columns in the grid.\n   * @param {?} direction Layout direction of the grid.\n   * @return {?}\n   */\n\n\n  _createClass(TileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      this._gutterSize = normalizeUnits(gutterSize);\n      this._rows = tracker.rowCount;\n      this._rowspan = tracker.rowspan;\n      this._cols = cols;\n      this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n\n  }, {\n    key: \"getBaseTileSize\",\n    value: function getBaseTileSize(sizePercent, gutterFraction) {\n      // Take the base size percent (as would be if evenly dividing the size between cells),\n      // and then subtracting the size of one gutter. However, since there are no gutters on the\n      // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n      // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n      // edge evenly among the cells).\n      return \"(\".concat(sizePercent, \"% - (\").concat(this._gutterSize, \" * \").concat(gutterFraction, \"))\");\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTilePosition\",\n    value: function getTilePosition(baseSize, offset) {\n      // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n      // row/column (offset).\n      return offset === 0 ? '0' : calc(\"(\".concat(baseSize, \" + \").concat(this._gutterSize, \") * \").concat(offset));\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n\n  }, {\n    key: \"getTileSize\",\n    value: function getTileSize(baseSize, span) {\n      return \"(\".concat(baseSize, \" * \").concat(span, \") + (\").concat(span - 1, \" * \").concat(this._gutterSize, \")\");\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(tile, rowIndex, colIndex) {\n      // Percent of the available horizontal space that one column takes up.\n\n      /** @type {?} */\n      var percentWidthPerTile = 100 / this._cols; // Fraction of the vertical gutter size that each column takes up.\n      // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n\n      /** @type {?} */\n\n      var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n      this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n      this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n\n  }, {\n    key: \"setColStyles\",\n    value: function setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n      // Base horizontal size of a column.\n\n      /** @type {?} */\n      var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth); // The width and horizontal position of each tile is always calculated the same way, but the\n      // height and vertical position depends on the rowMode.\n\n      /** @type {?} */\n\n      var side = this._direction === 'rtl' ? 'right' : 'left';\n\n      tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n\n      tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getGutterSpan\",\n    value: function getGutterSpan() {\n      return \"\".concat(this._gutterSize, \" * (\").concat(this._rowspan, \" - 1)\");\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getTileSpan\",\n    value: function getTileSpan(tileHeight) {\n      return \"\".concat(this._rowspan, \" * \").concat(this.getTileSize(tileHeight, 1));\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return null;\n    }\n  }]);\n\n  return TileStyler;\n}();\n\nif (false) {\n  /** @type {?} */\n  TileStyler.prototype._gutterSize;\n  /** @type {?} */\n\n  TileStyler.prototype._rows;\n  /** @type {?} */\n\n  TileStyler.prototype._rowspan;\n  /** @type {?} */\n\n  TileStyler.prototype._cols;\n  /** @type {?} */\n\n  TileStyler.prototype._direction;\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * \\@docs-private\n   * @abstract\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n  TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {};\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * \\@docs-private\n   * @abstract\n   * @param {?} list Grid list that the styler was attached to.\n   * @return {?}\n   */\n\n\n  TileStyler.prototype.reset = function (list) {};\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\n\n\nvar FixedTileStyler = /*#__PURE__*/function (_TileStyler) {\n  _inherits(FixedTileStyler, _TileStyler);\n\n  var _super = _createSuper(FixedTileStyler);\n\n  /**\n   * @param {?} fixedRowHeight\n   */\n  function FixedTileStyler(fixedRowHeight) {\n    var _this2;\n\n    _classCallCheck(this, FixedTileStyler);\n\n    _this2 = _super.call(this);\n    _this2.fixedRowHeight = fixedRowHeight;\n    return _this2;\n  }\n  /**\n   * @param {?} gutterSize\n   * @param {?} tracker\n   * @param {?} cols\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  _createClass(FixedTileStyler, [{\n    key: \"init\",\n    value: function init(gutterSize, tracker, cols, direction) {\n      _get(_getPrototypeOf(FixedTileStyler.prototype), \"init\", this).call(this, gutterSize, tracker, cols, direction);\n\n      this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n      if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n        throw Error(\"Invalid value \\\"\".concat(this.fixedRowHeight, \"\\\" set as rowHeight.\"));\n      }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex) {\n      tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['height', calc(\"\".concat(this.getTileSpan(this.fixedRowHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['height', null]);\n\n      if (list._tiles) {\n        list._tiles.forEach(\n        /**\n        * @param {?} tile\n        * @return {?}\n        */\n        function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FixedTileStyler;\n}(TileStyler);\n\nif (false) {\n  /** @type {?} */\n  FixedTileStyler.prototype.fixedRowHeight;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\n\n\nvar RatioTileStyler = /*#__PURE__*/function (_TileStyler2) {\n  _inherits(RatioTileStyler, _TileStyler2);\n\n  var _super2 = _createSuper(RatioTileStyler);\n\n  /**\n   * @param {?} value\n   */\n  function RatioTileStyler(value) {\n    var _this3;\n\n    _classCallCheck(this, RatioTileStyler);\n\n    _this3 = _super2.call(this);\n\n    _this3._parseRatio(value);\n\n    return _this3;\n  }\n  /**\n   * @param {?} tile\n   * @param {?} rowIndex\n   * @param {?} percentWidth\n   * @param {?} gutterWidth\n   * @return {?}\n   */\n\n\n  _createClass(RatioTileStyler, [{\n    key: \"setRowStyles\",\n    value: function setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n      /** @type {?} */\n      var percentHeightPerTile = percentWidth / this.rowHeightRatio;\n      this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth); // Use padding-top and margin-top to maintain the given aspect ratio, as\n      // a percentage-based value for these properties is applied versus the *width* of the\n      // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n\n      tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n\n      tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getComputedHeight\",\n    value: function getComputedHeight() {\n      return ['paddingBottom', calc(\"\".concat(this.getTileSpan(this.baseTileHeight), \" + \").concat(this.getGutterSpan()))];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      list._setListStyle(['paddingBottom', null]);\n\n      list._tiles.forEach(\n      /**\n      * @param {?} tile\n      * @return {?}\n      */\n      function (tile) {\n        tile._setStyle('marginTop', null);\n\n        tile._setStyle('paddingTop', null);\n      });\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parseRatio\",\n    value: function _parseRatio(value) {\n      /** @type {?} */\n      var ratioParts = value.split(':');\n\n      if (ratioParts.length !== 2) {\n        throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\".concat(value, \"\\\"\"));\n      }\n\n      this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n  }]);\n\n  return RatioTileStyler;\n}(TileStyler);\n\nif (false) {\n  /**\n   * Ratio width:height given by user to determine row height.\n   * @type {?}\n   */\n  RatioTileStyler.prototype.rowHeightRatio;\n  /** @type {?} */\n\n  RatioTileStyler.prototype.baseTileHeight;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\n\n\nvar FitTileStyler = /*#__PURE__*/function (_TileStyler3) {\n  _inherits(FitTileStyler, _TileStyler3);\n\n  var _super3 = _createSuper(FitTileStyler);\n\n  function FitTileStyler() {\n    _classCallCheck(this, FitTileStyler);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FitTileStyler, [{\n    key: \"setRowStyles\",\n\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    value: function setRowStyles(tile, rowIndex) {\n      // Percent of the available vertical space that one row takes up.\n\n      /** @type {?} */\n      var percentHeightPerTile = 100 / this._rowspan; // Fraction of the horizontal gutter size that each column takes up.\n\n      /** @type {?} */\n\n      var gutterHeightPerTile = (this._rows - 1) / this._rows; // Base vertical size of a column.\n\n      /** @type {?} */\n\n      var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n      tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n\n      tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset(list) {\n      if (list._tiles) {\n        list._tiles.forEach(\n        /**\n        * @param {?} tile\n        * @return {?}\n        */\n        function (tile) {\n          tile._setStyle('top', null);\n\n          tile._setStyle('height', null);\n        });\n      }\n    }\n  }]);\n\n  return FitTileStyler;\n}(TileStyler);\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\n\n\nfunction calc(exp) {\n  return \"calc(\".concat(exp, \")\");\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : \"\".concat(value, \"px\");\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\n/** @type {?} */\n\n\nvar MAT_FIT_MODE = 'fit';\n\nvar MatGridList = /*#__PURE__*/function () {\n  /**\n   * @param {?} _element\n   * @param {?} _dir\n   */\n  function MatGridList(_element, _dir) {\n    _classCallCheck(this, MatGridList);\n\n    this._element = _element;\n    this._dir = _dir;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     */\n\n    this._gutter = '1px';\n  }\n  /**\n   * Amount of columns in the grid list.\n   * @return {?}\n   */\n\n\n  _createClass(MatGridList, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      this._checkCols();\n\n      this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentChecked\",\n    value: function ngAfterContentChecked() {\n      this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkCols\",\n    value: function _checkCols() {\n      if (!this.cols) {\n        throw Error(\"mat-grid-list: must pass in number of columns. \" + \"Example: <mat-grid-list cols=\\\"3\\\">\");\n      }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkRowHeight\",\n    value: function _checkRowHeight() {\n      if (!this._rowHeight) {\n        this._setTileStyler('1:1');\n      }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setTileStyler\",\n    value: function _setTileStyler(rowHeight) {\n      if (this._tileStyler) {\n        this._tileStyler.reset(this);\n      }\n\n      if (rowHeight === MAT_FIT_MODE) {\n        this._tileStyler = new FitTileStyler();\n      } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n        this._tileStyler = new RatioTileStyler(rowHeight);\n      } else {\n        this._tileStyler = new FixedTileStyler(rowHeight);\n      }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_layoutTiles\",\n    value: function _layoutTiles() {\n      var _this4 = this;\n\n      if (!this._tileCoordinator) {\n        this._tileCoordinator = new TileCoordinator();\n      }\n      /** @type {?} */\n\n\n      var tracker = this._tileCoordinator;\n      /** @type {?} */\n\n      var tiles = this._tiles.filter(\n      /**\n      * @param {?} tile\n      * @return {?}\n      */\n      function (tile) {\n        return !tile._gridList || tile._gridList === _this4;\n      });\n      /** @type {?} */\n\n\n      var direction = this._dir ? this._dir.value : 'ltr';\n\n      this._tileCoordinator.update(this.cols, tiles);\n\n      this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n      tiles.forEach(\n      /**\n      * @param {?} tile\n      * @param {?} index\n      * @return {?}\n      */\n      function (tile, index) {\n        /** @type {?} */\n        var pos = tracker.positions[index];\n\n        _this4._tileStyler.setStyle(tile, pos.row, pos.col);\n      });\n\n      this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setListStyle\",\n    value: function _setListStyle(style) {\n      if (style) {\n        /** @type {?} */\n        this._element.nativeElement.style[style[0]] = style[1];\n      }\n    }\n  }, {\n    key: \"cols\",\n    get: function get() {\n      return this._cols;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n\n  }, {\n    key: \"gutterSize\",\n    get: function get() {\n      return this._gutter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._gutter = \"\".concat(value == null ? '' : value);\n    }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rowHeight\",\n    get: function get() {\n      return this._rowHeight;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = \"\".concat(value == null ? '' : value);\n\n      if (newValue !== this._rowHeight) {\n        this._rowHeight = newValue;\n\n        this._setTileStyler(this._rowHeight);\n      }\n    }\n  }]);\n\n  return MatGridList;\n}();\n\nMatGridList.ɵfac = function MatGridList_Factory(t) {\n  return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8));\n};\n\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatGridList,\n  selectors: [[\"mat-grid-list\"]],\n  contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-grid-list\"],\n  hostVars: 1,\n  hostBindings: function MatGridList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    }\n  },\n  inputs: {\n    cols: \"cols\",\n    gutterSize: \"gutterSize\",\n    rowHeight: \"rowHeight\"\n  },\n  exportAs: [\"matGridList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }])],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function MatGridList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\");\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatGridList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatGridList.propDecorators = {\n  _tiles: [{\n    type: ContentChildren,\n    args: [MatGridTile, {\n      descendants: true\n    }]\n  }],\n  cols: [{\n    type: Input\n  }],\n  gutterSize: [{\n    type: Input\n  }],\n  rowHeight: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatGridList.ngAcceptInputType_cols;\n  /**\n   * Number of columns being rendered.\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._cols;\n  /**\n   * Used for determiningthe position of each tile in the grid.\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._tileCoordinator;\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._rowHeight;\n  /**\n   * The amount of space between tiles. This will be something like '5px' or '2em'.\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._gutter;\n  /**\n   * Sets position and size styles for a tile\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._tileStyler;\n  /**\n   * Query list of tiles that are being rendered.\n   * @type {?}\n   */\n\n  MatGridList.prototype._tiles;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatGridList.prototype._dir;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatGridListModule = function MatGridListModule() {\n  _classCallCheck(this, MatGridListModule);\n};\n\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatGridListModule\n});\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatGridListModule_Factory(t) {\n    return new (t || MatGridListModule)();\n  },\n  imports: [[MatLineModule, MatCommonModule], MatLineModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, {\n    declarations: function declarations() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      declarations: [MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };","map":{"version":3,"sources":["../../../../../material/grid-list/grid-list-base.ts","../../../../../material/grid-list/grid-tile.ts","../../../../../material/grid-list/tile-coordinator.ts","../../../../../material/grid-list/tile-styler.ts","../../../../../material/grid-list/grid-list.ts","../../../../../material/grid-list/grid-list-module.ts","../../../../../material/grid-list/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n    // the DOM. This is needed for the grid-tile harness.\n    '[attr.rowspan]': 'rowspan',\n    '[attr.colspan]': 'colspan'\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n\n  static ngAcceptInputType_rowspan: NumberInput;\n  static ngAcceptInputType_colspan: NumberInput;\n}\n\n@Component({\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Interface describing a tile.\n * @docs-private\n */\nexport interface Tile {\n  /** Amount of rows that the tile takes up. */\n  rowspan: number;\n  /** Amount of columns that the tile takes up. */\n  colspan: number;\n}\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n  update(numColumns: number, tiles: Tile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: Tile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: Tile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string {\n  return `calc(${exp})`;\n}\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n    // needed for the grid-list harness.\n    '[attr.cols]': 'cols',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n\n  static ngAcceptInputType_cols: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_GRID_LIST as Éµangular_material_src_material_grid_list_grid_list_a,MatGridListBase as Éµangular_material_src_material_grid_list_grid_list_b} from './grid-list-base';"]},"metadata":{},"sourceType":"module"}