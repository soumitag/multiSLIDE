{"ast":null,"code":"import _slicedToArray from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, END, hasModifierKey, HOME, RIGHT_ARROW, LEFT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, query, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/common';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nvar _c0 = [\"mat-menu-item\", \"\"];\nvar _c1 = [\"*\"];\n\nfunction _MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n    ɵngcc0.ɵɵlistener(\"keydown\", function _MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._handleKeydown($event);\n    })(\"click\", function _MatMenu_ng_template_0_Template_div_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.closed.emit(\"click\");\n    })(\"@transformMenu.start\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4._onAnimationStart($event);\n    })(\"@transformMenu.done\", function _MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5._onAnimationDone($event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nvar matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', group([query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n    opacity: 1\n  }))), animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    transform: 'scale(1)'\n  }))])), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [// TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nvar fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\n\nvar transformMenu = matMenuAnimations.transformMenu;\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\nvar MatMenuContent = /*#__PURE__*/function () {\n  /**\n   * @param {?} _template\n   * @param {?} _componentFactoryResolver\n   * @param {?} _appRef\n   * @param {?} _injector\n   * @param {?} _viewContainerRef\n   * @param {?} _document\n   * @param {?=} _changeDetectorRef\n   */\n  function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    _classCallCheck(this, MatMenuContent);\n\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Emits when the menu content has been attached.\n     */\n\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * \\@docs-private\n   * @param {?=} context\n   * @return {?}\n   */\n\n\n  _createClass(MatMenuContent, [{\n    key: \"attach\",\n    value: function attach() {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._portal) {\n        this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      }\n\n      this.detach();\n\n      if (!this._outlet) {\n        this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n      }\n      /** @type {?} */\n\n\n      var element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n      // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n      // risk it staying attached to a pane that's no longer in the DOM.\n\n      /** @type {?} */\n      element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n      // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n      // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n      // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n      // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n      // @breaking-change 9.0.0 Make change detector ref required\n\n      if (this._changeDetectorRef) {\n        this._changeDetectorRef.markForCheck();\n      }\n\n      this._portal.attach(this._outlet, context);\n\n      this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      if (this._portal.isAttached) {\n        this._portal.detach();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._outlet) {\n        this._outlet.dispose();\n      }\n    }\n  }]);\n\n  return MatMenuContent;\n}();\n\nMatMenuContent.ɵfac = function MatMenuContent_Factory(t) {\n  return new (t || MatMenuContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatMenuContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatMenuContent,\n  selectors: [[\"ng-template\", \"matMenuContent\", \"\"]]\n});\n/** @nocollapse */\n\nMatMenuContent.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }, {\n    type: ComponentFactoryResolver\n  }, {\n    type: ApplicationRef\n  }, {\n    type: Injector\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.ComponentFactoryResolver\n    }, {\n      type: ɵngcc0.ApplicationRef\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatMenuContent.prototype._portal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._outlet;\n  /**\n   * Emits when the menu content has been attached.\n   * @type {?}\n   */\n\n  MatMenuContent.prototype._attached;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._template;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._componentFactoryResolver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._appRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._viewContainerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuContent.prototype._changeDetectorRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuMissingError() {\n  throw Error(\"matMenuTriggerFor: must pass in an mat-menu instance.\\n\\n    Example:\\n      <mat-menu #menu=\\\"matMenu\\\"></mat-menu>\\n      <button [matMenuTriggerFor]=\\\"menu\\\"></button>\");\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(\"xPosition value must be either 'before' or after'.\\n      Example: <mat-menu xPosition=\\\"before\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(\"yPosition value must be either 'above' or below'.\\n      Example: <mat-menu yPosition=\\\"above\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-panel.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * \\@docs-private\n * @record\n * @template T\n */\n\nfunction MatMenuPanel() {}\n\nif (false) {\n  /** @type {?} */\n  MatMenuPanel.prototype.xPosition;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.yPosition;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.overlapTrigger;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.templateRef;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.close;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.parentMenu;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.direction;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.focusFirstItem;\n  /** @type {?} */\n\n  MatMenuPanel.prototype.resetActiveItem;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.setPositionClasses;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.lazyContent;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.backdropClass;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.hasBackdrop;\n  /** @type {?|undefined} */\n\n  MatMenuPanel.prototype.panelId;\n  /**\n   * @deprecated To be removed.\n   * \\@breaking-change 8.0.0\n   * @type {?|undefined}\n   */\n\n  MatMenuPanel.prototype.addItem;\n  /**\n   * @deprecated To be removed.\n   * \\@breaking-change 8.0.0\n   * @type {?|undefined}\n   */\n\n  MatMenuPanel.prototype.removeItem;\n  /**\n   * @param {?} depth\n   * @return {?}\n   */\n\n  MatMenuPanel.prototype.setElevation = function (depth) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatMenuItemBase = function MatMenuItemBase() {\n  _classCallCheck(this, MatMenuItemBase);\n};\n/** @type {?} */\n\n\nvar _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nvar MatMenuItem = /*#__PURE__*/function (_MatMenuItemMixinBase2) {\n  _inherits(MatMenuItem, _MatMenuItemMixinBase2);\n\n  var _super = _createSuper(MatMenuItem);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?=} document\n   * @param {?=} _focusMonitor\n   * @param {?=} _parentMenu\n   */\n  function MatMenuItem(_elementRef, document, _focusMonitor, _parentMenu) {\n    var _this;\n\n    _classCallCheck(this, MatMenuItem);\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    _this = _super.call(this);\n    _this._elementRef = _elementRef;\n    _this._focusMonitor = _focusMonitor;\n    _this._parentMenu = _parentMenu;\n    /**\n     * ARIA role for the menu item.\n     */\n\n    _this.role = 'menuitem';\n    /**\n     * Stream that emits when the menu item is hovered.\n     */\n\n    _this._hovered = new Subject();\n    /**\n     * Stream that emits when the menu item is focused.\n     */\n\n    _this._focused = new Subject();\n    /**\n     * Whether the menu item is highlighted.\n     */\n\n    _this._highlighted = false;\n    /**\n     * Whether the menu item acts as a trigger for a sub-menu.\n     */\n\n    _this._triggersSubmenu = false;\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(_this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(_assertThisInitialized(_this));\n    }\n\n    _this._document = document;\n    return _this;\n  }\n  /**\n   * Focuses the menu item.\n   * @param {?=} origin\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  _createClass(MatMenuItem, [{\n    key: \"focus\",\n    value: function focus() {\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (this._focusMonitor) {\n        this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n      } else {\n        this._getHostElement().focus(options);\n      }\n\n      this._focused.next(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._focusMonitor) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n\n      if (this._parentMenu && this._parentMenu.removeItem) {\n        this._parentMenu.removeItem(this);\n      }\n\n      this._hovered.complete();\n\n      this._focused.complete();\n    }\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTabIndex\",\n    value: function _getTabIndex() {\n      return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostElement\",\n    value: function _getHostElement() {\n      return this._elementRef.nativeElement;\n    }\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_checkDisabled\",\n    value: function _checkDisabled(event) {\n      if (this.disabled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_handleMouseEnter\",\n    value: function _handleMouseEnter() {\n      this._hovered.next(this);\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      /** @type {?} */\n      var element = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var textNodeType = this._document ? this._document.TEXT_NODE : 3;\n      /** @type {?} */\n\n      var output = '';\n\n      if (element.childNodes) {\n        /** @type {?} */\n        var length = element.childNodes.length; // Go through all the top-level text nodes and extract their text.\n        // We skip anything that's not a text node to prevent the text from\n        // being thrown off by something like an icon.\n\n        for (var i = 0; i < length; i++) {\n          if (element.childNodes[i].nodeType === textNodeType) {\n            output += element.childNodes[i].textContent;\n          }\n        }\n      }\n\n      return output.trim();\n    }\n  }]);\n\n  return MatMenuItem;\n}(_MatMenuItemMixinBase);\n\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n  return new (t || MatMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8));\n};\n\nMatMenuItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatMenuItem,\n  selectors: [[\"\", \"mat-menu-item\", \"\"]],\n  hostAttrs: [1, \"mat-focus-indicator\"],\n  hostVars: 10,\n  hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n        return ctx._checkDisabled($event);\n      })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n        return ctx._handleMouseEnter();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    role: \"role\"\n  },\n  exportAs: [\"matMenuItem\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 2,\n  vars: 2,\n  consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"]],\n  template: function MatMenuItem_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelement(1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n    }\n  },\n  directives: [ɵngcc2.MatRipple],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMenuItem.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: FocusMonitor\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_MENU_PANEL]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatMenuItem.propDecorators = {\n  role: [{\n    type: Input\n  }],\n  _checkDisabled: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  _handleMouseEnter: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      inputs: ['disabled', 'disableRipple'],\n      host: {\n        '[attr.role]': 'role',\n        '[class.mat-menu-item]': 'true',\n        '[class.mat-menu-item-highlighted]': '_highlighted',\n        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        'class': 'mat-focus-indicator'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }],\n    _checkDisabled: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    _handleMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatMenuItem.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatMenuItem.ngAcceptInputType_disableRipple;\n  /**\n   * ARIA role for the menu item.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype.role;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuItem.prototype._document;\n  /**\n   * Stream that emits when the menu item is hovered.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._hovered;\n  /**\n   * Stream that emits when the menu item is focused.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._focused;\n  /**\n   * Whether the menu item is highlighted.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._highlighted;\n  /**\n   * Whether the menu item acts as a trigger for a sub-menu.\n   * @type {?}\n   */\n\n  MatMenuItem.prototype._triggersSubmenu;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuItem.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuItem.prototype._focusMonitor;\n  /** @type {?} */\n\n  MatMenuItem.prototype._parentMenu;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default `mat-menu` options that can be overridden.\n * @record\n */\n\n\nfunction MatMenuDefaultOptions() {}\n\nif (false) {\n  /**\n   * The x-axis position of the menu.\n   * @type {?}\n   */\n  MatMenuDefaultOptions.prototype.xPosition;\n  /**\n   * The y-axis position of the menu.\n   * @type {?}\n   */\n\n  MatMenuDefaultOptions.prototype.yPosition;\n  /**\n   * Whether the menu should overlap the menu trigger.\n   * @type {?}\n   */\n\n  MatMenuDefaultOptions.prototype.overlapTrigger;\n  /**\n   * Class to be applied to the menu's backdrop.\n   * @type {?}\n   */\n\n  MatMenuDefaultOptions.prototype.backdropClass;\n  /**\n   * Whether the menu has a backdrop.\n   * @type {?|undefined}\n   */\n\n  MatMenuDefaultOptions.prototype.hasBackdrop;\n}\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\n\n\nvar MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_MENU_BASE_ELEVATION = 4;\n/** @type {?} */\n\nvar menuPanelUid = 0;\n/**\n * Base class with all of the `MatMenu` functionality.\n */\n// tslint:disable-next-line:class-name\n\nvar _MatMenuBase = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} _defaultOptions\n   */\n  function _MatMenuBase(_elementRef, _ngZone, _defaultOptions) {\n    _classCallCheck(this, _MatMenuBase);\n\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /**\n     * Only the direct descendant menu items.\n     */\n\n    this._directDescendantItems = new QueryList();\n    /**\n     * Subscription to tab events on the menu panel\n     */\n\n    this._tabSubscription = Subscription.EMPTY;\n    /**\n     * Config object to be passed into the menu's ngClass\n     */\n\n    this._classList = {};\n    /**\n     * Current state of the panel animation.\n     */\n\n    this._panelAnimationState = 'void';\n    /**\n     * Emits whenever an animation on the menu completes.\n     */\n\n    this._animationDone = new Subject();\n    /**\n     * Class to be added to the backdrop element.\n     */\n\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /**\n     * Event emitted when the menu is closed.\n     */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * \\@breaking-change 8.0.0\n     */\n\n    this.close = this.closed;\n    this.panelId = \"mat-menu-panel-\".concat(menuPanelUid++);\n  }\n  /**\n   * Position of the menu in the X axis.\n   * @return {?}\n   */\n\n\n  _createClass(_MatMenuBase, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      this.setPositionClasses();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._updateDirectDescendants();\n\n      this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n      this._tabSubscription = this._keyManager.tabOut.subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this2.closed.emit('tab');\n      }); // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n      // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n      // is internal and we know that it gets completed on destroy.\n\n      this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(\n      /**\n      * @param {?} items\n      * @return {?}\n      */\n      function (items) {\n        return merge.apply(void 0, _toConsumableArray(items.map(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        function (item) {\n          return item._focused;\n        })));\n      })).subscribe(\n      /**\n      * @param {?} focusedItem\n      * @return {?}\n      */\n      function (focusedItem) {\n        return _this2._keyManager.updateActiveItem(focusedItem);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._directDescendantItems.destroy();\n\n      this._tabSubscription.unsubscribe();\n\n      this.closed.complete();\n    }\n    /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hovered\",\n    value: function _hovered() {\n      // Coerce the `changes` property because Angular types it as `Observable<any>`\n\n      /** @type {?} */\n      var itemChanges =\n      /** @type {?} */\n      this._directDescendantItems.changes;\n      return (\n        /** @type {?} */\n        itemChanges.pipe(startWith(this._directDescendantItems), switchMap(\n        /**\n        * @param {?} items\n        * @return {?}\n        */\n        function (items) {\n          return merge.apply(void 0, _toConsumableArray(items.map(\n          /**\n          * @param {?} item\n          * @return {?}\n          */\n          function (item) {\n            return item._hovered;\n          })));\n        }))\n      );\n    }\n    /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n\n    /**\n     * @param {?} _item\n     * @return {?}\n     */\n\n  }, {\n    key: \"addItem\",\n    value: function addItem(_item) {}\n    /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 9.0.0\n     * @param {?} _item\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(_item) {}\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n\n      switch (keyCode) {\n        case ESCAPE:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case LEFT_ARROW:\n          if (this.parentMenu && this.direction === 'ltr') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case RIGHT_ARROW:\n          if (this.parentMenu && this.direction === 'rtl') {\n            this.closed.emit('keydown');\n          }\n\n          break;\n\n        case HOME:\n        case END:\n          if (!hasModifierKey(event)) {\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            event.preventDefault();\n          }\n\n          break;\n\n        default:\n          if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n            manager.setFocusOrigin('keyboard');\n          }\n\n          manager.onKeydown(event);\n      }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focusFirstItem\",\n    value: function focusFirstItem() {\n      var _this3 = this;\n\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n\n      // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n      if (this.lazyContent) {\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this3._focusFirstItem(origin);\n        });\n      } else {\n        this._focusFirstItem(origin);\n      }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     * @private\n     * @param {?} origin\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusFirstItem\",\n    value: function _focusFirstItem(origin) {\n      /** @type {?} */\n      var manager = this._keyManager;\n      manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n      // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n      // give _some_ feedback to screen readers.\n\n      if (!manager.activeItem && this._directDescendantItems.length) {\n        /** @type {?} */\n        var element = this._directDescendantItems.first._getHostElement().parentElement; // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n        // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n        // because the panel is inside an `ng-template`. We work around it by starting from one of\n        // the items and walking up the DOM.\n\n\n        while (element) {\n          if (element.getAttribute('role') === 'menu') {\n            element.focus();\n            break;\n          } else {\n            element = element.parentElement;\n          }\n        }\n      }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n\n  }, {\n    key: \"resetActiveItem\",\n    value: function resetActiveItem() {\n      this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setElevation\",\n    value: function setElevation(depth) {\n      // The elevation starts at the base and increases by one for each level.\n      // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n\n      /** @type {?} */\n      var elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n      /** @type {?} */\n\n      var newElevation = \"mat-elevation-z\".concat(elevation);\n      /** @type {?} */\n\n      var customElevation = Object.keys(this._classList).find(\n      /**\n      * @param {?} c\n      * @return {?}\n      */\n      function (c) {\n        return c.startsWith('mat-elevation-z');\n      });\n\n      if (!customElevation || customElevation === this._previousElevation) {\n        if (this._previousElevation) {\n          this._classList[this._previousElevation] = false;\n        }\n\n        this._classList[newElevation] = true;\n        this._previousElevation = newElevation;\n      }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setPositionClasses\",\n    value: function setPositionClasses() {\n      var posX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.xPosition;\n      var posY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.yPosition;\n\n      /** @type {?} */\n      var classes = this._classList;\n      classes['mat-menu-before'] = posX === 'before';\n      classes['mat-menu-after'] = posX === 'after';\n      classes['mat-menu-above'] = posY === 'above';\n      classes['mat-menu-below'] = posY === 'below';\n    }\n    /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_startAnimation\",\n    value: function _startAnimation() {\n      // @breaking-change 8.0.0 Combine with _resetAnimation.\n      this._panelAnimationState = 'enter';\n    }\n    /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetAnimation\",\n    value: function _resetAnimation() {\n      // @breaking-change 8.0.0 Combine with _startAnimation.\n      this._panelAnimationState = 'void';\n    }\n    /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAnimationDone\",\n    value: function _onAnimationDone(event) {\n      this._animationDone.next(event);\n\n      this._isAnimating = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onAnimationStart\",\n    value: function _onAnimationStart(event) {\n      this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n      // because we move focus to the first item while it's still being animated, which can throw\n      // the browser off when it determines the scroll position. Alternatively we can move focus\n      // when the animation is done, however moving focus asynchronously will interrupt screen\n      // readers which are in the process of reading out the menu already. We take the `element`\n      // from the `event` since we can't use a `ViewChild` to access the pane.\n\n      if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n        event.element.scrollTop = 0;\n      }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateDirectDescendants\",\n    value: function _updateDirectDescendants() {\n      var _this4 = this;\n\n      this._allItems.changes.pipe(startWith(this._allItems)).subscribe(\n      /**\n      * @param {?} items\n      * @return {?}\n      */\n      function (items) {\n        _this4._directDescendantItems.reset(items.filter(\n        /**\n        * @param {?} item\n        * @return {?}\n        */\n        function (item) {\n          return item._parentMenu === _this4;\n        }));\n\n        _this4._directDescendantItems.notifyOnChanges();\n      });\n    }\n  }, {\n    key: \"xPosition\",\n    get: function get() {\n      return this._xPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== 'before' && value !== 'after') {\n        throwMatMenuInvalidPositionX();\n      }\n\n      this._xPosition = value;\n      this.setPositionClasses();\n    }\n    /**\n     * Position of the menu in the Y axis.\n     * @return {?}\n     */\n\n  }, {\n    key: \"yPosition\",\n    get: function get() {\n      return this._yPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value !== 'above' && value !== 'below') {\n        throwMatMenuInvalidPositionY();\n      }\n\n      this._yPosition = value;\n      this.setPositionClasses();\n    }\n    /**\n     * Whether the menu should overlap its trigger.\n     * @return {?}\n     */\n\n  }, {\n    key: \"overlapTrigger\",\n    get: function get() {\n      return this._overlapTrigger;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the menu has a backdrop.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasBackdrop\",\n    get: function get() {\n      return this._hasBackdrop;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param {?} classes list of class names\n     * @return {?}\n     */\n\n  }, {\n    key: \"panelClass\",\n    set: function set(classes) {\n      var _this5 = this;\n\n      /** @type {?} */\n      var previousPanelClass = this._previousPanelClass;\n\n      if (previousPanelClass && previousPanelClass.length) {\n        previousPanelClass.split(' ').forEach(\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        function (className) {\n          _this5._classList[className] = false;\n        });\n      }\n\n      this._previousPanelClass = classes;\n\n      if (classes && classes.length) {\n        classes.split(' ').forEach(\n        /**\n        * @param {?} className\n        * @return {?}\n        */\n        function (className) {\n          _this5._classList[className] = true;\n        });\n        this._elementRef.nativeElement.className = '';\n      }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"classList\",\n    get: function get() {\n      return this.panelClass;\n    }\n    /**\n     * @param {?} classes\n     * @return {?}\n     */\n    ,\n    set: function set(classes) {\n      this.panelClass = classes;\n    }\n  }]);\n\n  return _MatMenuBase;\n}();\n\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n  return new (t || _MatMenuBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n};\n\n_MatMenuBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatMenuBase,\n  contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuContent, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatMenuItem, false);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._allItems = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  viewQuery: function _MatMenuBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(TemplateRef, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  inputs: {\n    backdropClass: \"backdropClass\",\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    overlapTrigger: \"overlapTrigger\",\n    hasBackdrop: \"hasBackdrop\",\n    panelClass: [\"class\", \"panelClass\"],\n    classList: \"classList\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n  },\n  outputs: {\n    closed: \"closed\",\n    close: \"close\"\n  }\n});\n/** @nocollapse */\n\n_MatMenuBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_MENU_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n_MatMenuBase.propDecorators = {\n  _allItems: [{\n    type: ContentChildren,\n    args: [MatMenuItem, {\n      descendants: true\n    }]\n  }],\n  backdropClass: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  xPosition: [{\n    type: Input\n  }],\n  yPosition: [{\n    type: Input\n  }],\n  templateRef: [{\n    type: ViewChild,\n    args: [TemplateRef]\n  }],\n  items: [{\n    type: ContentChildren,\n    args: [MatMenuItem, {\n      descendants: false\n    }]\n  }],\n  lazyContent: [{\n    type: ContentChild,\n    args: [MatMenuContent]\n  }],\n  overlapTrigger: [{\n    type: Input\n  }],\n  hasBackdrop: [{\n    type: Input\n  }],\n  panelClass: [{\n    type: Input,\n    args: ['class']\n  }],\n  classList: [{\n    type: Input\n  }],\n  closed: [{\n    type: Output\n  }],\n  close: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatMenuBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    backdropClass: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    overlapTrigger: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    _allItems: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: true\n      }]\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: false\n      }]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MatMenuContent]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  _MatMenuBase.ngAcceptInputType_overlapTrigger;\n  /** @type {?} */\n\n  _MatMenuBase.ngAcceptInputType_hasBackdrop;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._keyManager;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._xPosition;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._yPosition;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._previousElevation;\n  /**\n   * All items inside the menu. Includes items nested inside another menu.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._allItems;\n  /**\n   * Only the direct descendant menu items.\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._directDescendantItems;\n  /**\n   * Subscription to tab events on the menu panel\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._tabSubscription;\n  /**\n   * Config object to be passed into the menu's ngClass\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._classList;\n  /**\n   * Current state of the panel animation.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._panelAnimationState;\n  /**\n   * Emits whenever an animation on the menu completes.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._animationDone;\n  /**\n   * Whether the menu is animating.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype._isAnimating;\n  /**\n   * Parent menu of the current menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.parentMenu;\n  /**\n   * Layout direction of the menu.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.direction;\n  /**\n   * Class to be added to the backdrop element.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.backdropClass;\n  /**\n   * aria-label for the menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.ariaLabel;\n  /**\n   * aria-labelledby for the menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.ariaLabelledby;\n  /**\n   * aria-describedby for the menu panel.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.ariaDescribedby;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.templateRef;\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.items;\n  /**\n   * Menu content that will be rendered lazily.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.lazyContent;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._overlapTrigger;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._hasBackdrop;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._previousPanelClass;\n  /**\n   * Event emitted when the menu is closed.\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.closed;\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  _MatMenuBase.prototype.close;\n  /** @type {?} */\n\n  _MatMenuBase.prototype.panelId;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatMenuBase.prototype._defaultOptions;\n}\n/**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\n\n\nvar MatMenu = /*#__PURE__*/function (_MatMenuBase2) {\n  _inherits(MatMenu, _MatMenuBase2);\n\n  var _super2 = _createSuper(MatMenu);\n\n  function MatMenu() {\n    _classCallCheck(this, MatMenu);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatMenu;\n}(_MatMenuBase);\n\nMatMenu.ɵfac = function MatMenu_Factory(t) {\n  return ɵMatMenu_BaseFactory(t || MatMenu);\n};\n\nMatMenu.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatMenu,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatMenu_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatMenu);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMenu, [{\n    type: Directive\n  }], null, null);\n})(); // Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/**\n * \\@docs-public MatMenu\n */\n// tslint:disable-next-line:class-name\n\n\nvar _MatMenu = /*#__PURE__*/function (_MatMenu2) {\n  _inherits(_MatMenu, _MatMenu2);\n\n  var _super3 = _createSuper(_MatMenu);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} ngZone\n   * @param {?} defaultOptions\n   */\n  function _MatMenu(elementRef, ngZone, defaultOptions) {\n    _classCallCheck(this, _MatMenu);\n\n    return _super3.call(this, elementRef, ngZone, defaultOptions);\n  }\n\n  return _MatMenu;\n}(MatMenu);\n\n_MatMenu.ɵfac = function _MatMenu_Factory(t) {\n  return new (t || _MatMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n};\n\n_MatMenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: _MatMenu,\n  selectors: [[\"mat-menu\"]],\n  exportAs: [\"matMenu\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_PANEL,\n    useExisting: MatMenu\n  }, {\n    provide: MatMenu,\n    useExisting: _MatMenu\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n  template: function _MatMenu_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, _MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    }\n  },\n  directives: [ɵngcc3.NgClass],\n  styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\n_MatMenu.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_MENU_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }, {\n        provide: MatMenu,\n        useExisting: _MatMenu\n      }],\n      styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\n\n\nvar MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      return overlay.scrollStrategies.reposition();\n    }\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\n\nvar MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\n\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * Directive applied to an element that should trigger a `mat-menu`.\n */\n\nvar MatMenuTrigger = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _element\n   * @param {?} _viewContainerRef\n   * @param {?} scrollStrategy\n   * @param {?} _parentMenu\n   * @param {?} _menuItemInstance\n   * @param {?} _dir\n   * @param {?=} _focusMonitor\n   */\n  function MatMenuTrigger(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n    var _this6 = this;\n\n    _classCallCheck(this, MatMenuTrigger);\n\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._parentMenu = _parentMenu;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n\n    this._handleTouchStart =\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this6._openedBy = 'touch';\n    }; // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n\n\n    this._openedBy = null;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n\n    this.restoreFocus = true;\n    /**\n     * Event emitted when the associated menu is opened.\n     */\n\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * \\@breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuOpen = this.menuOpened;\n    /**\n     * Event emitted when the associated menu is closed.\n     */\n\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * \\@breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuClose = this.menuClosed;\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * @deprecated\n   * \\@breaking-change 8.0.0\n   * @return {?}\n   */\n\n\n  _createClass(MatMenuTrigger, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._checkMenu();\n\n      this._handleHover();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._overlayRef = null;\n      }\n\n      this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n      this._menuCloseSubscription.unsubscribe();\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._hoverSubscription.unsubscribe();\n    }\n    /**\n     * Whether the menu is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"triggersSubmenu\",\n\n    /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n    value: function triggersSubmenu() {\n      return !!(this._menuItemInstance && this._parentMenu);\n    }\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleMenu\",\n    value: function toggleMenu() {\n      return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openMenu\",\n    value: function openMenu() {\n      var _this7 = this;\n\n      if (this._menuOpen) {\n        return;\n      }\n\n      this._checkMenu();\n      /** @type {?} */\n\n\n      var overlayRef = this._createOverlay();\n      /** @type {?} */\n\n\n      var overlayConfig = overlayRef.getConfig();\n\n      this._setPosition(\n      /** @type {?} */\n      overlayConfig.positionStrategy);\n\n      overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n      overlayRef.attach(this._getPortal());\n\n      if (this.menu.lazyContent) {\n        this.menu.lazyContent.attach(this.menuData);\n      }\n\n      this._closingActionsSubscription = this._menuClosingActions().subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this7.closeMenu();\n      });\n\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeMenu\",\n    value: function closeMenu() {\n      this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (this._focusMonitor) {\n        this._focusMonitor.focusVia(this._element, origin, options);\n      } else {\n        this._element.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyMenu\",\n    value: function _destroyMenu() {\n      var _this8 = this;\n\n      if (!this._overlayRef || !this.menuOpen) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var menu = this.menu;\n\n      this._closingActionsSubscription.unsubscribe();\n\n      this._overlayRef.detach();\n\n      this._restoreFocus();\n\n      if (menu instanceof MatMenu) {\n        menu._resetAnimation();\n\n        if (menu.lazyContent) {\n          // Wait for the exit animation to finish before detaching the content.\n          menu._animationDone.pipe(filter(\n          /**\n          * @param {?} event\n          * @return {?}\n          */\n          function (event) {\n            return event.toState === 'void';\n          }), take(1), // Interrupt if the content got re-attached.\n          takeUntil(menu.lazyContent._attached)).subscribe({\n            next:\n            /**\n            * @return {?}\n            */\n            function next() {\n              return (\n                /** @type {?} */\n                menu.lazyContent.detach()\n              );\n            },\n            // No matter whether the content got re-attached, reset the menu.\n            complete:\n            /**\n            * @return {?}\n            */\n            function complete() {\n              return _this8._setIsMenuOpen(false);\n            }\n          });\n        } else {\n          this._setIsMenuOpen(false);\n        }\n      } else {\n        this._setIsMenuOpen(false);\n\n        if (menu.lazyContent) {\n          menu.lazyContent.detach();\n        }\n      }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initMenu\",\n    value: function _initMenu() {\n      this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n      this.menu.direction = this.dir;\n\n      this._setMenuElevation();\n\n      this._setIsMenuOpen(true);\n\n      this.menu.focusFirstItem(this._openedBy || 'program');\n    }\n    /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setMenuElevation\",\n    value: function _setMenuElevation() {\n      if (this.menu.setElevation) {\n        /** @type {?} */\n        var depth = 0;\n        /** @type {?} */\n\n        var parentMenu = this.menu.parentMenu;\n\n        while (parentMenu) {\n          depth++;\n          parentMenu = parentMenu.parentMenu;\n        }\n\n        this.menu.setElevation(depth);\n      }\n    }\n    /**\n     * Restores focus to the element that was focused before the menu was open.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_restoreFocus\",\n    value: function _restoreFocus() {\n      // We should reset focus if the user is navigating using a keyboard or\n      // if we have a top-level trigger which might cause focus to be lost\n      // when clicking on the backdrop.\n      if (this.restoreFocus) {\n        if (!this._openedBy) {\n          // Note that the focus style will show up both for `program` and\n          // `keyboard` so we don't have to specify which one it is.\n          this.focus();\n        } else if (!this.triggersSubmenu()) {\n          this.focus(this._openedBy);\n        }\n      }\n\n      this._openedBy = null;\n    } // set state rather than toggle to support triggers sharing a menu\n\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setIsMenuOpen\",\n    value: function _setIsMenuOpen(isOpen) {\n      this._menuOpen = isOpen;\n      this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n      if (this.triggersSubmenu()) {\n        this._menuItemInstance._highlighted = isOpen;\n      }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_checkMenu\",\n    value: function _checkMenu() {\n      if (!this.menu) {\n        throwMatMenuMissingError();\n      }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      if (!this._overlayRef) {\n        /** @type {?} */\n        var config = this._getOverlayConfig();\n\n        this._subscribeToPositions(\n        /** @type {?} */\n        config.positionStrategy);\n\n        this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n        // Ideally we'd also have our keyboard event logic in here, however doing so will\n        // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n        this._overlayRef.keydownEvents().subscribe();\n      }\n\n      return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n\n  }, {\n    key: \"_getOverlayConfig\",\n    value: function _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n        backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n        scrollStrategy: this._scrollStrategy(),\n        direction: this._dir\n      });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribeToPositions\",\n    value: function _subscribeToPositions(position) {\n      var _this9 = this;\n\n      if (this.menu.setPositionClasses) {\n        position.positionChanges.subscribe(\n        /**\n        * @param {?} change\n        * @return {?}\n        */\n        function (change) {\n          /** @type {?} */\n          var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n          /** @type {?} */\n\n          var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n          /** @type {?} */\n          _this9.menu.setPositionClasses(posX, posY);\n        });\n      }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setPosition\",\n    value: function _setPosition(positionStrategy) {\n      var _ref = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'],\n          _ref2 = _slicedToArray(_ref, 2),\n          originX = _ref2[0],\n          originFallbackX = _ref2[1];\n\n      var _ref3 = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'],\n          _ref4 = _slicedToArray(_ref3, 2),\n          overlayY = _ref4[0],\n          overlayFallbackY = _ref4[1];\n\n      var originY = overlayY,\n          originFallbackY = overlayFallbackY;\n      var overlayX = originX,\n          overlayFallbackX = originFallbackX;\n      /** @type {?} */\n\n      var offsetY = 0;\n\n      if (this.triggersSubmenu()) {\n        // When the menu is a sub-menu, it should always align itself\n        // to the edges of the trigger, instead of overlapping it.\n        overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n        originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n        offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n      } else if (!this.menu.overlapTrigger) {\n        originY = overlayY === 'top' ? 'bottom' : 'top';\n        originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n      }\n\n      positionStrategy.withPositions([{\n        originX: originX,\n        originY: originY,\n        overlayX: overlayX,\n        overlayY: overlayY,\n        offsetY: offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayY,\n        offsetY: offsetY\n      }, {\n        originX: originX,\n        originY: originFallbackY,\n        overlayX: overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }, {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }]);\n    }\n    /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_menuClosingActions\",\n    value: function _menuClosingActions() {\n      var _this10 = this;\n\n      /** @type {?} */\n      var backdrop =\n      /** @type {?} */\n      this._overlayRef.backdropClick();\n      /** @type {?} */\n\n\n      var detachments =\n      /** @type {?} */\n      this._overlayRef.detachments();\n      /** @type {?} */\n\n\n      var parentClose = this._parentMenu ? this._parentMenu.closed : of();\n      /** @type {?} */\n\n      var hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter(\n      /**\n      * @param {?} active\n      * @return {?}\n      */\n      function (active) {\n        return active !== _this10._menuItemInstance;\n      }), filter(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this10._menuOpen;\n      })) : of();\n      return merge(backdrop, parentClose, hover, detachments);\n    }\n    /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleMousedown\",\n    value: function _handleMousedown(event) {\n      if (!isFakeMousedownFromScreenReader(event)) {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the menu as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the menu item.\n\n        if (this.triggersSubmenu()) {\n          event.preventDefault();\n        }\n      }\n    }\n    /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n\n      if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n        this.openMenu();\n      }\n    }\n    /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this.triggersSubmenu()) {\n        // Stop event propagation to avoid closing the parent menu.\n        event.stopPropagation();\n        this.openMenu();\n      } else {\n        this.toggleMenu();\n      }\n    }\n    /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleHover\",\n    value: function _handleHover() {\n      var _this11 = this;\n\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      if (!this.triggersSubmenu()) {\n        return;\n      }\n\n      this._hoverSubscription = this._parentMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(filter(\n      /**\n      * @param {?} active\n      * @return {?}\n      */\n      function (active) {\n        return active === _this11._menuItemInstance && !active.disabled;\n      }), delay(0, asapScheduler)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this11._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n\n        if (_this11.menu instanceof MatMenu && _this11.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          _this11.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(_this11._parentMenu._hovered())).subscribe(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this11.openMenu();\n          });\n        } else {\n          _this11.openMenu();\n        }\n      });\n    }\n    /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPortal\",\n    value: function _getPortal() {\n      // Note that we can avoid this check by keeping the portal on the menu panel.\n      // While it would be cleaner, we'd have to introduce another required method on\n      // `MatMenuPanel`, making it harder to consume.\n      if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n        this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      }\n\n      return this._portal;\n    }\n  }, {\n    key: \"_deprecatedMatMenuTriggerFor\",\n    get: function get() {\n      return this.menu;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this.menu = v;\n    }\n    /**\n     * References the menu instance that the trigger is associated with.\n     * @return {?}\n     */\n\n  }, {\n    key: \"menu\",\n    get: function get() {\n      return this._menu;\n    }\n    /**\n     * @param {?} menu\n     * @return {?}\n     */\n    ,\n    set: function set(menu) {\n      var _this12 = this;\n\n      if (menu === this._menu) {\n        return;\n      }\n\n      this._menu = menu;\n\n      this._menuCloseSubscription.unsubscribe();\n\n      if (menu) {\n        this._menuCloseSubscription = menu.close.asObservable().subscribe(\n        /**\n        * @param {?} reason\n        * @return {?}\n        */\n        function (reason) {\n          _this12._destroyMenu(); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n          if ((reason === 'click' || reason === 'tab') && _this12._parentMenu) {\n            _this12._parentMenu.closed.emit(reason);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"menuOpen\",\n    get: function get() {\n      return this._menuOpen;\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dir\",\n    get: function get() {\n      return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n  }]);\n\n  return MatMenuTrigger;\n}();\n\nMatMenuTrigger.ɵfac = function MatMenuTrigger_Factory(t) {\n  return new (t || MatMenuTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(MatMenu, 8), ɵngcc0.ɵɵdirectiveInject(MatMenuItem, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor));\n};\n\nMatMenuTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatMenuTrigger,\n  selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n  hostAttrs: [\"aria-haspopup\", \"true\", 1, \"mat-menu-trigger\"],\n  hostVars: 2,\n  hostBindings: function MatMenuTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mousedown\", function MatMenuTrigger_mousedown_HostBindingHandler($event) {\n        return ctx._handleMousedown($event);\n      })(\"keydown\", function MatMenuTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"click\", function MatMenuTrigger_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.menuOpen || null)(\"aria-controls\", ctx.menuOpen ? ctx.menu.panelId : null);\n    }\n  },\n  inputs: {\n    restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"],\n    _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n    menu: [\"matMenuTriggerFor\", \"menu\"],\n    menuData: [\"matMenuTriggerData\", \"menuData\"]\n  },\n  outputs: {\n    menuOpened: \"menuOpened\",\n    onMenuOpen: \"onMenuOpen\",\n    menuClosed: \"menuClosed\",\n    onMenuClose: \"onMenuClose\"\n  },\n  exportAs: [\"matMenuTrigger\"]\n});\n/** @nocollapse */\n\nMatMenuTrigger.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: ElementRef\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_MENU_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: MatMenu,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatMenuItem,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nMatMenuTrigger.propDecorators = {\n  _deprecatedMatMenuTriggerFor: [{\n    type: Input,\n    args: ['mat-menu-trigger-for']\n  }],\n  menu: [{\n    type: Input,\n    args: ['matMenuTriggerFor']\n  }],\n  menuData: [{\n    type: Input,\n    args: ['matMenuTriggerData']\n  }],\n  restoreFocus: [{\n    type: Input,\n    args: ['matMenuTriggerRestoreFocus']\n  }],\n  menuOpened: [{\n    type: Output\n  }],\n  onMenuOpen: [{\n    type: Output\n  }],\n  menuClosed: [{\n    type: Output\n  }],\n  onMenuClose: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\",\n      host: {\n        'class': 'mat-menu-trigger',\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'menuOpen || null',\n        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatMenu,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatMenuItem,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }];\n  }, {\n    restoreFocus: [{\n      type: Input,\n      args: ['matMenuTriggerRestoreFocus']\n    }],\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }],\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatMenuTrigger.prototype._portal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._overlayRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menuOpen;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._closingActionsSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._hoverSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menuCloseSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._scrollStrategy;\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._handleTouchStart;\n  /** @type {?} */\n\n  MatMenuTrigger.prototype._openedBy;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menu;\n  /**\n   * Data to be passed along to any lazily-rendered content.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.menuData;\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.restoreFocus;\n  /**\n   * Event emitted when the associated menu is opened.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.menuOpened;\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.onMenuOpen;\n  /**\n   * Event emitted when the associated menu is closed.\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.menuClosed;\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * \\@breaking-change 8.0.0\n   * @type {?}\n   */\n\n  MatMenuTrigger.prototype.onMenuClose;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._overlay;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._viewContainerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._parentMenu;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._menuItemInstance;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._dir;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMenuTrigger.prototype._focusMonitor;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n// tslint:disable-next-line:class-name\n\n\nvar _MatMenuDirectivesModule = function _MatMenuDirectivesModule() {\n  _classCallCheck(this, _MatMenuDirectivesModule);\n};\n\n_MatMenuDirectivesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: _MatMenuDirectivesModule\n});\n_MatMenuDirectivesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function _MatMenuDirectivesModule_Factory(t) {\n    return new (t || _MatMenuDirectivesModule)();\n  },\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatMenuDirectivesModule, {\n    declarations: function declarations() {\n      return [MatMenuTrigger, MatMenuContent];\n    },\n    exports: function exports() {\n      return [MatMenuTrigger, MatMenuContent, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatMenuDirectivesModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n      declarations: [MatMenuTrigger, MatMenuContent],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\nvar MatMenuModule = function MatMenuModule() {\n  _classCallCheck(this, MatMenuModule);\n};\n\nMatMenuModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatMenuModule\n});\nMatMenuModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatMenuModule_Factory(t) {\n    return new (t || MatMenuModule)();\n  },\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule], CdkScrollableModule, MatCommonModule, _MatMenuDirectivesModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMenuModule, {\n    declarations: function declarations() {\n      return [_MatMenu, MatMenuItem];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule, _MatMenuDirectivesModule],\n      exports: [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n      declarations: [_MatMenu, MatMenuItem],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-positions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenu, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };","map":{"version":3,"sources":["../../../../../material/menu/menu-animations.ts","../../../../../material/menu/menu-content.ts","../../../../../material/menu/menu-errors.ts","../../../../../material/menu/menu-panel.ts","../../../../../material/menu/menu-item.ts","../../../../../material/menu/menu.ts","../../../../../material/menu/menu-trigger.ts","../../../../../material/menu/menu-module.ts","../../../../../material/menu/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n        opacity: 1\n      }))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomPortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactoryResolver,\n  Directive,\n  Inject,\n  Injector,\n  OnDestroy,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any,\n    private _changeDetectorRef?: ChangeDetectorRef) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n\n    // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  readonly panelId?: string;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  addItem?: (item: T) => void;\n\n  /**\n   * @deprecated To be removed.\n   * @breaking-change 8.0.0\n   */\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nclass MatMenuItemBase {}\nconst _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n@Component({\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    '[attr.role]': 'role',\n    '[class.mat-menu-item]': 'true',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    'class': 'mat-focus-indicator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** ARIA role for the menu item. */\n  @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Stream that emits when the menu item is focused. */\n  readonly _focused = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() public _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n    this._focused.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('click', ['$event'])\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n  @HostListener('mouseenter')\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ESCAPE,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  DOWN_ARROW,\n  UP_ARROW,\n  HOME,\n  END,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {AnimationEvent} from '@angular/animations';\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\nlet menuPanelUid = 0;\n\n/** Base class with all of the `MatMenu` functionality. */\n@Directive()\n// tslint:disable-next-line:class-name\nexport class _MatMenuBase implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit,\n  OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** All items inside the menu. Includes items nested inside another menu. */\n  @ContentChildren(MatMenuItem, {descendants: true}) _allItems: QueryList<MatMenuItem>;\n\n  /** Only the direct descendant menu items. */\n  private _directDescendantItems = new QueryList<MatMenuItem>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** aria-label for the menu panel. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** aria-labelledby for the menu panel. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** aria-describedby for the menu panel. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem, {descendants: false}) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach((className: string) => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach((className: string) => {\n        this._classList[className] = true;\n      });\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  private _previousPanelClass: string;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close: EventEmitter<void | 'click' | 'keydown' | 'tab'> = this.closed;\n\n  readonly panelId = `mat-menu-panel-${menuPanelUid++}`;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n\n    // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n    this._directDescendantItems.changes.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge<MatMenuItem>(...items.map((item: MatMenuItem) => item._focused)))\n    ).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes as Observable<QueryList<MatMenuItem>>;\n    return itemChanges.pipe(\n      startWith(this._directDescendantItems),\n      switchMap(items => merge(...items.map((item: MatMenuItem) => item._hovered)))\n    ) as Observable<MatMenuItem>;\n  }\n\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  addItem(_item: MatMenuItem) {}\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n  removeItem(_item: MatMenuItem) {}\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case HOME:\n      case END:\n        if (!hasModifierKey(event)) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._focusFirstItem(origin));\n    } else {\n      this._focusFirstItem(origin);\n    }\n  }\n\n  /**\n   * Actual implementation that focuses the first item. Needs to be separated\n   * out so we don't repeat the same logic in the public `focusFirstItem` method.\n   */\n  private _focusFirstItem(origin: FocusOrigin) {\n    const manager = this._keyManager;\n\n    manager.setFocusOrigin(origin).setFirstItemActive();\n\n    // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement;\n\n      // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n    const newElevation = `mat-elevation-z${elevation}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n\n    // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n  private _updateDirectDescendants() {\n    this._allItems.changes\n      .pipe(startWith(this._allItems))\n      .subscribe((items: QueryList<MatMenuItem>) => {\n        this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n        this._directDescendantItems.notifyOnChanges();\n      });\n  }\n\n  static ngAcceptInputType_overlapTrigger: BooleanInput;\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n}\n\n/** @docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs. */\n@Directive()\nexport class MatMenu extends _MatMenuBase {}\n\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n\n/** @docs-public MatMenu */\n@Component({\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu},\n    {provide: MatMenu, useExisting: _MatMenu}\n  ]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenu extends MatMenu {\n\n  constructor(elementRef: ElementRef<HTMLElement>, ngZone: NgZone,\n      @Inject(MAT_MENU_DEFAULT_OPTIONS) defaultOptions: MatMenuDefaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Directive applied to an element that should trigger a `mat-menu`. */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'class': 'mat-menu-trigger',\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closingActionsSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /**\n   * Whether focus should be restored when the menu is closed.\n   * Note that disabling this option can have accessibility implications\n   * and it's up to you to manage focus, if you decide to turn it off.\n   */\n  @Input('matMenuTriggerRestoreFocus') restoreFocus: boolean = true;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n    this._closingActionsSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n        this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n    this._closingActionsSubscription.unsubscribe();\n    this._overlayRef.detach();\n    this._restoreFocus();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe({\n            next: () => menu.lazyContent!.detach(),\n            // No matter whether the content got re-attached, reset the menu.\n            complete: () => this._setIsMenuOpen(false)\n          });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /** Restores focus to the element that was focused before the menu was open. */\n  private _restoreFocus() {\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (this.restoreFocus) {\n      if (!this._openedBy) {\n        // Note that the focus style will show up both for `program` and\n        // `keyboard` so we don't have to specify which one it is.\n        this.focus();\n      } else if (!this.triggersSubmenu()) {\n        this.focus(this._openedBy);\n      }\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {_MatMenu} from './menu';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n@NgModule({\n  exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [\n    MatMenuTrigger,\n    MatMenuContent,\n  ],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\n// tslint:disable-next-line:class-name\nexport class _MatMenuDirectivesModule {}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n    _MatMenuDirectivesModule,\n  ],\n  exports: [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n  declarations: [_MatMenu, MatMenuItem],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_MENU_DEFAULT_OPTIONS_FACTORY as Éµangular_material_src_material_menu_menu_a} from './menu';\nexport {MAT_MENU_SCROLL_STRATEGY_FACTORY as Éµangular_material_src_material_menu_menu_b,MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as Éµangular_material_src_material_menu_menu_c} from './menu-trigger';"]},"metadata":{},"sourceType":"module"}