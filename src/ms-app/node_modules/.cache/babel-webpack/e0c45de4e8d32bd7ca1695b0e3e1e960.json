{"ast":null,"code":"import _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { CommonModule } from '@angular/common';\nimport { Injectable, ɵɵdefineInjectable, Optional, SkipSelf, InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, Input, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { mixinDisabled, mixinInitialized } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/paginator/paginator-intl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/material/tooltip';\nimport * as ɵngcc4 from '@angular/material/form-field';\nimport * as ɵngcc5 from '@angular/material/select';\nimport * as ɵngcc6 from '@angular/material/core';\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 19);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var pageSizeOption_r6 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", pageSizeOption_r6, \" \");\n  }\n}\n\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 16);\n    ɵngcc0.ɵɵelementStart(1, \"mat-select\", 17);\n    ɵngcc0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r7._changePageSize($event.value);\n    });\n    ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"color\", ctx_r3.color);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"disabled\", ctx_r3.disabled)(\"aria-label\", ctx_r3._intl.itemsPerPageLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n  }\n}\n\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 20);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.pageSize);\n  }\n}\n\nfunction MatPaginator_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 13);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 5, \"mat-form-field\", 14);\n    ɵngcc0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0._intl.itemsPerPageLabel, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n  }\n}\n\nfunction MatPaginator_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 21);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.firstPage();\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 22);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", ctx_r1._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r1._previousButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n  }\n}\n\nfunction MatPaginator_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵnamespaceHTML();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 23);\n    ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.lastPage();\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 7);\n    ɵngcc0.ɵɵelement(2, \"path\", 24);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", ctx_r2._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r2._nextButtonsDisabled());\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n  }\n}\n\nvar MatPaginatorIntl = function MatPaginatorIntl() {\n  _classCallCheck(this, MatPaginatorIntl);\n\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  this.changes = new Subject();\n  /**\n   * A label for the page size selector.\n   */\n\n  this.itemsPerPageLabel = 'Items per page:';\n  /**\n   * A label for the button that increments the current page.\n   */\n\n  this.nextPageLabel = 'Next page';\n  /**\n   * A label for the button that decrements the current page.\n   */\n\n  this.previousPageLabel = 'Previous page';\n  /**\n   * A label for the button that moves to the first page.\n   */\n\n  this.firstPageLabel = 'First page';\n  /**\n   * A label for the button that moves to the last page.\n   */\n\n  this.lastPageLabel = 'Last page';\n  /**\n   * A label for the range of items within the current page and the length of the whole list.\n   */\n\n  this.getRangeLabel =\n  /**\n  * @param {?} page\n  * @param {?} pageSize\n  * @param {?} length\n  * @return {?}\n  */\n  function (page, pageSize, length) {\n    if (length == 0 || pageSize == 0) {\n      return \"0 of \".concat(length);\n    }\n\n    length = Math.max(length, 0);\n    /** @type {?} */\n\n    var startIndex = page * pageSize; // If the start index exceeds the list length, do not try and fix the end index to the end.\n\n    /** @type {?} */\n\n    var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n    return \"\".concat(startIndex + 1, \" \\u2013 \").concat(endIndex, \" of \").concat(length);\n  };\n};\n\nMatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) {\n  return new (t || MatPaginatorIntl)();\n};\n/** @nocollapse */\n\n\nMatPaginatorIntl.ɵprov = ɵɵdefineInjectable({\n  factory: function MatPaginatorIntl_Factory() {\n    return new MatPaginatorIntl();\n  },\n  token: MatPaginatorIntl,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatPaginatorIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   * @type {?}\n   */\n  MatPaginatorIntl.prototype.changes;\n  /**\n   * A label for the page size selector.\n   * @type {?}\n   */\n\n  MatPaginatorIntl.prototype.itemsPerPageLabel;\n  /**\n   * A label for the button that increments the current page.\n   * @type {?}\n   */\n\n  MatPaginatorIntl.prototype.nextPageLabel;\n  /**\n   * A label for the button that decrements the current page.\n   * @type {?}\n   */\n\n  MatPaginatorIntl.prototype.previousPageLabel;\n  /**\n   * A label for the button that moves to the first page.\n   * @type {?}\n   */\n\n  MatPaginatorIntl.prototype.firstPageLabel;\n  /**\n   * A label for the button that moves to the last page.\n   * @type {?}\n   */\n\n  MatPaginatorIntl.prototype.lastPageLabel;\n  /**\n   * A label for the range of items within the current page and the length of the whole list.\n   * @type {?}\n   */\n\n  MatPaginatorIntl.prototype.getRangeLabel;\n}\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\n\n\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/paginator/paginator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The default page size if there is no page size and there are no provided page size options.\n * @type {?}\n */\n\nvar DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\n\nvar PageEvent = function PageEvent() {\n  _classCallCheck(this, PageEvent);\n};\n\nif (false) {\n  /**\n   * The current page index.\n   * @type {?}\n   */\n  PageEvent.prototype.pageIndex;\n  /**\n   * Index of the page that was selected previously.\n   * \\@breaking-change 8.0.0 To be made into a required property.\n   * @type {?}\n   */\n\n  PageEvent.prototype.previousPageIndex;\n  /**\n   * The current page size\n   * @type {?}\n   */\n\n  PageEvent.prototype.pageSize;\n  /**\n   * The current total number of items being paged\n   * @type {?}\n   */\n\n  PageEvent.prototype.length;\n}\n/**\n * Object that can be used to configure the default options for the paginator module.\n * @record\n */\n\n\nfunction MatPaginatorDefaultOptions() {}\n\nif (false) {\n  /**\n   * Number of items to display on a page. By default set to 50.\n   * @type {?|undefined}\n   */\n  MatPaginatorDefaultOptions.prototype.pageSize;\n  /**\n   * The set of provided page size options to display to the user.\n   * @type {?|undefined}\n   */\n\n  MatPaginatorDefaultOptions.prototype.pageSizeOptions;\n  /**\n   * Whether to hide the page size selection UI from the user.\n   * @type {?|undefined}\n   */\n\n  MatPaginatorDefaultOptions.prototype.hidePageSize;\n  /**\n   * Whether to show the first/last buttons UI to the user.\n   * @type {?|undefined}\n   */\n\n  MatPaginatorDefaultOptions.prototype.showFirstLastButtons;\n}\n/**\n * Injection token that can be used to provide the default options for the paginator module.\n * @type {?}\n */\n\n\nvar MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to MatPaginator.\n\n/**\n * \\@docs-private\n */\n\nvar MatPaginatorBase = function MatPaginatorBase() {\n  _classCallCheck(this, MatPaginatorBase);\n};\n/** @type {?} */\n\n\nvar _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n\n\nvar MatPaginator = /*#__PURE__*/function (_MatPaginatorBase2) {\n  _inherits(MatPaginator, _MatPaginatorBase2);\n\n  var _super = _createSuper(MatPaginator);\n\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   * @param {?=} defaults\n   */\n  function MatPaginator(_intl, _changeDetectorRef, defaults) {\n    var _this;\n\n    _classCallCheck(this, MatPaginator);\n\n    _this = _super.call(this);\n    _this._intl = _intl;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._pageIndex = 0;\n    _this._length = 0;\n    _this._pageSizeOptions = [];\n    _this._hidePageSize = false;\n    _this._showFirstLastButtons = false;\n    /**\n     * Event emitted when the paginator changes the page size or page index.\n     */\n\n    _this.page = new EventEmitter();\n    _this._intlChanges = _intl.changes.subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this._changeDetectorRef.markForCheck();\n    });\n\n    if (defaults) {\n      var pageSize = defaults.pageSize,\n          pageSizeOptions = defaults.pageSizeOptions,\n          hidePageSize = defaults.hidePageSize,\n          showFirstLastButtons = defaults.showFirstLastButtons;\n\n      if (pageSize != null) {\n        _this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        _this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        _this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        _this._showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * The zero-based page index of the displayed list of items. Defaulted to 0.\n   * @return {?}\n   */\n\n\n  _createClass(MatPaginator, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      this._initialized = true;\n\n      this._updateDisplayedPageSizeOptions();\n\n      this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._intlChanges.unsubscribe();\n    }\n    /**\n     * Advances to the next page if it exists.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextPage\",\n    value: function nextPage() {\n      if (!this.hasNextPage()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var previousPageIndex = this.pageIndex;\n      this.pageIndex++;\n\n      this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move back to the previous page if it exists.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previousPage\",\n    value: function previousPage() {\n      if (!this.hasPreviousPage()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var previousPageIndex = this.pageIndex;\n      this.pageIndex--;\n\n      this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the first page if not already there.\n     * @return {?}\n     */\n\n  }, {\n    key: \"firstPage\",\n    value: function firstPage() {\n      // hasPreviousPage being false implies at the start\n      if (!this.hasPreviousPage()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var previousPageIndex = this.pageIndex;\n      this.pageIndex = 0;\n\n      this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Move to the last page if not already there.\n     * @return {?}\n     */\n\n  }, {\n    key: \"lastPage\",\n    value: function lastPage() {\n      // hasNextPage being false implies at the end\n      if (!this.hasNextPage()) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var previousPageIndex = this.pageIndex;\n      this.pageIndex = this.getNumberOfPages() - 1;\n\n      this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Whether there is a previous page.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasPreviousPage\",\n    value: function hasPreviousPage() {\n      return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /**\n     * Whether there is a next page.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasNextPage\",\n    value: function hasNextPage() {\n      /** @type {?} */\n      var maxPageIndex = this.getNumberOfPages() - 1;\n      return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /**\n     * Calculate the number of pages\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNumberOfPages\",\n    value: function getNumberOfPages() {\n      if (!this.pageSize) {\n        return 0;\n      }\n\n      return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     * @param {?} pageSize\n     * @return {?}\n     */\n\n  }, {\n    key: \"_changePageSize\",\n    value: function _changePageSize(pageSize) {\n      // Current page needs to be updated to reflect the new page size. Navigate to the page\n      // containing the previous page's first item.\n\n      /** @type {?} */\n      var startIndex = this.pageIndex * this.pageSize;\n      /** @type {?} */\n\n      var previousPageIndex = this.pageIndex;\n      this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n      this.pageSize = pageSize;\n\n      this._emitPageEvent(previousPageIndex);\n    }\n    /**\n     * Checks whether the buttons for going forwards should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_nextButtonsDisabled\",\n    value: function _nextButtonsDisabled() {\n      return this.disabled || !this.hasNextPage();\n    }\n    /**\n     * Checks whether the buttons for going backwards should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_previousButtonsDisabled\",\n    value: function _previousButtonsDisabled() {\n      return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateDisplayedPageSizeOptions\",\n    value: function _updateDisplayedPageSizeOptions() {\n      if (!this._initialized) {\n        return;\n      } // If no page size is provided, use the first page size option or the default page size.\n\n\n      if (!this.pageSize) {\n        this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n      }\n\n      this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n      if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n        this._displayedPageSizeOptions.push(this.pageSize);\n      } // Sort the numbers using a number-specific sort function.\n\n\n      this._displayedPageSizeOptions.sort(\n      /**\n      * @param {?} a\n      * @param {?} b\n      * @return {?}\n      */\n      function (a, b) {\n        return a - b;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Emits an event notifying that a change of the paginator's properties has been triggered.\n     * @private\n     * @param {?} previousPageIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitPageEvent\",\n    value: function _emitPageEvent(previousPageIndex) {\n      this.page.emit({\n        previousPageIndex: previousPageIndex,\n        pageIndex: this.pageIndex,\n        pageSize: this.pageSize,\n        length: this.length\n      });\n    }\n  }, {\n    key: \"pageIndex\",\n    get: function get() {\n      return this._pageIndex;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The length of the total number of items that are being paginated. Defaulted to 0.\n     * @return {?}\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._length = coerceNumberProperty(value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Number of items to display on a page. By default set to 50.\n     * @return {?}\n     */\n\n  }, {\n    key: \"pageSize\",\n    get: function get() {\n      return this._pageSize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._pageSize = Math.max(coerceNumberProperty(value), 0);\n\n      this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * The set of provided page size options to display to the user.\n     * @return {?}\n     */\n\n  }, {\n    key: \"pageSizeOptions\",\n    get: function get() {\n      return this._pageSizeOptions;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._pageSizeOptions = (value || []).map(\n      /**\n      * @param {?} p\n      * @return {?}\n      */\n      function (p) {\n        return coerceNumberProperty(p);\n      });\n\n      this._updateDisplayedPageSizeOptions();\n    }\n    /**\n     * Whether to hide the page size selection UI from the user.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hidePageSize\",\n    get: function get() {\n      return this._hidePageSize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to show the first/last buttons UI to the user.\n     * @return {?}\n     */\n\n  }, {\n    key: \"showFirstLastButtons\",\n    get: function get() {\n      return this._showFirstLastButtons;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatPaginator;\n}(_MatPaginatorBase);\n\nMatPaginator.ɵfac = function MatPaginator_Factory(t) {\n  return new (t || MatPaginator)(ɵngcc0.ɵɵdirectiveInject(MatPaginatorIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_PAGINATOR_DEFAULT_OPTIONS, 8));\n};\n\nMatPaginator.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatPaginator,\n  selectors: [[\"mat-paginator\"]],\n  hostAttrs: [1, \"mat-paginator\"],\n  inputs: {\n    disabled: \"disabled\",\n    pageIndex: \"pageIndex\",\n    length: \"length\",\n    pageSize: \"pageSize\",\n    pageSizeOptions: \"pageSizeOptions\",\n    hidePageSize: \"hidePageSize\",\n    showFirstLastButtons: \"showFirstLastButtons\",\n    color: \"color\"\n  },\n  outputs: {\n    page: \"page\"\n  },\n  exportAs: [\"matPaginator\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 14,\n  vars: 14,\n  consts: [[1, \"mat-paginator-outer-container\"], [1, \"mat-paginator-container\"], [\"class\", \"mat-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-paginator-range-actions\"], [1, \"mat-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-paginator-page-size\"], [1, \"mat-paginator-page-size-label\"], [\"class\", \"mat-paginator-page-size-select\", 3, \"color\", 4, \"ngIf\"], [\"class\", \"mat-paginator-page-size-value\", 4, \"ngIf\"], [1, \"mat-paginator-page-size-select\", 3, \"color\"], [3, \"value\", \"disabled\", \"aria-label\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"mat-paginator-page-size-value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]],\n  template: function MatPaginator_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 3, \"div\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n      ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n      ɵngcc0.ɵɵtext(5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n      ɵngcc0.ɵɵelementStart(7, \"button\", 6);\n      ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() {\n        return ctx.previousPage();\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(8, \"svg\", 7);\n      ɵngcc0.ɵɵelement(9, \"path\", 8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelementStart(10, \"button\", 9);\n      ɵngcc0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() {\n        return ctx.nextPage();\n      });\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(11, \"svg\", 7);\n      ɵngcc0.ɵɵelement(12, \"path\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), \" \");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", ctx._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._previousButtonsDisabled());\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", ctx._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._nextButtonsDisabled());\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.MatButton, ɵngcc3.MatTooltip, ɵngcc4.MatFormField, ɵngcc5.MatSelect, ɵngcc1.NgForOf, ɵngcc6.MatOption],\n  styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatPaginator.ctorParameters = function () {\n  return [{\n    type: MatPaginatorIntl\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatPaginator.propDecorators = {\n  color: [{\n    type: Input\n  }],\n  pageIndex: [{\n    type: Input\n  }],\n  length: [{\n    type: Input\n  }],\n  pageSize: [{\n    type: Input\n  }],\n  pageSizeOptions: [{\n    type: Input\n  }],\n  hidePageSize: [{\n    type: Input\n  }],\n  showFirstLastButtons: [{\n    type: Input\n  }],\n  page: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatPaginator, [{\n    type: Component,\n    args: [{\n      selector: 'mat-paginator',\n      exportAs: 'matPaginator',\n      template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n      inputs: ['disabled'],\n      host: {\n        'class': 'mat-paginator'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatPaginatorIntl\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    page: [{\n      type: Output\n    }],\n    pageIndex: [{\n      type: Input\n    }],\n    length: [{\n      type: Input\n    }],\n    pageSize: [{\n      type: Input\n    }],\n    pageSizeOptions: [{\n      type: Input\n    }],\n    hidePageSize: [{\n      type: Input\n    }],\n    showFirstLastButtons: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatPaginator.ngAcceptInputType_pageIndex;\n  /** @type {?} */\n\n  MatPaginator.ngAcceptInputType_length;\n  /** @type {?} */\n\n  MatPaginator.ngAcceptInputType_pageSize;\n  /** @type {?} */\n\n  MatPaginator.ngAcceptInputType_hidePageSize;\n  /** @type {?} */\n\n  MatPaginator.ngAcceptInputType_showFirstLastButtons;\n  /** @type {?} */\n\n  MatPaginator.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._initialized;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._intlChanges;\n  /**\n   * Theme color to be used for the underlying form controls.\n   * @type {?}\n   */\n\n  MatPaginator.prototype.color;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._pageIndex;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._length;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._pageSize;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._pageSizeOptions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._hidePageSize;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._showFirstLastButtons;\n  /**\n   * Event emitted when the paginator changes the page size or page index.\n   * @type {?}\n   */\n\n  MatPaginator.prototype.page;\n  /**\n   * Displayed set of page size options. Will be sorted and include current page size.\n   * @type {?}\n   */\n\n  MatPaginator.prototype._displayedPageSizeOptions;\n  /** @type {?} */\n\n  MatPaginator.prototype._intl;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatPaginator.prototype._changeDetectorRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/paginator/paginator-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatPaginatorModule = function MatPaginatorModule() {\n  _classCallCheck(this, MatPaginatorModule);\n};\n\nMatPaginatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatPaginatorModule\n});\nMatPaginatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatPaginatorModule_Factory(t) {\n    return new (t || MatPaginatorModule)();\n  },\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n  imports: [[CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatPaginatorModule, {\n    declarations: function declarations() {\n      return [MatPaginator];\n    },\n    imports: function imports() {\n      return [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule];\n    },\n    exports: function exports() {\n      return [MatPaginator];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatPaginatorModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule],\n      exports: [MatPaginator],\n      declarations: [MatPaginator],\n      providers: [MAT_PAGINATOR_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/paginator/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent };","map":{"version":3,"sources":["../../../../../material/paginator/paginator-intl.ts","../../../../../material/paginator/paginator.ts","../../../../../material/paginator/paginator-module.ts","../../../../../material/paginator/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} â ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceNumberProperty,\n  coerceBooleanProperty,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n\n/** Object that can be used to configure the default options for the paginator module. */\nexport interface MatPaginatorDefaultOptions {\n  /** Number of items to display on a page. By default set to 50. */\n  pageSize?: number;\n\n  /** The set of provided page size options to display to the user. */\n  pageSizeOptions?: number[];\n\n  /** Whether to hide the page size selection UI from the user. */\n  hidePageSize?: boolean;\n\n  /** Whether to show the first/last buttons UI to the user. */\n  showFirstLastButtons?: boolean;\n}\n\n/** Injection token that can be used to provide the default options for the paginator module. */\nexport const MAT_PAGINATOR_DEFAULT_OPTIONS =\n    new InjectionToken<MatPaginatorDefaultOptions>('MAT_PAGINATOR_DEFAULT_OPTIONS');\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nclass MatPaginatorBase {}\nconst _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _pageIndex = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  private _length = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_PAGINATOR_DEFAULT_OPTIONS)\n                  defaults?: MatPaginatorDefaultOptions) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons} = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n\n  static ngAcceptInputType_pageIndex: NumberInput;\n  static ngAcceptInputType_length: NumberInput;\n  static ngAcceptInputType_pageSize: NumberInput;\n  static ngAcceptInputType_hidePageSize: BooleanInput;\n  static ngAcceptInputType_showFirstLastButtons: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}