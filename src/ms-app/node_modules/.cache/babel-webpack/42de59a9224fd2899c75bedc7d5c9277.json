{"ast":null,"code":"import _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, ContentChildren, Input, Optional, ElementRef, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c2 = [\"*\"];\n\nfunction MatRadioDefaultOptions() {}\n\nif (false) {\n  /** @type {?} */\n  MatRadioDefaultOptions.prototype.color;\n}\n/** @type {?} */\n\n\nvar MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\n\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n} // Increasing integer for generating unique ids for radio components.\n\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatRadioGroup;\n  }),\n  multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\n\nvar MatRadioChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatRadioChange(source, value) {\n  _classCallCheck(this, MatRadioChange);\n\n  this.source = source;\n  this.value = value;\n};\n\nif (false) {\n  /**\n   * The MatRadioButton that emits the change event.\n   * @type {?}\n   */\n  MatRadioChange.prototype.source;\n  /**\n   * The value of the MatRadioButton.\n   * @type {?}\n   */\n\n  MatRadioChange.prototype.value;\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nvar MatRadioGroup = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetector\n   */\n  function MatRadioGroup(_changeDetector) {\n    _classCallCheck(this, MatRadioGroup);\n\n    this._changeDetector = _changeDetector;\n    /**\n     * Selected value for the radio group.\n     */\n\n    this._value = null;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     */\n\n    this._name = \"mat-radio-group-\".concat(nextUniqueId++);\n    /**\n     * The currently selected radio button. Should match value.\n     */\n\n    this._selected = null;\n    /**\n     * Whether the `value` has been set to its initial value.\n     */\n\n    this._isInitialized = false;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     */\n\n    this._labelPosition = 'after';\n    /**\n     * Whether the radio group is disabled.\n     */\n\n    this._disabled = false;\n    /**\n     * Whether the radio group is required.\n     */\n\n    this._required = false;\n    /**\n     * The method to be called in order to update ngModel\n     */\n\n    this._controlValueAccessorChangeFn =\n    /**\n    * @return {?}\n    */\n    function () {};\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     */\n\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n\n    this.change = new EventEmitter();\n  }\n  /**\n   * Name of the radio button group. All radio buttons inside this group will use this name.\n   * @return {?}\n   */\n\n\n  _createClass(MatRadioGroup, [{\n    key: \"_checkSelectedRadioButton\",\n\n    /**\n     * @return {?}\n     */\n    value: function _checkSelectedRadioButton() {\n      if (this._selected && !this._selected.checked) {\n        this._selected.checked = true;\n      }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      // Mark this component as initialized in AfterContentInit because the initial value can\n      // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n      // NgModel occurs *after* the OnInit of the MatRadioGroup.\n      this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_touch\",\n    value: function _touch() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRadioButtonNames\",\n    value: function _updateRadioButtonNames() {\n      var _this = this;\n\n      if (this._radios) {\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        function (radio) {\n          radio.name = _this.name;\n\n          radio._markForCheck();\n        });\n      }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateSelectedRadioFromValue\",\n    value: function _updateSelectedRadioFromValue() {\n      var _this2 = this;\n\n      // If the value already matches the selected radio, do nothing.\n\n      /** @type {?} */\n      var isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n      if (this._radios && !isAlreadySelected) {\n        this._selected = null;\n\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        function (radio) {\n          radio.checked = _this2.value === radio.value;\n\n          if (radio.checked) {\n            _this2._selected = radio;\n          }\n        });\n      }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      if (this._isInitialized) {\n        this.change.emit(new MatRadioChange(\n        /** @type {?} */\n        this._selected, this._value));\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markRadiosForCheck\",\n    value: function _markRadiosForCheck() {\n      if (this._radios) {\n        this._radios.forEach(\n        /**\n        * @param {?} radio\n        * @return {?}\n        */\n        function (radio) {\n          return radio._markForCheck();\n        });\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetector.markForCheck();\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._name = value;\n\n      this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n\n  }, {\n    key: \"labelPosition\",\n    get: function get() {\n      return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._labelPosition = v === 'before' ? 'before' : 'after';\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (this._value !== newValue) {\n        // Set this before proceeding to ensure no circular loop occurs with selection.\n        this._value = newValue;\n\n        this._updateSelectedRadioFromValue();\n\n        this._checkSelectedRadioButton();\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    ,\n    set: function set(selected) {\n      this._selected = selected;\n      this.value = selected ? selected.value : null;\n\n      this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n  }]);\n\n  return MatRadioGroup;\n}();\n\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) {\n  return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatRadioGroup,\n  selectors: [[\"mat-radio-group\"]],\n  contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n  inputs: {\n    name: \"name\",\n    labelPosition: \"labelPosition\",\n    value: \"value\",\n    selected: \"selected\",\n    disabled: \"disabled\",\n    required: \"required\",\n    color: \"color\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matRadioGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR])]\n});\n/** @nocollapse */\n\nMatRadioGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\nMatRadioGroup.propDecorators = {\n  change: [{\n    type: Output\n  }],\n  _radios: [{\n    type: ContentChildren,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return MatRadioButton;\n    }), {\n      descendants: true\n    }]\n  }],\n  color: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-radio-group',\n      exportAs: 'matRadioGroup',\n      providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n      host: {\n        'role': 'radiogroup',\n        'class': 'mat-radio-group'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    change: [{\n      type: Output\n    }],\n    name: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    _radios: [{\n      type: ContentChildren,\n      args: [forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return MatRadioButton;\n      }), {\n        descendants: true\n      }]\n    }],\n    color: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatRadioGroup.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatRadioGroup.ngAcceptInputType_required;\n  /**\n   * Selected value for the radio group.\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._value;\n  /**\n   * The HTML name attribute applied to radio buttons in this group.\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._name;\n  /**\n   * The currently selected radio button. Should match value.\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._selected;\n  /**\n   * Whether the `value` has been set to its initial value.\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._isInitialized;\n  /**\n   * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._labelPosition;\n  /**\n   * Whether the radio group is disabled.\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._disabled;\n  /**\n   * Whether the radio group is required.\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._required;\n  /**\n   * The method to be called in order to update ngModel\n   * @type {?}\n   */\n\n  MatRadioGroup.prototype._controlValueAccessorChangeFn;\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatRadioGroup.prototype.onTouched;\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   * @type {?}\n   */\n\n  MatRadioGroup.prototype.change;\n  /**\n   * Child radio buttons.\n   * @type {?}\n   */\n\n  MatRadioGroup.prototype._radios;\n  /**\n   * Theme color for all of the radio buttons in the group.\n   * @type {?}\n   */\n\n  MatRadioGroup.prototype.color;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatRadioGroup.prototype._changeDetector;\n} // Boilerplate for applying mixins to MatRadioButton.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatRadioButtonBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatRadioButtonBase(_elementRef) {\n  _classCallCheck(this, MatRadioButtonBase);\n\n  this._elementRef = _elementRef;\n};\n\nif (false) {\n  /** @type {?} */\n  MatRadioButtonBase.prototype.disabled;\n  /** @type {?} */\n\n  MatRadioButtonBase.prototype._elementRef;\n} // As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n\n/** @type {?} */\n\n\nvar _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\n\n\nvar _MatRadioButtonBase = /*#__PURE__*/function (_MatRadioButtonMixinB) {\n  _inherits(_MatRadioButtonBase, _MatRadioButtonMixinB);\n\n  var _super = _createSuper(_MatRadioButtonBase);\n\n  /**\n   * @param {?} radioGroup\n   * @param {?} elementRef\n   * @param {?} _changeDetector\n   * @param {?} _focusMonitor\n   * @param {?} _radioDispatcher\n   * @param {?=} _animationMode\n   * @param {?=} _providerOverride\n   */\n  function _MatRadioButtonBase(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n    var _this3;\n\n    _classCallCheck(this, _MatRadioButtonBase);\n\n    _this3 = _super.call(this, elementRef);\n    _this3._changeDetector = _changeDetector;\n    _this3._focusMonitor = _focusMonitor;\n    _this3._radioDispatcher = _radioDispatcher;\n    _this3._animationMode = _animationMode;\n    _this3._providerOverride = _providerOverride;\n    _this3._uniqueId = \"mat-radio-\".concat(++nextUniqueId);\n    /**\n     * The unique ID for the radio button.\n     */\n\n    _this3.id = _this3._uniqueId;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n\n    _this3.change = new EventEmitter();\n    /**\n     * Whether this radio is checked.\n     */\n\n    _this3._checked = false;\n    /**\n     * Value assigned to this radio.\n     */\n\n    _this3._value = null;\n    /**\n     * Unregister function for _radioDispatcher\n     */\n\n    _this3._removeUniqueSelectionListener =\n    /**\n    * @return {?}\n    */\n    function () {}; // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n    _this3.radioGroup = radioGroup;\n    _this3._removeUniqueSelectionListener = _radioDispatcher.listen(\n    /**\n    * @param {?} id\n    * @param {?} name\n    * @return {?}\n    */\n    function (id, name) {\n      if (id !== _this3.id && name === _this3.name) {\n        _this3.checked = false;\n      }\n    });\n    return _this3;\n  }\n  /**\n   * Whether this radio button is checked.\n   * @return {?}\n   */\n\n\n  _createClass(_MatRadioButtonBase, [{\n    key: \"focus\",\n\n    /**\n     * Focuses the radio button.\n     * @param {?=} options\n     * @return {?}\n     */\n    value: function focus(options) {\n      this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n      // update radio button's status\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      if (this.radioGroup) {\n        // If the radio is inside a radio group, determine if it should be checked\n        this.checked = this.radioGroup.value === this._value; // Copy name from parent radio group\n\n        this.name = this.radioGroup.name;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this4 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(\n      /**\n      * @param {?} focusOrigin\n      * @return {?}\n      */\n      function (focusOrigin) {\n        if (!focusOrigin && _this4.radioGroup) {\n          _this4.radioGroup._touch();\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `radio-button` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputChange\",\n    value: function _onInputChange(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n      /** @type {?} */\n\n      var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n      this.checked = true;\n\n      this._emitChangeEvent();\n\n      if (this.radioGroup) {\n        this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n        if (groupValueChanged) {\n          this.radioGroup._emitChangeEvent();\n        }\n      }\n    }\n    /**\n     * Sets the disabled state and marks for check if a change occurred.\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setDisabled\",\n    value: function _setDisabled(value) {\n      if (this._disabled !== value) {\n        this._disabled = value;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newCheckedState = coerceBooleanProperty(value);\n\n      if (this._checked !== newCheckedState) {\n        this._checked = newCheckedState;\n\n        if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n          this.radioGroup.selected = this;\n        } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n          // When unchecking the selected radio button, update the selected radio\n          // property on the group.\n          this.radioGroup.selected = null;\n        }\n\n        if (newCheckedState) {\n          // Notify all radio buttons with the same name to un-check.\n          this._radioDispatcher.notify(this.id, this.name);\n        }\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._value !== value) {\n        this._value = value;\n\n        if (this.radioGroup !== null) {\n          if (!this.checked) {\n            // Update checked when the value changed to match the radio group's value\n            this.checked = this.radioGroup.value === value;\n          }\n\n          if (this.checked) {\n            this.radioGroup.selected = this;\n          }\n        }\n      }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n\n  }, {\n    key: \"labelPosition\",\n    get: function get() {\n      return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._setDisabled(coerceBooleanProperty(value));\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required || this.radioGroup && this.radioGroup.required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Theme color of the radio button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._color = newValue;\n    }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n  }]);\n\n  return _MatRadioButtonBase;\n}(_MatRadioButtonMixinBase);\n\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) {\n  return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8));\n};\n\n_MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: _MatRadioButtonBase,\n  viewQuery: function _MatRadioButtonBase_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    checked: \"checked\",\n    value: \"value\",\n    labelPosition: \"labelPosition\",\n    disabled: \"disabled\",\n    required: \"required\",\n    color: \"color\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"]\n  },\n  outputs: {\n    change: \"change\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\n_MatRadioButtonBase.ctorParameters = function () {\n  return [{\n    type: MatRadioGroup,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: UniqueSelectionDispatcher\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RADIO_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n_MatRadioButtonBase.propDecorators = {\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  ariaDescribedby: [{\n    type: Input,\n    args: ['aria-describedby']\n  }],\n  checked: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: MatRadioGroup,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc2.UniqueSelectionDispatcher\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RADIO_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    checked: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  _MatRadioButtonBase.ngAcceptInputType_checked;\n  /** @type {?} */\n\n  _MatRadioButtonBase.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  _MatRadioButtonBase.ngAcceptInputType_required;\n  /** @type {?} */\n\n  _MatRadioButtonBase.ngAcceptInputType_disableRipple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._uniqueId;\n  /**\n   * The unique ID for the radio button.\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.id;\n  /**\n   * Analog to HTML 'name' attribute used to group radios for unique selection.\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.name;\n  /**\n   * Used to set the 'aria-label' attribute on the underlying input element.\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.ariaLabel;\n  /**\n   * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.ariaLabelledby;\n  /**\n   * The 'aria-describedby' attribute is read after the element's label and field type.\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.ariaDescribedby;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._labelPosition;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._color;\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.change;\n  /**\n   * The parent radio group. May or may not be present.\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype.radioGroup;\n  /**\n   * Whether this radio is checked.\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._checked;\n  /**\n   * Whether this radio is disabled.\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._disabled;\n  /**\n   * Whether this radio is required.\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._required;\n  /**\n   * Value assigned to this radio.\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._value;\n  /**\n   * Unregister function for _radioDispatcher\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._removeUniqueSelectionListener;\n  /**\n   * The native `<input type=radio>` element\n   * @type {?}\n   */\n\n  _MatRadioButtonBase.prototype._inputElement;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  _MatRadioButtonBase.prototype._changeDetector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._radioDispatcher;\n  /** @type {?} */\n\n  _MatRadioButtonBase.prototype._animationMode;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  _MatRadioButtonBase.prototype._providerOverride;\n}\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nvar MatRadioButton = /*#__PURE__*/function (_MatRadioButtonBase2) {\n  _inherits(MatRadioButton, _MatRadioButtonBase2);\n\n  var _super2 = _createSuper(MatRadioButton);\n\n  function MatRadioButton() {\n    _classCallCheck(this, MatRadioButton);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatRadioButton;\n}(_MatRadioButtonBase);\n\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n  return ɵMatRadioButton_BaseFactory(t || MatRadioButton);\n};\n\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatRadioButton,\n  selectors: [[\"mat-radio-button\"]],\n  hostAttrs: [1, \"mat-radio-button\"],\n  hostVars: 17,\n  hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n        return ctx._inputElement.nativeElement.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matRadioButton\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 13,\n  vars: 19,\n  consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n  template: function MatRadioButton_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelement(3, \"div\", 3);\n      ɵngcc0.ɵɵelement(4, \"div\", 4);\n      ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n      ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) {\n        return ctx._onInputChange($event);\n      })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n      ɵngcc0.ɵɵtext(11, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(12);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    }\n  },\n  directives: [ɵngcc3.MatRipple],\n  styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nvar ɵMatRadioButton_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioButton);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'mat-radio-button',\n      template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n      inputs: ['disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRadioButton',\n      host: {\n        'class': 'mat-radio-button',\n        '[class.mat-radio-checked]': 'checked',\n        '[class.mat-radio-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-primary]': 'color === \"primary\"',\n        '[class.mat-accent]': 'color === \"accent\"',\n        '[class.mat-warn]': 'color === \"warn\"',\n        // Needs to be -1 so the `focus` event still fires.\n        '[attr.tabindex]': '-1',\n        '[attr.id]': 'id',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null',\n        // Note: under normal conditions focus shouldn't land on this element, however it may be\n        // programmatically set, for example inside of a focus trap, in this case we want to forward\n        // the focus to the native element.\n        '(focus)': '_inputElement.nativeElement.focus()'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatRadioModule = function MatRadioModule() {\n  _classCallCheck(this, MatRadioModule);\n};\n\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatRadioModule\n});\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatRadioModule_Factory(t) {\n    return new (t || MatRadioModule)();\n  },\n  imports: [[MatRippleModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, {\n    declarations: function declarations() {\n      return [MatRadioGroup, MatRadioButton];\n    },\n    imports: function imports() {\n      return [MatRippleModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatRadioGroup, MatRadioButton, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule],\n      exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n      declarations: [MatRadioGroup, MatRadioButton]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase };","map":{"version":3,"sources":["../../../../../material/radio/radio.ts","../../../../../material/radio/radio-module.ts","../../../../../material/radio/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nexport interface MatRadioDefaultOptions {\n  color: ThemePalette;\n}\n\nexport const MAT_RADIO_DEFAULT_OPTIONS =\n  new InjectionToken<MatRadioDefaultOptions>('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nexport function MAT_RADIO_DEFAULT_OPTIONS_FACTORY(): MatRadioDefaultOptions {\n  return {\n    color: 'accent'\n  };\n}\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n})\nexport class MatRadioGroup implements AfterContentInit, ControlValueAccessor {\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Theme color for all of the radio buttons in the group. */\n  @Input() color: ThemePalette;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) { }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n        radio._markForCheck();\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase:\n    CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n@Directive()\n// tslint:disable-next-line:class-name\nexport abstract class _MatRadioButtonBase extends _MatRadioButtonMixinBase implements OnInit,\n  AfterViewInit, OnDestroy, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._setDisabled(coerceBooleanProperty(value));\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /** Theme color of the radio button. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n      (this.radioGroup && this.radioGroup.color) ||\n      this._providerOverride && this._providerOverride.color || 'accent';\n  }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              protected _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n                @Optional() @Inject(MAT_RADIO_DEFAULT_OPTIONS)\n                private _providerOverride?: MatRadioDefaultOptions) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Sets the disabled state and marks for check if a change occurred. */\n  protected _setDisabled(value: boolean) {\n    if (this._disabled !== value) {\n      this._disabled = value;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-accent]': 'color === \"accent\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    // Needs to be -1 so the `focus` event still fires.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[attr.aria-describedby]': 'null',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonBase {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}