{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to generate unique ID for each accordion.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nvar nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n\nvar CdkAccordion = /*#__PURE__*/function () {\n  function CdkAccordion() {\n    _classCallCheck(this, CdkAccordion);\n\n    /**\n     * Emits when the state of the accordion changes\n     */\n    this._stateChanges = new Subject();\n    /**\n     * Stream that emits true/false when openAll/closeAll is triggered.\n     */\n\n    this._openCloseAllActions = new Subject();\n    /**\n     * A readonly id value to use for unique selection coordination.\n     */\n\n    this.id = \"cdk-accordion-\".concat(nextId++);\n    this._multi = false;\n  }\n  /**\n   * Whether the accordion should allow multiple expanded accordion items simultaneously.\n   * @return {?}\n   */\n\n\n  _createClass(CdkAccordion, [{\n    key: \"openAll\",\n\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    value: function openAll() {\n      this._openCloseAll(true);\n    }\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._openCloseAll(false);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._stateChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n    /**\n     * @private\n     * @param {?} expanded\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openCloseAll\",\n    value: function _openCloseAll(expanded) {\n      if (this.multi) {\n        this._openCloseAllActions.next(expanded);\n      }\n    }\n  }, {\n    key: \"multi\",\n    get: function get() {\n      return this._multi;\n    }\n    /**\n     * @param {?} multi\n     * @return {?}\n     */\n    ,\n    set: function set(multi) {\n      this._multi = coerceBooleanProperty(multi);\n    }\n  }]);\n\n  return CdkAccordion;\n}();\n\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) {\n  return new (t || CdkAccordion)();\n};\n\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordion,\n  selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n  inputs: {\n    multi: \"multi\"\n  },\n  exportAs: [\"cdkAccordion\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkAccordion.propDecorators = {\n  multi: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion, [cdkAccordion]',\n      exportAs: 'cdkAccordion'\n    }]\n  }], function () {\n    return [];\n  }, {\n    multi: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  CdkAccordion.ngAcceptInputType_multi;\n  /**\n   * Emits when the state of the accordion changes\n   * @type {?}\n   */\n\n  CdkAccordion.prototype._stateChanges;\n  /**\n   * Stream that emits true/false when openAll/closeAll is triggered.\n   * @type {?}\n   */\n\n  CdkAccordion.prototype._openCloseAllActions;\n  /**\n   * A readonly id value to use for unique selection coordination.\n   * @type {?}\n   */\n\n  CdkAccordion.prototype.id;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAccordion.prototype._multi;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to generate unique ID for each accordion item.\n * @type {?}\n */\n\n\nvar nextId$1 = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n\nvar CdkAccordionItem = /*#__PURE__*/function () {\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _expansionDispatcher\n   */\n  function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n    var _this = this;\n\n    _classCallCheck(this, CdkAccordionItem);\n\n    this.accordion = accordion;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._expansionDispatcher = _expansionDispatcher;\n    /**\n     * Subscription to openAll/closeAll events.\n     */\n\n    this._openCloseAllSubscription = Subscription.EMPTY;\n    /**\n     * Event emitted every time the AccordionItem is closed.\n     */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted every time the AccordionItem is opened.\n     */\n\n    this.opened = new EventEmitter();\n    /**\n     * Event emitted when the AccordionItem is destroyed.\n     */\n\n    this.destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * \\@docs-private\n     */\n\n    this.expandedChange = new EventEmitter();\n    /**\n     * The unique AccordionItem id.\n     */\n\n    this.id = \"cdk-accordion-child-\".concat(nextId$1++);\n    this._expanded = false;\n    this._disabled = false;\n    /**\n     * Unregister function for _expansionDispatcher.\n     */\n\n    this._removeUniqueSelectionListener =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(\n    /**\n    * @param {?} id\n    * @param {?} accordionId\n    * @return {?}\n    */\n    function (id, accordionId) {\n      if (_this.accordion && !_this.accordion.multi && _this.accordion.id === accordionId && _this.id !== id) {\n        _this.expanded = false;\n      }\n    }); // When an accordion item is hosted in an accordion, subscribe to open/close events.\n\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n  /**\n   * Whether the AccordionItem is expanded.\n   * @return {?}\n   */\n\n\n  _createClass(CdkAccordionItem, [{\n    key: \"ngOnDestroy\",\n\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    value: function ngOnDestroy() {\n      this.opened.complete();\n      this.closed.complete();\n      this.destroyed.emit();\n      this.destroyed.complete();\n\n      this._removeUniqueSelectionListener();\n\n      this._openCloseAllSubscription.unsubscribe();\n    }\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (!this.disabled) {\n        this.expanded = !this.expanded;\n      }\n    }\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.disabled) {\n        this.expanded = false;\n      }\n    }\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (!this.disabled) {\n        this.expanded = true;\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_subscribeToOpenCloseAllActions\",\n    value: function _subscribeToOpenCloseAllActions() {\n      var _this2 = this;\n\n      return this.accordion._openCloseAllActions.subscribe(\n      /**\n      * @param {?} expanded\n      * @return {?}\n      */\n      function (expanded) {\n        // Only change expanded state if item is enabled\n        if (!_this2.disabled) {\n          _this2.expanded = expanded;\n        }\n      });\n    }\n  }, {\n    key: \"expanded\",\n    get: function get() {\n      return this._expanded;\n    }\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    ,\n    set: function set(expanded) {\n      expanded = coerceBooleanProperty(expanded); // Only emit events and update the internal value if the value changes.\n\n      if (this._expanded !== expanded) {\n        this._expanded = expanded;\n        this.expandedChange.emit(expanded);\n\n        if (expanded) {\n          this.opened.emit();\n          /**\n           * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n           * the name value is the id of the accordion.\n           * @type {?}\n           */\n\n          var accordionId = this.accordion ? this.accordion.id : this.id;\n\n          this._expansionDispatcher.notify(this.id, accordionId);\n        } else {\n          this.closed.emit();\n        } // Ensures that the animation will run when the value is set outside of an `@Input`.\n        // This includes cases like the open, close and toggle methods.\n\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the AccordionItem is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    ,\n    set: function set(disabled) {\n      this._disabled = coerceBooleanProperty(disabled);\n    }\n  }]);\n\n  return CdkAccordionItem;\n}();\n\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) {\n  return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher));\n};\n\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordionItem,\n  selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n  inputs: {\n    expanded: \"expanded\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    closed: \"closed\",\n    opened: \"opened\",\n    destroyed: \"destroyed\",\n    expandedChange: \"expandedChange\"\n  },\n  exportAs: [\"cdkAccordionItem\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n  // to the same accordion.\n  {\n    provide: CdkAccordion,\n    useValue: ɵ0\n  }])]\n});\n/** @nocollapse */\n\nCdkAccordionItem.ctorParameters = function () {\n  return [{\n    type: CdkAccordion,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: UniqueSelectionDispatcher\n  }];\n};\n\nCdkAccordionItem.propDecorators = {\n  closed: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  expandedChange: [{\n    type: Output\n  }],\n  expanded: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion-item, [cdkAccordionItem]',\n      exportAs: 'cdkAccordionItem',\n      providers: [// Provide CdkAccordion as undefined to prevent nested accordion items from registering\n      // to the same accordion.\n      {\n        provide: CdkAccordion,\n        useValue: ɵ0\n      }]\n    }]\n  }], function () {\n    return [{\n      type: CdkAccordion,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.UniqueSelectionDispatcher\n    }];\n  }, {\n    closed: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    expandedChange: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  CdkAccordionItem.ngAcceptInputType_expanded;\n  /** @type {?} */\n\n  CdkAccordionItem.ngAcceptInputType_disabled;\n  /**\n   * Subscription to openAll/closeAll events.\n   * @type {?}\n   * @private\n   */\n\n  CdkAccordionItem.prototype._openCloseAllSubscription;\n  /**\n   * Event emitted every time the AccordionItem is closed.\n   * @type {?}\n   */\n\n  CdkAccordionItem.prototype.closed;\n  /**\n   * Event emitted every time the AccordionItem is opened.\n   * @type {?}\n   */\n\n  CdkAccordionItem.prototype.opened;\n  /**\n   * Event emitted when the AccordionItem is destroyed.\n   * @type {?}\n   */\n\n  CdkAccordionItem.prototype.destroyed;\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  CdkAccordionItem.prototype.expandedChange;\n  /**\n   * The unique AccordionItem id.\n   * @type {?}\n   */\n\n  CdkAccordionItem.prototype.id;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAccordionItem.prototype._expanded;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAccordionItem.prototype._disabled;\n  /**\n   * Unregister function for _expansionDispatcher.\n   * @type {?}\n   * @private\n   */\n\n  CdkAccordionItem.prototype._removeUniqueSelectionListener;\n  /** @type {?} */\n\n  CdkAccordionItem.prototype.accordion;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkAccordionItem.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  CdkAccordionItem.prototype._expansionDispatcher;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/accordion-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CdkAccordionModule = function CdkAccordionModule() {\n  _classCallCheck(this, CdkAccordionModule);\n};\n\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkAccordionModule\n});\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CdkAccordionModule_Factory(t) {\n    return new (t || CdkAccordionModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, {\n    declarations: [CdkAccordion, CdkAccordionItem],\n    exports: [CdkAccordion, CdkAccordionItem]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkAccordion, CdkAccordionItem],\n      declarations: [CdkAccordion, CdkAccordionItem]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/accordion/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };","map":{"version":3,"sources":["../../../../../cdk/accordion/accordion.ts","../../../../../cdk/accordion/accordion-item.ts","../../../../../cdk/accordion/accordion-module.ts","../../../../../cdk/accordion/index.ts"],"names":["nextId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n\n  static ngAcceptInputType_multi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n    // to the same accordion.\n    {provide: CdkAccordion, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}