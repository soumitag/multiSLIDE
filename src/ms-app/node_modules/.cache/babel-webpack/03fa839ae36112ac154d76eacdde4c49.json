{"ast":null,"code":"import _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { EventEmitter, isDevMode, Directive, Input, Output, Injectable, ɵɵdefineInjectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Inject, ElementRef, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinInitialized, mixinDisabled, AnimationDurations, AnimationCurves } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"mat-sort-header\", \"\"];\n\nfunction MatSortHeader_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._disableViewStateAnimation = true;\n    })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3._disableViewStateAnimation = false;\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6);\n    ɵngcc0.ɵɵelement(4, \"div\", 7);\n    ɵngcc0.ɵɵelement(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n  }\n}\n\nvar _c1 = [\"*\"];\n\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(\"Cannot have two MatSortables with the same id (\".concat(id, \").\"));\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderMissingIdError() {\n  return Error(\"MatSortHeader must be provided with a unique id.\");\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\n\n\nfunction getSortInvalidDirectionError(direction) {\n  return Error(\"\".concat(direction, \" is not a valid sort direction ('asc' or 'desc').\"));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Interface for a directive that holds sorting state consumed by `MatSortHeader`.\n * @record\n */\n\n\nfunction MatSortable() {}\n\nif (false) {\n  /**\n   * The id of the column being sorted.\n   * @type {?}\n   */\n  MatSortable.prototype.id;\n  /**\n   * Starting sort direction.\n   * @type {?}\n   */\n\n  MatSortable.prototype.start;\n  /**\n   * Whether to disable clearing the sorting state.\n   * @type {?}\n   */\n\n  MatSortable.prototype.disableClear;\n}\n/**\n * The current sort state.\n * @record\n */\n\n\nfunction Sort() {}\n\nif (false) {\n  /**\n   * The id of the column being sorted.\n   * @type {?}\n   */\n  Sort.prototype.active;\n  /**\n   * The sort direction.\n   * @type {?}\n   */\n\n  Sort.prototype.direction;\n} // Boilerplate for applying mixins to MatSort.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSortBase = function MatSortBase() {\n  _classCallCheck(this, MatSortBase);\n};\n/** @type {?} */\n\n\nvar _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\n\n\nvar MatSort = /*#__PURE__*/function (_MatSortMixinBase2) {\n  _inherits(MatSort, _MatSortMixinBase2);\n\n  var _super = _createSuper(MatSort);\n\n  function MatSort() {\n    var _this;\n\n    _classCallCheck(this, MatSort);\n\n    _this = _super.apply(this, arguments);\n    /**\n     * Collection of all registered sortables that this directive manages.\n     */\n\n    _this.sortables = new Map();\n    /**\n     * Used to notify any child components listening to state changes.\n     */\n\n    _this._stateChanges = new Subject();\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n\n    _this.start = 'asc';\n    _this._direction = '';\n    /**\n     * Event emitted when the user changes either the active sort or sort direction.\n     */\n\n    _this.sortChange = new EventEmitter();\n    return _this;\n  }\n  /**\n   * The sort direction of the currently active MatSortable.\n   * @return {?}\n   */\n\n\n  _createClass(MatSort, [{\n    key: \"register\",\n\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    value: function register(sortable) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n\n      this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(sortable) {\n      this.sortables.delete(sortable.id);\n    }\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortable) {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n\n      this.sortChange.emit({\n        active: this.active,\n        direction: this.direction\n      });\n    }\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNextSortDirection\",\n    value: function getNextSortDirection(sortable) {\n      if (!sortable) {\n        return '';\n      } // Get the sort direction cycle with the potential sortable overrides.\n\n      /** @type {?} */\n\n\n      var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n      /** @type {?} */\n\n      var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle\n\n      /** @type {?} */\n\n      var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n\n      if (nextDirectionIndex >= sortDirectionCycle.length) {\n        nextDirectionIndex = 0;\n      }\n\n      return sortDirectionCycle[nextDirectionIndex];\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._markInitialized();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }, {\n    key: \"direction\",\n    get: function get() {\n      return this._direction;\n    }\n    /**\n     * @param {?} direction\n     * @return {?}\n     */\n    ,\n    set: function set(direction) {\n      if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n        throw getSortInvalidDirectionError(direction);\n      }\n\n      this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disableClear\",\n    get: function get() {\n      return this._disableClear;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n  }]);\n\n  return MatSort;\n}(_MatSortMixinBase);\n\nMatSort.ɵfac = function MatSort_Factory(t) {\n  return ɵMatSort_BaseFactory(t || MatSort);\n};\n\nMatSort.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSort,\n  selectors: [[\"\", \"matSort\", \"\"]],\n  hostAttrs: [1, \"mat-sort\"],\n  inputs: {\n    disabled: [\"matSortDisabled\", \"disabled\"],\n    start: [\"matSortStart\", \"start\"],\n    direction: [\"matSortDirection\", \"direction\"],\n    disableClear: [\"matSortDisableClear\", \"disableClear\"],\n    active: [\"matSortActive\", \"active\"]\n  },\n  outputs: {\n    sortChange: \"matSortChange\"\n  },\n  exportAs: [\"matSort\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\nMatSort.propDecorators = {\n  active: [{\n    type: Input,\n    args: ['matSortActive']\n  }],\n  start: [{\n    type: Input,\n    args: ['matSortStart']\n  }],\n  direction: [{\n    type: Input,\n    args: ['matSortDirection']\n  }],\n  disableClear: [{\n    type: Input,\n    args: ['matSortDisableClear']\n  }],\n  sortChange: [{\n    type: Output,\n    args: ['matSortChange']\n  }]\n};\nvar ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSort, [{\n    type: Directive,\n    args: [{\n      selector: '[matSort]',\n      exportAs: 'matSort',\n      host: {\n        'class': 'mat-sort'\n      },\n      inputs: ['disabled: matSortDisabled']\n    }]\n  }], null, {\n    start: [{\n      type: Input,\n      args: ['matSortStart']\n    }],\n    sortChange: [{\n      type: Output,\n      args: ['matSortChange']\n    }],\n    direction: [{\n      type: Input,\n      args: ['matSortDirection']\n    }],\n    disableClear: [{\n      type: Input,\n      args: ['matSortDisableClear']\n    }],\n    active: [{\n      type: Input,\n      args: ['matSortActive']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSort.ngAcceptInputType_disableClear;\n  /** @type {?} */\n\n  MatSort.ngAcceptInputType_disabled;\n  /**\n   * Collection of all registered sortables that this directive manages.\n   * @type {?}\n   */\n\n  MatSort.prototype.sortables;\n  /**\n   * Used to notify any child components listening to state changes.\n   * @type {?}\n   */\n\n  MatSort.prototype._stateChanges;\n  /**\n   * The id of the most recently sorted MatSortable.\n   * @type {?}\n   */\n\n  MatSort.prototype.active;\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   * @type {?}\n   */\n\n  MatSort.prototype.start;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSort.prototype._direction;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSort.prototype._disableClear;\n  /**\n   * Event emitted when the user changes either the active sort or sort direction.\n   * @type {?}\n   */\n\n  MatSort.prototype.sortChange;\n}\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\n\n\nfunction getSortDirectionCycle(start, disableClear) {\n  /** @type {?} */\n  var sortOrder = ['asc', 'desc'];\n\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\n\nvar matSortAnimations = {\n  /**\n   * Animation that moves the sort indicator.\n   */\n  indicator: trigger('indicator', [state('active-asc, asc', style({\n    transform: 'translateY(0px)'\n  })), // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', style({\n    transform: 'translateY(10px)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that rotates the left pointer of the indicator based on the sorting direction.\n   */\n  leftPointer: trigger('leftPointer', [state('active-asc, asc', style({\n    transform: 'rotate(-45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that rotates the right pointer of the indicator based on the sorting direction.\n   */\n  rightPointer: trigger('rightPointer', [state('active-asc, asc', style({\n    transform: 'rotate(45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(-45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that controls the arrow opacity.\n   */\n  arrowOpacity: trigger('arrowOpacity', [state('desc-to-active, asc-to-active, active', style({\n    opacity: 1\n  })), state('desc-to-hint, asc-to-hint, hint', style({\n    opacity: .54\n  })), state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({\n    opacity: 0\n  })), // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')), transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [// Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(-25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(25%)'\n  })]))), // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(-25%)'\n  })]))), state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({\n    transform: 'translateY(0)'\n  })), state('hint-to-desc, active-to-desc, desc', style({\n    transform: 'translateY(-25%)'\n  })), state('hint-to-asc, active-to-asc, asc', style({\n    transform: 'translateY(25%)'\n  }))]),\n\n  /**\n   * Necessary trigger that calls animate on children animations.\n   */\n  allowChildren: trigger('allowChildren', [transition('* <=> *', [query('@*', animateChild(), {\n    optional: true\n  })])])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-header-intl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n\nvar MatSortHeaderIntl = function MatSortHeaderIntl() {\n  _classCallCheck(this, MatSortHeaderIntl);\n\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  this.changes = new Subject();\n  /**\n   * ARIA label for the sorting button.\n   */\n\n  this.sortButtonLabel =\n  /**\n  * @param {?} id\n  * @return {?}\n  */\n  function (id) {\n    return \"Change sorting for \".concat(id);\n  };\n};\n\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {\n  return new (t || MatSortHeaderIntl)();\n};\n/** @nocollapse */\n\n\nMatSortHeaderIntl.ɵprov = ɵɵdefineInjectable({\n  factory: function MatSortHeaderIntl_Factory() {\n    return new MatSortHeaderIntl();\n  },\n  token: MatSortHeaderIntl,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   * @type {?}\n   */\n  MatSortHeaderIntl.prototype.changes;\n  /**\n   * ARIA label for the sorting button.\n   * @type {?}\n   */\n\n  MatSortHeaderIntl.prototype.sortButtonLabel;\n}\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\n\n\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n\n/**\n * \\@docs-private\n */\n\nvar MatSortHeaderBase = function MatSortHeaderBase() {\n  _classCallCheck(this, MatSortHeaderBase);\n};\n/** @type {?} */\n\n\nvar _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * \\@docs-private\n * @record\n */\n\n\nfunction ArrowViewStateTransition() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  ArrowViewStateTransition.prototype.fromState;\n  /** @type {?} */\n\n  ArrowViewStateTransition.prototype.toState;\n}\n/**\n * Column definition associated with a `MatSortHeader`.\n * @record\n */\n\n\nfunction MatSortHeaderColumnDef() {}\n\nif (false) {\n  /** @type {?} */\n  MatSortHeaderColumnDef.prototype.name;\n}\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n\n\nvar MatSortHeader = /*#__PURE__*/function (_MatSortHeaderMixinBa) {\n  _inherits(MatSortHeader, _MatSortHeaderMixinBa);\n\n  var _super2 = _createSuper(MatSortHeader);\n\n  /**\n   * @param {?} _intl\n   * @param {?} changeDetectorRef\n   * @param {?} _sort\n   * @param {?} _columnDef\n   * @param {?=} _focusMonitor\n   * @param {?=} _elementRef\n   */\n  function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef, _focusMonitor, _elementRef) {\n    var _this2;\n\n    _classCallCheck(this, MatSortHeader);\n\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    _this2 = _super2.call(this);\n    _this2._intl = _intl;\n    _this2._sort = _sort;\n    _this2._columnDef = _columnDef;\n    _this2._focusMonitor = _focusMonitor;\n    _this2._elementRef = _elementRef;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n\n    _this2._showIndicatorHint = false;\n    /**\n     * The direction the arrow should be facing according to the current state.\n     */\n\n    _this2._arrowDirection = '';\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n\n    _this2._disableViewStateAnimation = false;\n    /**\n     * Sets the position of the arrow that displays when sorted.\n     */\n\n    _this2.arrowPosition = 'after';\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    _this2._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes).subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      if (_this2._isSorted()) {\n        _this2._updateArrowDirection();\n      } // If this header was recently active and now no longer sorted, animate away the arrow.\n\n\n      if (!_this2._isSorted() && _this2._viewState && _this2._viewState.toState === 'active') {\n        _this2._disableViewStateAnimation = false;\n\n        _this2._setAnimationTransitionState({\n          fromState: 'active',\n          toState: _this2._arrowDirection\n        });\n      }\n\n      changeDetectorRef.markForCheck();\n    });\n\n    if (_focusMonitor && _elementRef) {\n      // We use the focus monitor because we also want to style\n      // things differently based on the focus origin.\n      _focusMonitor.monitor(_elementRef, true).subscribe(\n      /**\n      * @param {?} origin\n      * @return {?}\n      */\n      function (origin) {\n        return _this2._setIndicatorHintVisible(!!origin);\n      });\n    }\n\n    return _this2;\n  }\n  /**\n   * Overrides the disable clear value of the containing MatSort for this MatSortable.\n   * @return {?}\n   */\n\n\n  _createClass(MatSortHeader, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      if (!this.id && this._columnDef) {\n        this.id = this._columnDef.name;\n      } // Initialize the direction of the arrow and set the view state to be immediately that state.\n\n\n      this._updateArrowDirection();\n\n      this._setAnimationTransitionState({\n        toState: this._isSorted() ? 'active' : this._arrowDirection\n      });\n\n      this._sort.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // @breaking-change 10.0.0 Remove null check for _focusMonitor and _elementRef.\n      if (this._focusMonitor && this._elementRef) {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n      }\n\n      this._sort.deregister(this);\n\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setIndicatorHintVisible\",\n    value: function _setIndicatorHintVisible(visible) {\n      // No-op if the sort header is disabled - should not make the hint visible.\n      if (this._isDisabled() && visible) {\n        return;\n      }\n\n      this._showIndicatorHint = visible;\n\n      if (!this._isSorted()) {\n        this._updateArrowDirection();\n\n        if (this._showIndicatorHint) {\n          this._setAnimationTransitionState({\n            fromState: this._arrowDirection,\n            toState: 'hint'\n          });\n        } else {\n          this._setAnimationTransitionState({\n            fromState: 'hint',\n            toState: this._arrowDirection\n          });\n        }\n      }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setAnimationTransitionState\",\n    value: function _setAnimationTransitionState(viewState) {\n      this._viewState = viewState; // If the animation for arrow position state (opacity/translation) should be disabled,\n      // remove the fromState so that it jumps right to the toState.\n\n      if (this._disableViewStateAnimation) {\n        this._viewState = {\n          toState: viewState.toState\n        };\n      }\n    }\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (this._isDisabled()) {\n        return;\n      }\n\n      this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.\n\n\n      if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = true;\n      } // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n      // the direction it is facing.\n\n      /** @type {?} */\n\n\n      var viewState = this._isSorted() ? {\n        fromState: this._arrowDirection,\n        toState: 'active'\n      } : {\n        fromState: 'active',\n        toState: this._arrowDirection\n      };\n\n      this._setAnimationTransitionState(viewState);\n\n      this._showIndicatorHint = false;\n    }\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSorted\",\n    value: function _isSorted() {\n      return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getArrowDirectionState\",\n    value: function _getArrowDirectionState() {\n      return \"\".concat(this._isSorted() ? 'active-' : '').concat(this._arrowDirection);\n    }\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getArrowViewState\",\n    value: function _getArrowViewState() {\n      /** @type {?} */\n      var fromState = this._viewState.fromState;\n      return (fromState ? \"\".concat(fromState, \"-to-\") : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateArrowDirection\",\n    value: function _updateArrowDirection() {\n      this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isDisabled\",\n    value: function _isDisabled() {\n      return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getAriaSortAttribute\",\n    value: function _getAriaSortAttribute() {\n      if (!this._isSorted()) {\n        return null;\n      }\n\n      return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_renderArrow\",\n    value: function _renderArrow() {\n      return !this._isDisabled() || this._isSorted();\n    }\n  }, {\n    key: \"disableClear\",\n    get: function get() {\n      return this._disableClear;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._disableClear = coerceBooleanProperty(v);\n    }\n  }]);\n\n  return MatSortHeader;\n}(_MatSortHeaderMixinBase);\n\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) {\n  return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatSortHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSortHeader,\n  selectors: [[\"\", \"mat-sort-header\", \"\"]],\n  hostAttrs: [1, \"mat-sort-header\"],\n  hostVars: 3,\n  hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n        return ctx._handleClick();\n      })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(true);\n      })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(false);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n      ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    arrowPosition: \"arrowPosition\",\n    disableClear: \"disableClear\",\n    id: [\"mat-sort-header\", \"id\"],\n    start: \"start\"\n  },\n  exportAs: [\"matSortHeader\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 7,\n  consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", \"mat-focus-indicator\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n  template: function MatSortHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    }\n  },\n  directives: [ɵngcc2.NgIf],\n  styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor;position:relative}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSortHeader.ctorParameters = function () {\n  return [{\n    type: MatSortHeaderIntl\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatSort,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: ['MAT_SORT_HEADER_COLUMN_DEF']\n    }, {\n      type: Optional\n    }]\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ElementRef\n  }];\n};\n\nMatSortHeader.propDecorators = {\n  id: [{\n    type: Input,\n    args: ['mat-sort-header']\n  }],\n  arrowPosition: [{\n    type: Input\n  }],\n  start: [{\n    type: Input\n  }],\n  disableClear: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSortHeader, [{\n    type: Component,\n    args: [{\n      selector: '[mat-sort-header]',\n      exportAs: 'matSortHeader',\n      template: \"<div class=\\\"mat-sort-header-container\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\">\\n  <button class=\\\"mat-sort-header-button mat-focus-indicator\\\" type=\\\"button\\\"\\n          [attr.disabled]=\\\"_isDisabled() || null\\\"\\n          [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\">\\n    <ng-content></ng-content>\\n  </button>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      host: {\n        'class': 'mat-sort-header',\n        '(click)': '_handleClick()',\n        '(mouseenter)': '_setIndicatorHintVisible(true)',\n        '(mouseleave)': '_setIndicatorHintVisible(false)',\n        '[attr.aria-sort]': '_getAriaSortAttribute()',\n        '[class.mat-sort-header-disabled]': '_isDisabled()'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled'],\n      animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren],\n      styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor;position:relative}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-button,[mat-sort-header].cdk-program-focused .mat-sort-header-button{border-bottom:solid 1px currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSortHeaderIntl\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSort,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, {\n    arrowPosition: [{\n      type: Input\n    }],\n    disableClear: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mat-sort-header']\n    }],\n    start: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSortHeader.ngAcceptInputType_disableClear;\n  /** @type {?} */\n\n  MatSortHeader.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._rerenderSubscription;\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._showIndicatorHint;\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._viewState;\n  /**\n   * The direction the arrow should be facing according to the current state.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._arrowDirection;\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype._disableViewStateAnimation;\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype.id;\n  /**\n   * Sets the position of the arrow that displays when sorted.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype.arrowPosition;\n  /**\n   * Overrides the sort start value of the containing MatSort for this MatSortable.\n   * @type {?}\n   */\n\n  MatSortHeader.prototype.start;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._disableClear;\n  /** @type {?} */\n\n  MatSortHeader.prototype._intl;\n  /** @type {?} */\n\n  MatSortHeader.prototype._sort;\n  /** @type {?} */\n\n  MatSortHeader.prototype._columnDef;\n  /**\n   * @deprecated _focusMonitor and _elementRef to become required parameters.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSortHeader.prototype._elementRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSortModule = function MatSortModule() {\n  _classCallCheck(this, MatSortModule);\n};\n\nMatSortModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSortModule\n});\nMatSortModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSortModule_Factory(t) {\n    return new (t || MatSortModule)();\n  },\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, {\n    declarations: function declarations() {\n      return [MatSort, MatSortHeader];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [MatSort, MatSortHeader];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSortModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [MatSort, MatSortHeader],\n      declarations: [MatSort, MatSortHeader],\n      providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/sort-direction.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sort/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };","map":{"version":3,"sources":["../../../../../material/sort/sort-errors.ts","../../../../../material/sort/sort.ts","../../../../../material/sort/sort-animations.ts","../../../../../material/sort/sort-header-intl.ts","../../../../../material/sort/sort-header.ts","../../../../../material/sort/sort-module.ts","../../../../../material/sort/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nclass MatSortBase {}\nconst _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  host: {'class': 'mat-sort'},\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableClear: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n  ElementRef,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nclass MatSortHeaderBase {}\nconst _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    'class': 'mat-sort-header',\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef,\n              /**\n               * @deprecated _focusMonitor and _elementRef to become required parameters.\n               * @breaking-change 10.0.0\n               */\n              private _focusMonitor?: FocusMonitor,\n              private _elementRef?: ElementRef<HTMLElement>) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n\n    if (_focusMonitor && _elementRef) {\n      // We use the focus monitor because we also want to style\n      // things differently based on the focus origin.\n      _focusMonitor.monitor(_elementRef, true)\n          .subscribe(origin => this._setIndicatorHintVisible(!!origin));\n    }\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    // @breaking-change 10.0.0 Remove null check for _focusMonitor and _elementRef.\n    if (this._focusMonitor && this._elementRef) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n\n  /** Whether the arrow inside the sort header should be rendered. */\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  static ngAcceptInputType_disableClear: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}