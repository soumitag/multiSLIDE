{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Injectable, Optional, Inject, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/platform.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nvar hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' &&\n  /** @type {?} */\n  Intl.v8BreakIterator;\n} catch (_a) {\n  hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n\n\nvar Platform =\n/**\n * \\@breaking-change 8.0.0 remove optional decorator\n * @param {?=} _platformId\n */\nfunction Platform(_platformId) {\n  _classCallCheck(this, Platform);\n\n  this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n\n  /**\n   * Whether the Angular application is being rendered in the browser.\n   */\n\n  this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n  /**\n   * Whether the current browser is Microsoft Edge.\n   */\n\n  this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  /**\n   * Whether the current rendering engine is Microsoft Trident.\n   */\n\n  this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n\n  /**\n   * Whether the current rendering engine is Blink.\n   */\n\n  this.BLINK = this.isBrowser && !!(\n  /** @type {?} */\n  window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n\n  /**\n   * Whether the current rendering engine is WebKit.\n   */\n\n  this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n  /**\n   * Whether the current platform is Apple iOS.\n   */\n\n  this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n\n  /**\n   * Whether the current browser is Firefox.\n   */\n\n  this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n  /**\n   * Whether the current platform is Android.\n   */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n\n  this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n\n  /**\n   * Whether the current browser is Safari.\n   */\n\n  this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n};\n\nPlatform.ɵfac = function Platform_Factory(t) {\n  return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID, 8));\n};\n/** @nocollapse */\n\n\nPlatform.ctorParameters = function () {\n  return [{\n    type: Object,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nPlatform.ɵprov = ɵɵdefineInjectable({\n  factory: function Platform_Factory() {\n    return new Platform(ɵɵinject(PLATFORM_ID, 8));\n  },\n  token: Platform,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Platform, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Whether the Angular application is being rendered in the browser.\n   * @type {?}\n   */\n  Platform.prototype.isBrowser;\n  /**\n   * Whether the current browser is Microsoft Edge.\n   * @type {?}\n   */\n\n  Platform.prototype.EDGE;\n  /**\n   * Whether the current rendering engine is Microsoft Trident.\n   * @type {?}\n   */\n\n  Platform.prototype.TRIDENT;\n  /**\n   * Whether the current rendering engine is Blink.\n   * @type {?}\n   */\n\n  Platform.prototype.BLINK;\n  /**\n   * Whether the current rendering engine is WebKit.\n   * @type {?}\n   */\n\n  Platform.prototype.WEBKIT;\n  /**\n   * Whether the current platform is Apple iOS.\n   * @type {?}\n   */\n\n  Platform.prototype.IOS;\n  /**\n   * Whether the current browser is Firefox.\n   * @type {?}\n   */\n\n  Platform.prototype.FIREFOX;\n  /**\n   * Whether the current platform is Android.\n   * @type {?}\n   */\n\n  Platform.prototype.ANDROID;\n  /**\n   * Whether the current browser is Safari.\n   * @type {?}\n   */\n\n  Platform.prototype.SAFARI;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Platform.prototype._platformId;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/platform-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar PlatformModule = function PlatformModule() {\n  _classCallCheck(this, PlatformModule);\n};\n\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PlatformModule\n});\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PlatformModule_Factory(t) {\n    return new (t || PlatformModule)();\n  }\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/input-types.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cached result Set of input types support by the current browser.\n * @type {?}\n */\n\n\nvar supportedInputTypes;\n/**\n * Types of `<input>` that *might* be supported.\n * @type {?}\n */\n\nvar candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/**\n * @return {?} The input types supported by this browser.\n */\n\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  } // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n\n\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n  /** @type {?} */\n\n\n  var featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/passive-listeners.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Cached result of whether the user's browser supports passive event listeners.\n * @type {?}\n */\n\n\nvar supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n * @return {?}\n */\n\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test',\n      /** @type {?} */\n      null, Object.defineProperty({}, 'passive', {\n        get:\n        /**\n        * @return {?}\n        */\n        function get() {\n          return supportsPassiveEvents = true;\n        }\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param {?} options Object to be normalized.\n * @return {?}\n */\n\n\nfunction normalizePassiveListenerOptions(options) {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/scrolling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @enum {number} */\n\n\nvar RtlScrollAxisType = {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL: 0,\n\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED: 1,\n\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED: 2\n};\n/**\n * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.\n * @type {?}\n */\n\nvar rtlScrollAxisType;\n/**\n * Check whether the browser supports scroll behaviors.\n * @return {?}\n */\n\nfunction supportsScrollBehavior() {\n  return !!(typeof document == 'object' && 'scrollBehavior' in\n  /** @type {?} */\n  document.documentElement.style);\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n * @return {?}\n */\n\n\nfunction getRtlScrollAxisType() {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return 0\n    /* NORMAL */\n    ;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n\n    /** @type {?} */\n    var scrollContainer = document.createElement('div');\n    /** @type {?} */\n\n    var containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.height = '1px';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n    /** @type {?} */\n\n    var content = document.createElement('div');\n    /** @type {?} */\n\n    var contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n    rtlScrollAxisType = 0\n    /* NORMAL */\n    ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1\n      /* NEGATED */\n      : 2\n      /* INVERTED */\n      ;\n    }\n\n    /** @type {?} */\n    scrollContainer.parentNode.removeChild(scrollContainer);\n  }\n\n  return rtlScrollAxisType;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/shadow-dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @type {?} */\n\n\nvar shadowDomIsSupported;\n/**\n * Checks whether the user's browser support Shadow DOM.\n * @return {?}\n */\n\nfunction _supportsShadowDom() {\n  if (shadowDomIsSupported == null) {\n    /** @type {?} */\n    var head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && (\n    /** @type {?} */\n    head.createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @return {?}\n */\n\n\nfunction _getShadowRoot(element) {\n  if (_supportsShadowDom()) {\n    /** @type {?} */\n    var rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };","map":{"version":3,"sources":["../../../../../cdk/platform/platform.ts","../../../../../cdk/platform/platform-module.ts","../../../../../cdk/platform/features/input-types.ts","../../../../../cdk/platform/features/passive-listeners.ts","../../../../../cdk/platform/features/scrolling.ts","../../../../../cdk/platform/features/shadow-dom.ts","../../../../../cdk/platform/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional, PLATFORM_ID} from '@angular/core';\nimport {isPlatformBrowser} from '@angular/common';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nlet hasV8BreakIterator: boolean;\n\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n  hasV8BreakIterator = (typeof Intl !== 'undefined' && (Intl as any).v8BreakIterator);\n} catch {\n  hasV8BreakIterator = false;\n}\n\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\n@Injectable({providedIn: 'root'})\nexport class Platform {\n  // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n  /** Whether the Angular application is being rendered in the browser. */\n  isBrowser: boolean = this._platformId ?\n      isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n\n  /** Whether the current browser is Microsoft Edge. */\n  EDGE: boolean = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n\n  /** Whether the current rendering engine is Microsoft Trident. */\n  TRIDENT: boolean = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  /** Whether the current rendering engine is Blink. */\n  BLINK: boolean = this.isBrowser && (!!((window as any).chrome || hasV8BreakIterator) &&\n      typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  /** Whether the current rendering engine is WebKit. */\n  WEBKIT: boolean = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n\n  /** Whether the current platform is Apple iOS. */\n  IOS: boolean = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n      !('MSStream' in window);\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  /** Whether the current browser is Firefox. */\n  FIREFOX: boolean = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID: boolean = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  /** Whether the current browser is Safari. */\n  SAFARI: boolean = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n\n  /**\n   * @breaking-change 8.0.0 remove optional decorator\n   */\n  constructor(@Optional() @Inject(PLATFORM_ID) private _platformId?: Object) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\n\n@NgModule({})\nexport class PlatformModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result Set of input types support by the current browser. */\nlet supportedInputTypes: Set<string>;\n\n/** Types of `<input>` that *might* be supported. */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n\n/** @returns The input types supported by this browser. */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\nlet supportsPassiveEvents: boolean;\n\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n */\nexport function supportsPassiveEventListeners(): boolean {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null!, Object.defineProperty({}, 'passive', {\n        get: () => supportsPassiveEvents = true\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param options Object to be normalized.\n */\nexport function normalizePassiveListenerOptions(options: AddEventListenerOptions):\n  AddEventListenerOptions | boolean {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The possible ways the browser may handle the horizontal scroll axis in RTL languages. */\nexport const enum RtlScrollAxisType {\n  /**\n   * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n   * all the way right.\n   */\n  NORMAL,\n  /**\n   * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  NEGATED,\n  /**\n   * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n   * all the way right.\n   */\n  INVERTED\n}\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\nlet rtlScrollAxisType: RtlScrollAxisType|undefined;\n\n/** Check whether the browser supports scroll behaviors. */\nexport function supportsScrollBehavior(): boolean {\n  return !!(typeof document == 'object' && 'scrollBehavior' in document.documentElement!.style);\n}\n\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n */\nexport function getRtlScrollAxisType(): RtlScrollAxisType {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return RtlScrollAxisType.NORMAL;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    const scrollContainer = document.createElement('div');\n    const containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.height = '1px';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n\n    const content = document.createElement('div');\n    const contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n\n    rtlScrollAxisType = RtlScrollAxisType.NORMAL;\n\n    // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType =\n          scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;\n    }\n\n    scrollContainer.parentNode!.removeChild(scrollContainer);\n  }\n  return rtlScrollAxisType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nlet shadowDomIsSupported: boolean;\n\n/** Checks whether the user's browser support Shadow DOM. */\nexport function _supportsShadowDom(): boolean {\n  if (shadowDomIsSupported == null) {\n    const head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && ((head as any).createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\nexport function _getShadowRoot(element: HTMLElement): Node | null {\n  if (_supportsShadowDom()) {\n    const rootNode = element.getRootNode ? element.getRootNode() : null;\n\n    // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}