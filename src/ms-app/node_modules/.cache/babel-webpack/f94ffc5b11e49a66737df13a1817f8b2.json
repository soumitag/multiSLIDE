{"ast":null,"code":"import _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, Inject, NgZone, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/slider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\nvar _c0 = [\"sliderWrapper\"];\nvar activeEventOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n * @type {?}\n */\n\nvar MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n * @type {?}\n */\n\nvar DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n * @type {?}\n */\n\nvar MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n * @type {?}\n */\n\nvar MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_SLIDER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatSlider;\n  }),\n  multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\n\nvar MatSliderChange = function MatSliderChange() {\n  _classCallCheck(this, MatSliderChange);\n};\n\nif (false) {\n  /**\n   * The MatSlider that changed.\n   * @type {?}\n   */\n  MatSliderChange.prototype.source;\n  /**\n   * The new value of the source slider.\n   * @type {?}\n   */\n\n  MatSliderChange.prototype.value;\n} // Boilerplate for applying mixins to MatSlider.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSliderBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatSliderBase(_elementRef) {\n  _classCallCheck(this, MatSliderBase);\n\n  this._elementRef = _elementRef;\n};\n\nif (false) {\n  /** @type {?} */\n  MatSliderBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nvar _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n\n\nvar MatSlider = /*#__PURE__*/function (_MatSliderMixinBase2) {\n  _inherits(MatSlider, _MatSliderMixinBase2);\n\n  var _super = _createSuper(MatSlider);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} tabIndex\n   * @param {?=} _animationMode\n   * @param {?=} _ngZone\n   * @param {?=} document\n   */\n  function MatSlider(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode, _ngZone,\n  /** @breaking-change 11.0.0 make document required */\n  document) {\n    var _this;\n\n    _classCallCheck(this, MatSlider);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._dir = _dir;\n    _this._animationMode = _animationMode;\n    _this._ngZone = _ngZone;\n    _this._invert = false;\n    _this._max = 100;\n    _this._min = 0;\n    _this._step = 1;\n    _this._thumbLabel = false;\n    _this._tickInterval = 0;\n    _this._value = null;\n    _this._vertical = false;\n    /**\n     * Event emitted when the slider value has changed.\n     */\n\n    _this.change = new EventEmitter();\n    /**\n     * Event emitted when the slider thumb moves.\n     */\n\n    _this.input = new EventEmitter();\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     */\n\n    _this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    _this._percent = 0;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n\n    _this._isSliding = false;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n\n    _this._isActive = false;\n    /**\n     * The size of a tick interval as a percentage of the size of the track.\n     */\n\n    _this._tickIntervalPercent = 0;\n    /**\n     * The dimensions of the slider.\n     */\n\n    _this._sliderDimensions = null;\n\n    _this._controlValueAccessorChangeFn =\n    /**\n    * @return {?}\n    */\n    function () {};\n    /**\n     * Subscription to the Directionality change EventEmitter.\n     */\n\n\n    _this._dirChangeSubscription = Subscription.EMPTY;\n    /**\n     * Called when the user has put their pointer down on the slider.\n     */\n\n    _this._pointerDown =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      // Don't do anything if the slider is disabled or the\n      // user is using anything other than the main mouse button.\n      if (_this.disabled || _this._isSliding || !isTouchEvent(event) && event.button !== 0) {\n        return;\n      }\n\n      _this._runInsideZone(\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        var oldValue = _this.value;\n        /** @type {?} */\n\n        var pointerPosition = getPointerPositionOnPage(event);\n        _this._isSliding = true;\n        _this._lastPointerEvent = event;\n        event.preventDefault();\n\n        _this._focusHostElement();\n\n        _this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n\n\n        _this._bindGlobalEvents(event);\n\n        _this._focusHostElement();\n\n        _this._updateValueFromPosition(pointerPosition);\n\n        _this._valueOnSlideStart = _this.value;\n        _this._pointerPositionOnStart = pointerPosition; // Emit a change and input event if the value changed.\n\n        if (oldValue != _this.value) {\n          _this._emitInputEvent();\n\n          _this._emitChangeEvent();\n        }\n      });\n    };\n    /**\n     * Called when the user has moved their pointer after\n     * starting to drag. Bound on the document level.\n     */\n\n\n    _this._pointerMove =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      if (_this._isSliding) {\n        // Prevent the slide from selecting anything else.\n        event.preventDefault();\n        /** @type {?} */\n\n        var oldValue = _this.value;\n        _this._lastPointerEvent = event;\n\n        _this._updateValueFromPosition(getPointerPositionOnPage(event)); // Native range elements always emit `input` events when the value changed while sliding.\n\n\n        if (oldValue != _this.value) {\n          _this._emitInputEvent();\n        }\n      }\n    };\n    /**\n     * Called when the user has lifted their pointer. Bound on the document level.\n     */\n\n\n    _this._pointerUp =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      if (_this._isSliding) {\n        /** @type {?} */\n        var pointerPositionOnStart = _this._pointerPositionOnStart;\n        /** @type {?} */\n\n        var currentPointerPosition = getPointerPositionOnPage(event);\n        event.preventDefault();\n\n        _this._removeGlobalEvents();\n\n        _this._valueOnSlideStart = _this._pointerPositionOnStart = _this._lastPointerEvent = null;\n        _this._isSliding = false;\n\n        if (_this._valueOnSlideStart != _this.value && !_this.disabled && pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x || pointerPositionOnStart.y !== currentPointerPosition.y)) {\n          _this._emitChangeEvent();\n        }\n      }\n    };\n    /**\n     * Called when the window has lost focus.\n     */\n\n\n    _this._windowBlur =\n    /**\n    * @return {?}\n    */\n    function () {\n      // If the window is blurred while dragging we need to stop dragging because the\n      // browser won't dispatch the `mouseup` and `touchend` events anymore.\n      if (_this._lastPointerEvent) {\n        _this._pointerUp(_this._lastPointerEvent);\n      }\n    };\n\n    _this._document = document;\n    _this.tabIndex = parseInt(tabIndex) || 0;\n\n    _this._runOutsizeZone(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      var element = elementRef.nativeElement;\n      element.addEventListener('mousedown', _this._pointerDown, activeEventOptions);\n      element.addEventListener('touchstart', _this._pointerDown, activeEventOptions);\n    });\n\n    return _this;\n  }\n  /**\n   * Whether the slider is inverted.\n   * @return {?}\n   */\n\n\n  _createClass(MatSlider, [{\n    key: \"focus\",\n\n    /**\n     * set focus to the host element\n     * @param {?=} options\n     * @return {?}\n     */\n    value: function focus(options) {\n      this._focusHostElement(options);\n    }\n    /**\n     * blur the host element\n     * @return {?}\n     */\n\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this._blurHostElement();\n    }\n    /**\n     * The percentage of the slider that coincides with the value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldInvertMouseCoords\",\n\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     * @return {?}\n     */\n    value: function _shouldInvertMouseCoords() {\n      return this._getDirection() == 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n    }\n    /**\n     * The language direction for this slider element.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDirection\",\n    value: function _getDirection() {\n      return this._dir && this._dir.value == 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(\n      /**\n      * @param {?} origin\n      * @return {?}\n      */\n      function (origin) {\n        _this2._isActive = !!origin && origin !== 'keyboard';\n\n        _this2._changeDetectorRef.detectChanges();\n      });\n\n      if (this._dir) {\n        this._dirChangeSubscription = this._dir.change.subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /** @type {?} */\n      var element = this._elementRef.nativeElement;\n      element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n      this._lastPointerEvent = null;\n\n      this._removeGlobalEvents();\n\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._dirChangeSubscription.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onMouseenter\",\n    value: function _onMouseenter() {\n      if (this.disabled) {\n        return;\n      } // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n\n\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      // We save the dimensions of the slider here so we can use them to update the spacing of the\n      // ticks and determine where on the slider click and slide events happen.\n      this._sliderDimensions = this._getSliderDimensions();\n\n      this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this.onTouched();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      if (this.disabled || hasModifierKey(event)) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var oldValue = this.value;\n\n      switch (event.keyCode) {\n        case PAGE_UP:\n          this._increment(10);\n\n          break;\n\n        case PAGE_DOWN:\n          this._increment(-10);\n\n          break;\n\n        case END:\n          this.value = this.max;\n          break;\n\n        case HOME:\n          this.value = this.min;\n          break;\n\n        case LEFT_ARROW:\n          // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n          // inverted slider the thumb moves in that direction. However for a blind user, nothing\n          // about the slider indicates that it is inverted. They will expect left to be decrement,\n          // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n          // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n          // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n          // sighted users, therefore we do not swap the meaning.\n          this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n\n          break;\n\n        case UP_ARROW:\n          this._increment(1);\n\n          break;\n\n        case RIGHT_ARROW:\n          // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n          this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n\n          break;\n\n        case DOWN_ARROW:\n          this._increment(-1);\n\n          break;\n\n        default:\n          // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n          // it.\n          return;\n      }\n\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n\n        this._emitChangeEvent();\n      }\n\n      this._isSliding = true;\n      event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeyup\",\n    value: function _onKeyup() {\n      this._isSliding = false;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var _a;\n\n      return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     * @private\n     * @param {?} triggerEvent\n     * @return {?}\n     */\n\n  }, {\n    key: \"_bindGlobalEvents\",\n    value: function _bindGlobalEvents(triggerEvent) {\n      // Note that we bind the events to the `document`, because it allows us to capture\n      // drag cancel events where the user's pointer is outside the browser window.\n\n      /** @type {?} */\n      var document = this._document;\n\n      if (typeof document !== 'undefined' && document) {\n        /** @type {?} */\n        var isTouch = isTouchEvent(triggerEvent);\n        /** @type {?} */\n\n        var moveEventName = isTouch ? 'touchmove' : 'mousemove';\n        /** @type {?} */\n\n        var endEventName = isTouch ? 'touchend' : 'mouseup';\n        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n        if (isTouch) {\n          document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n      }\n      /** @type {?} */\n\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.addEventListener('blur', this._windowBlur);\n      }\n    }\n    /**\n     * Removes any global event listeners that we may have added.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeGlobalEvents\",\n    value: function _removeGlobalEvents() {\n      /** @type {?} */\n      var document = this._document;\n\n      if (typeof document !== 'undefined' && document) {\n        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n      }\n      /** @type {?} */\n\n\n      var window = this._getWindow();\n\n      if (typeof window !== 'undefined' && window) {\n        window.removeEventListener('blur', this._windowBlur);\n      }\n    }\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @private\n     * @param {?} numSteps\n     * @return {?}\n     */\n\n  }, {\n    key: \"_increment\",\n    value: function _increment(numSteps) {\n      this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @private\n     * @param {?} pos\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateValueFromPosition\",\n    value: function _updateValueFromPosition(pos) {\n      if (!this._sliderDimensions) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n      /** @type {?} */\n\n      var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      /** @type {?} */\n\n      var posComponent = this.vertical ? pos.y : pos.x; // The exact value is calculated from the event and used to find the closest snap value.\n\n      /** @type {?} */\n\n      var percent = this._clamp((posComponent - offset) / size);\n\n      if (this._shouldInvertMouseCoords()) {\n        percent = 1 - percent;\n      } // Since the steps may not divide cleanly into the max value, if the user\n      // slid to 0 or 100 percent, we jump to the min/max value. This approach\n      // is slightly more intuitive than using `Math.ceil` below, because it\n      // follows the user's pointer closer.\n\n\n      if (percent === 0) {\n        this.value = this.min;\n      } else if (percent === 1) {\n        this.value = this.max;\n      } else {\n        /** @type {?} */\n        var exactValue = this._calculateValue(percent); // This calculation finds the closest step by finding the closest\n        // whole number divisible by the step relative to the min.\n\n        /** @type {?} */\n\n\n        var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min; // The value needs to snap to the min and max.\n\n        this.value = this._clamp(closestValue, this.min, this.max);\n      }\n    }\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._controlValueAccessorChangeFn(this.value);\n\n      this.valueChange.emit(this.value);\n      this.change.emit(this._createChangeEvent());\n    }\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitInputEvent\",\n    value: function _emitInputEvent() {\n      this.input.emit(this._createChangeEvent());\n    }\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTickIntervalPercent\",\n    value: function _updateTickIntervalPercent() {\n      if (!this.tickInterval || !this._sliderDimensions) {\n        return;\n      }\n\n      if (this.tickInterval == 'auto') {\n        /** @type {?} */\n        var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        /** @type {?} */\n\n        var pixelsPerStep = trackSize * this.step / (this.max - this.min);\n        /** @type {?} */\n\n        var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n        /** @type {?} */\n\n        var pixelsPerTick = stepsPerTick * this.step;\n        this._tickIntervalPercent = pixelsPerTick / trackSize;\n      } else {\n        this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n      }\n    }\n    /**\n     * Creates a slider change object from the specified value.\n     * @private\n     * @param {?=} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createChangeEvent\",\n    value: function _createChangeEvent() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n\n      /** @type {?} */\n      var event = new MatSliderChange();\n      event.source = this;\n      event.value = value;\n      return event;\n    }\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculatePercentage\",\n    value: function _calculatePercentage(value) {\n      return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @private\n     * @param {?} percentage\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateValue\",\n    value: function _calculateValue(percentage) {\n      return this.min + percentage * (this.max - this.min);\n    }\n    /**\n     * Return a number between two numbers.\n     * @private\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clamp\",\n    value: function _clamp(value) {\n      var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSliderDimensions\",\n    value: function _getSliderDimensions() {\n      return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusHostElement\",\n    value: function _focusHostElement(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Blurs the native element.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blurHostElement\",\n    value: function _blurHostElement() {\n      this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Runs a callback inside of the NgZone, if possible.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_runInsideZone\",\n    value: function _runInsideZone(fn) {\n      // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n      this._ngZone ? this._ngZone.run(fn) : fn();\n    }\n    /**\n     * Runs a callback outside of the NgZone, if possible.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"_runOutsizeZone\",\n    value: function _runOutsizeZone(fn) {\n      // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n      this._ngZone ? this._ngZone.runOutsideAngular(fn) : fn();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"invert\",\n    get: function get() {\n      return this._invert;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._invert = coerceBooleanProperty(value);\n    }\n    /**\n     * The maximum value that the slider can have.\n     * @return {?}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._max = coerceNumberProperty(v, this._max);\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The minimum value that the slider can have.\n     * @return {?}\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._min;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._min = coerceNumberProperty(v, this._min); // If the value wasn't explicitly set by the user, set it to the min.\n\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The values at which the thumb will snap.\n     * @return {?}\n     */\n\n  }, {\n    key: \"step\",\n    get: function get() {\n      return this._step;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._step = coerceNumberProperty(v, this._step);\n\n      if (this._step % 1 !== 0) {\n        this._roundToDecimal =\n        /** @type {?} */\n        this._step.toString().split('.').pop().length;\n      } // Since this could modify the label, we need to notify the change detection.\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether or not to show the thumb label.\n     * @return {?}\n     */\n\n  }, {\n    key: \"thumbLabel\",\n    get: function get() {\n      return this._thumbLabel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._thumbLabel = coerceBooleanProperty(value);\n    }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     * @return {?}\n     */\n\n  }, {\n    key: \"tickInterval\",\n    get: function get() {\n      return this._tickInterval;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value === 'auto') {\n        this._tickInterval = 'auto';\n      } else if (typeof value === 'number' || typeof value === 'string') {\n        this._tickInterval = coerceNumberProperty(value,\n        /** @type {?} */\n        this._tickInterval);\n      } else {\n        this._tickInterval = 0;\n      }\n    }\n    /**\n     * Value of the slider.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      // If the value needs to be read and it is still uninitialized, initialize it to the min.\n      if (this._value === null) {\n        this.value = this._min;\n      }\n\n      return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      if (v !== this._value) {\n        /** @type {?} */\n        var value = coerceNumberProperty(v); // While incrementing by a decimal we can end up with values like 33.300000000000004.\n        // Truncate it to ensure that it matches the label and to make it easier to work with.\n\n        if (this._roundToDecimal) {\n          value = parseFloat(value.toFixed(this._roundToDecimal));\n        }\n\n        this._value = value;\n        this._percent = this._calculatePercentage(this._value); // Since this also modifies the percentage, we need to let the change detection know.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * Whether the slider is vertical.\n     * @return {?}\n     */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * The value to be used for display purposes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"displayValue\",\n    get: function get() {\n      if (this.displayWith) {\n        // Value is never null but since setters and getters cannot have\n        // different types, the value getter is also typed to return null.\n        return this.displayWith(\n        /** @type {?} */\n        this.value);\n      } // Note that this could be improved further by rounding something like 0.999 to 1 or\n      // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n      // every change detection cycle.\n\n\n      if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n        return this.value.toFixed(this._roundToDecimal);\n      }\n\n      return this.value || 0;\n    }\n  }, {\n    key: \"percent\",\n    get: function get() {\n      return this._clamp(this._percent);\n    }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     * @return {?}\n     */\n\n  }, {\n    key: \"_invertAxis\",\n    get: function get() {\n      // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n      // top. However from a y-axis standpoint this is inverted.\n      return this.vertical ? !this.invert : this.invert;\n    }\n    /**\n     * Whether the slider is at its minimum value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isMinValue\",\n    get: function get() {\n      return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_thumbGap\",\n    get: function get() {\n      if (this.disabled) {\n        return DISABLED_THUMB_GAP;\n      }\n\n      if (this._isMinValue && !this.thumbLabel) {\n        return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n      }\n\n      return 0;\n    }\n    /**\n     * CSS styles for the track background element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackBackgroundStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X';\n      /** @type {?} */\n\n      var scale = this.vertical ? \"1, \".concat(1 - this.percent, \", 1\") : \"\".concat(1 - this.percent, \", 1, 1\");\n      /** @type {?} */\n\n      var sign = this._shouldInvertMouseCoords() ? '-' : '';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._thumbGap, \"px) scale3d(\").concat(scale, \")\")\n      };\n    }\n    /**\n     * CSS styles for the track fill element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_trackFillStyles\",\n    get: function get() {\n      /** @type {?} */\n      var percent = this.percent;\n      /** @type {?} */\n\n      var axis = this.vertical ? 'Y' : 'X';\n      /** @type {?} */\n\n      var scale = this.vertical ? \"1, \".concat(percent, \", 1\") : \"\".concat(percent, \", 1, 1\");\n      /** @type {?} */\n\n      var sign = this._shouldInvertMouseCoords() ? '' : '-';\n      return {\n        // scale3d avoids some rendering issues in Chrome. See #12071.\n        transform: \"translate\".concat(axis, \"(\").concat(sign).concat(this._thumbGap, \"px) scale3d(\").concat(scale, \")\"),\n        // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n        // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n        // the value of the slider is 0, we can easily get into this situation. We force a\n        // recalculation by changing the element's `display` when it goes from 0 to any other value.\n        display: percent === 0 ? 'none' : ''\n      };\n    }\n    /**\n     * CSS styles for the ticks container element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_ticksContainerStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the ticks container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      /** @type {?} */\n\n      var sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n      /** @type {?} */\n\n      var offset = this._tickIntervalPercent / 2 * 100;\n      return {\n        'transform': \"translate\".concat(axis, \"(\").concat(sign).concat(offset, \"%)\")\n      };\n    }\n    /**\n     * CSS styles for the ticks element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_ticksStyles\",\n    get: function get() {\n      /** @type {?} */\n      var tickSize = this._tickIntervalPercent * 100;\n      /** @type {?} */\n\n      var backgroundSize = this.vertical ? \"2px \".concat(tickSize, \"%\") : \"\".concat(tickSize, \"% 2px\");\n      /** @type {?} */\n\n      var axis = this.vertical ? 'Y' : 'X'; // Depending on the direction we pushed the ticks container, push the ticks the opposite\n      // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n      // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n\n      /** @type {?} */\n\n      var sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n      /** @type {?} */\n\n      var rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n      /** @type {?} */\n\n      var styles = {\n        'backgroundSize': backgroundSize,\n        // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n        'transform': \"translateZ(0) translate\".concat(axis, \"(\").concat(sign).concat(tickSize / 2, \"%)\").concat(rotate)\n      };\n\n      if (this._isMinValue && this._thumbGap) {\n        /** @type {?} */\n        var side;\n\n        if (this.vertical) {\n          side = this._invertAxis ? 'Bottom' : 'Top';\n        } else {\n          side = this._invertAxis ? 'Right' : 'Left';\n        }\n\n        styles[\"padding\".concat(side)] = \"\".concat(this._thumbGap, \"px\");\n      }\n\n      return styles;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_thumbContainerStyles\",\n    get: function get() {\n      /** @type {?} */\n      var axis = this.vertical ? 'Y' : 'X'; // For a horizontal slider in RTL languages we push the thumb container off the left edge\n      // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n\n      /** @type {?} */\n\n      var invertOffset = this._getDirection() == 'rtl' && !this.vertical ? !this._invertAxis : this._invertAxis;\n      /** @type {?} */\n\n      var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n      return {\n        'transform': \"translate\".concat(axis, \"(-\").concat(offset, \"%)\")\n      };\n    }\n  }]);\n\n  return MatSlider;\n}(_MatSliderMixinBase);\n\nMatSlider.ɵfac = function MatSlider_Factory(t) {\n  return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSlider,\n  selectors: [[\"mat-slider\"]],\n  viewQuery: function MatSlider_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"],\n  hostVars: 28,\n  hostBindings: function MatSlider_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSlider_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      })(\"keyup\", function MatSlider_keyup_HostBindingHandler() {\n        return ctx._onKeyup();\n      })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() {\n        return ctx._onMouseenter();\n      })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) {\n        return $event.preventDefault();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n      ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    invert: \"invert\",\n    max: \"max\",\n    min: \"min\",\n    value: \"value\",\n    step: \"step\",\n    thumbLabel: \"thumbLabel\",\n    tickInterval: \"tickInterval\",\n    vertical: \"vertical\",\n    displayWith: \"displayWith\"\n  },\n  outputs: {\n    change: \"change\",\n    input: \"input\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSlider\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 13,\n  vars: 6,\n  consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]],\n  template: function MatSlider_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n      ɵngcc0.ɵɵelement(3, \"div\", 3);\n      ɵngcc0.ɵɵelement(4, \"div\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n      ɵngcc0.ɵɵelement(6, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelement(9, \"div\", 9);\n      ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n      ɵngcc0.ɵɵtext(12);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    }\n  },\n  directives: [ɵngcc3.NgStyle],\n  styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSlider.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatSlider.propDecorators = {\n  invert: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  step: [{\n    type: Input\n  }],\n  thumbLabel: [{\n    type: Input\n  }],\n  tickInterval: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  displayWith: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  input: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  _sliderWrapper: [{\n    type: ViewChild,\n    args: ['sliderWrapper']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slider',\n      exportAs: 'matSlider',\n      providers: [MAT_SLIDER_VALUE_ACCESSOR],\n      host: {\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)',\n        '(keyup)': '_onKeyup()',\n        '(mouseenter)': '_onMouseenter()',\n        // On Safari starting to slide temporarily triggers text selection mode which\n        // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n        '(selectstart)': '$event.preventDefault()',\n        'class': 'mat-slider mat-focus-indicator',\n        'role': 'slider',\n        '[tabIndex]': 'tabIndex',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-valuemax]': 'max',\n        '[attr.aria-valuemin]': 'min',\n        '[attr.aria-valuenow]': 'value',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mat-slider-disabled]': 'disabled',\n        '[class.mat-slider-has-ticks]': 'tickInterval',\n        '[class.mat-slider-horizontal]': '!vertical',\n        '[class.mat-slider-axis-inverted]': '_invertAxis',\n        // Class binding which is only used by the test harness as there is no other\n        // way for the harness to detect if mouse coordinates need to be inverted.\n        '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n        '[class.mat-slider-sliding]': '_isSliding',\n        '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n        '[class.mat-slider-vertical]': 'vertical',\n        '[class.mat-slider-min-value]': '_isMinValue',\n        '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n      inputs: ['disabled', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    change: [{\n      type: Output\n    }],\n    input: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    invert: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    thumbLabel: [{\n      type: Input\n    }],\n    tickInterval: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    _sliderWrapper: [{\n      type: ViewChild,\n      args: ['sliderWrapper']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSlider.ngAcceptInputType_invert;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_max;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_min;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_step;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_thumbLabel;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_tickInterval;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_value;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_vertical;\n  /** @type {?} */\n\n  MatSlider.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._invert;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._max;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._min;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._step;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._thumbLabel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._tickInterval;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._value;\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   * @type {?}\n   */\n\n  MatSlider.prototype.displayWith;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._vertical;\n  /**\n   * Event emitted when the slider value has changed.\n   * @type {?}\n   */\n\n  MatSlider.prototype.change;\n  /**\n   * Event emitted when the slider thumb moves.\n   * @type {?}\n   */\n\n  MatSlider.prototype.input;\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatSlider.prototype.valueChange;\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @type {?}\n   */\n\n  MatSlider.prototype.onTouched;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._percent;\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   * @type {?}\n   */\n\n  MatSlider.prototype._isSliding;\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   * @type {?}\n   */\n\n  MatSlider.prototype._isActive;\n  /**\n   * The size of a tick interval as a percentage of the size of the track.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._tickIntervalPercent;\n  /**\n   * The dimensions of the slider.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._sliderDimensions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._controlValueAccessorChangeFn;\n  /**\n   * Decimal places to round to, based on the step amount.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._roundToDecimal;\n  /**\n   * Subscription to the Directionality change EventEmitter.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._dirChangeSubscription;\n  /**\n   * The value of the slider when the slide start event fires.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._valueOnSlideStart;\n  /**\n   * Position of the pointer when the dragging started.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._pointerPositionOnStart;\n  /**\n   * Reference to the inner slider wrapper element.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._sliderWrapper;\n  /**\n   * Keeps track of the last pointer event that was captured by the slider.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._lastPointerEvent;\n  /**\n   * Used to subscribe to global move and end events\n   * @type {?}\n   * @protected\n   */\n\n  MatSlider.prototype._document;\n  /**\n   * Called when the user has put their pointer down on the slider.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._pointerDown;\n  /**\n   * Called when the user has moved their pointer after\n   * starting to drag. Bound on the document level.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._pointerMove;\n  /**\n   * Called when the user has lifted their pointer. Bound on the document level.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._pointerUp;\n  /**\n   * Called when the window has lost focus.\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._windowBlur;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._dir;\n  /** @type {?} */\n\n  MatSlider.prototype._animationMode;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlider.prototype._ngZone;\n}\n/**\n * Returns whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\n\n\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\n * Gets the coordinates of a touch or mouse event relative to the viewport.\n * @param {?} event\n * @return {?}\n */\n\n\nfunction getPointerPositionOnPage(event) {\n  // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n\n  /** @type {?} */\n  var point = isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;\n  return {\n    x: point.clientX,\n    y: point.clientY\n  };\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/slider-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSliderModule = function MatSliderModule() {\n  _classCallCheck(this, MatSliderModule);\n};\n\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSliderModule\n});\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSliderModule_Factory(t) {\n    return new (t || MatSliderModule)();\n  },\n  imports: [[CommonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, {\n    declarations: function declarations() {\n      return [MatSlider];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSlider, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatSlider, MatCommonModule],\n      declarations: [MatSlider]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };","map":{"version":3,"sources":["../../../../../material/slider/slider.ts","../../../../../material/slider/slider-module.ts","../../../../../material/slider/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {Subscription} from 'rxjs';\n\nconst activeEventOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n\n    // On Safari starting to slide temporarily triggers text selection mode which\n    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n    '(selectstart)': '$event.preventDefault()',\n    'class': 'mat-slider mat-focus-indicator',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if mouse coordinates need to be inverted.\n    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      // Value is never null but since setters and getters cannot have\n      // different types, the value getter is also typed to return null.\n      return this.displayWith(this.value!);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus(options?: FocusOptions) {\n    this._focusHostElement(options);\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const percent = this.percent;\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n      // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n      // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n      // the value of the slider is 0, we can easily get into this situation. We force a\n      // recalculation by changing the element's `display` when it goes from 0 to any other value.\n      display: percent === 0 ? 'none' : ''\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side: string;\n\n      if (this.vertical) {\n        side = this._invertAxis ? 'Bottom' : 'Top';\n      } else {\n        side = this._invertAxis ? 'Right' : 'Left';\n      }\n\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Position of the pointer when the dragging started. */\n  private _pointerPositionOnStart: {x: number, y: number} | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  /** Keeps track of the last pointer event that was captured by the slider. */\n  private _lastPointerEvent: MouseEvent | TouchEvent | null;\n\n  /** Used to subscribe to global move and end events */\n  protected _document?: Document;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              // @breaking-change 9.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    this._document = document;\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._runOutsizeZone(() => {\n      const element = elementRef.nativeElement;\n      element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n      element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n    });\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n    element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n    this._lastPointerEvent = null;\n    this._removeGlobalEvents();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled || hasModifierKey(event)) {\n      return;\n    }\n\n    const oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Called when the user has put their pointer down on the slider. */\n  private _pointerDown = (event: TouchEvent | MouseEvent) => {\n    // Don't do anything if the slider is disabled or the\n    // user is using anything other than the main mouse button.\n    if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n      return;\n    }\n\n    this._runInsideZone(() => {\n      const oldValue = this.value;\n      const pointerPosition = getPointerPositionOnPage(event);\n      this._isSliding = true;\n      this._lastPointerEvent = event;\n      event.preventDefault();\n      this._focusHostElement();\n      this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n      this._bindGlobalEvents(event);\n      this._focusHostElement();\n      this._updateValueFromPosition(pointerPosition);\n      this._valueOnSlideStart = this.value;\n      this._pointerPositionOnStart = pointerPosition;\n\n      // Emit a change and input event if the value changed.\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n        this._emitChangeEvent();\n      }\n    });\n  }\n\n  /**\n   * Called when the user has moved their pointer after\n   * starting to drag. Bound on the document level.\n   */\n  private _pointerMove = (event: TouchEvent | MouseEvent) => {\n    if (this._isSliding) {\n      // Prevent the slide from selecting anything else.\n      event.preventDefault();\n      const oldValue = this.value;\n      this._lastPointerEvent = event;\n      this._updateValueFromPosition(getPointerPositionOnPage(event));\n\n      // Native range elements always emit `input` events when the value changed while sliding.\n      if (oldValue != this.value) {\n        this._emitInputEvent();\n      }\n    }\n  }\n\n  /** Called when the user has lifted their pointer. Bound on the document level. */\n  private _pointerUp = (event: TouchEvent | MouseEvent) => {\n    if (this._isSliding) {\n      const pointerPositionOnStart = this._pointerPositionOnStart;\n      const currentPointerPosition = getPointerPositionOnPage(event);\n\n      event.preventDefault();\n      this._removeGlobalEvents();\n      this._valueOnSlideStart = this._pointerPositionOnStart = this._lastPointerEvent = null;\n      this._isSliding = false;\n\n      if (this._valueOnSlideStart != this.value && !this.disabled &&\n          pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n          pointerPositionOnStart.y !== currentPointerPosition.y)) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Called when the window has lost focus. */\n  private _windowBlur = () => {\n    // If the window is blurred while dragging we need to stop dragging because the\n    // browser won't dispatch the `mouseup` and `touchend` events anymore.\n    if (this._lastPointerEvent) {\n      this._pointerUp(this._lastPointerEvent);\n    }\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    return this._document?.defaultView || window;\n  }\n\n  /**\n   * Binds our global move and end events. They're bound at the document level and only while\n   * dragging so that the user doesn't have to keep their pointer exactly over the slider\n   * as they're swiping across the screen.\n   */\n  private _bindGlobalEvents(triggerEvent: TouchEvent | MouseEvent) {\n    // Note that we bind the events to the `document`, because it allows us to capture\n    // drag cancel events where the user's pointer is outside the browser window.\n    const document = this._document;\n\n    if (typeof document !== 'undefined' && document) {\n      const isTouch = isTouchEvent(triggerEvent);\n      const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n      const endEventName = isTouch ? 'touchend' : 'mouseup';\n      document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n      document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n\n      if (isTouch) {\n        document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n      }\n    }\n\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined' && window) {\n      window.addEventListener('blur', this._windowBlur);\n    }\n  }\n\n  /** Removes any global event listeners that we may have added. */\n  private _removeGlobalEvents() {\n    const document = this._document;\n\n    if (typeof document !== 'undefined' && document) {\n      document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n      document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n      document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n    }\n\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined' && window) {\n      window.removeEventListener('blur', this._windowBlur);\n    }\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement(options?: FocusOptions) {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /** Runs a callback inside of the NgZone, if possible. */\n  private _runInsideZone(fn: () => any) {\n    // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n    this._ngZone ? this._ngZone.run(fn) : fn();\n  }\n\n  /** Runs a callback outside of the NgZone, if possible. */\n  private _runOutsizeZone(fn: () => any) {\n    // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n    this._ngZone ? this._ngZone.runOutsideAngular(fn) : fn();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  static ngAcceptInputType_invert: BooleanInput;\n  static ngAcceptInputType_max: NumberInput;\n  static ngAcceptInputType_min: NumberInput;\n  static ngAcceptInputType_step: NumberInput;\n  static ngAcceptInputType_thumbLabel: BooleanInput;\n  static ngAcceptInputType_tickInterval: NumberInput;\n  static ngAcceptInputType_value: NumberInput;\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\n  // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n  const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n  return {x: point.clientX, y: point.clientY};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n})\nexport class MatSliderModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}