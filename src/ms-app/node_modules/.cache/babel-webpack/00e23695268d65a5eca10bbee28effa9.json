{"ast":null,"code":"import _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\nvar _c0 = [\"thumbContainer\"];\nvar _c1 = [\"toggleBar\"];\nvar _c2 = [\"input\"];\n\nvar _c3 = function _c3() {\n  return {\n    enterDuration: 150\n  };\n};\n\nvar _c4 = [\"*\"];\n\nfunction MatSlideToggleDefaultOptions() {}\n\nif (false) {\n  /**\n   * Whether toggle action triggers value changes in slide toggle.\n   * @type {?|undefined}\n   */\n  MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n  /**\n   * Whether drag action triggers value changes in slide toggle.\n   * @deprecated No longer being used.\n   * \\@breaking-change 10.0.0\n   * @type {?|undefined}\n   */\n\n  MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\n\n\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  function factory() {\n    return {\n      disableToggleValue: false\n    };\n  }\n});\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n\n/** @type {?} */\n\nvar nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatSlideToggle;\n  }),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\n\nvar MatSlideToggleChange =\n/**\n * @param {?} source\n * @param {?} checked\n */\nfunction MatSlideToggleChange(source, checked) {\n  _classCallCheck(this, MatSlideToggleChange);\n\n  this.source = source;\n  this.checked = checked;\n};\n\nif (false) {\n  /**\n   * The source MatSlideToggle of the event.\n   * @type {?}\n   */\n  MatSlideToggleChange.prototype.source;\n  /**\n   * The new `checked` value of the MatSlideToggle.\n   * @type {?}\n   */\n\n  MatSlideToggleChange.prototype.checked;\n} // Boilerplate for applying mixins to MatSlideToggle.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSlideToggleBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatSlideToggleBase(_elementRef) {\n  _classCallCheck(this, MatSlideToggleBase);\n\n  this._elementRef = _elementRef;\n};\n\nif (false) {\n  /** @type {?} */\n  MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\n\n\nvar MatSlideToggle = /*#__PURE__*/function (_MatSlideToggleMixinB) {\n  _inherits(MatSlideToggle, _MatSlideToggleMixinB);\n\n  var _super = _createSuper(MatSlideToggle);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?} tabIndex\n   * @param {?} _ngZone\n   * @param {?} defaults\n   * @param {?=} _animationMode\n   * @param {?=} _dir\n   */\n  function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex,\n  /**\n   * @deprecated `_ngZone` and `_dir` parameters to be removed.\n   * @breaking-change 10.0.0\n   */\n  _ngZone, defaults, _animationMode, _dir) {\n    var _this;\n\n    _classCallCheck(this, MatSlideToggle);\n\n    _this = _super.call(this, elementRef);\n    _this._focusMonitor = _focusMonitor;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this.defaults = defaults;\n    _this._animationMode = _animationMode;\n\n    _this._onChange =\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    function (_) {};\n\n    _this._onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    _this._uniqueId = \"mat-slide-toggle-\".concat(++nextUniqueId);\n    _this._required = false;\n    _this._checked = false;\n    /**\n     * Name value will be applied to the input element if present.\n     */\n\n    _this.name = null;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     */\n\n    _this.id = _this._uniqueId;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     */\n\n    _this.labelPosition = 'after';\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     */\n\n    _this.ariaLabel = null;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     */\n\n    _this.ariaLabelledby = null;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     */\n\n    _this.change = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     */\n\n    _this.toggleChange = new EventEmitter();\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     */\n\n    _this.dragChange = new EventEmitter();\n    _this.tabIndex = parseInt(tabIndex) || 0;\n    return _this;\n  }\n  /**\n   * Whether the slide-toggle is required.\n   * @return {?}\n   */\n\n\n  _createClass(MatSlideToggle, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(\n      /**\n      * @param {?} focusOrigin\n      * @return {?}\n      */\n      function (focusOrigin) {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          _this2._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this2._onTouched();\n          });\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onChangeEvent\",\n    value: function _onChangeEvent(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the component's `change` output.\n      event.stopPropagation();\n      this.toggleChange.emit(); // When the slide toggle's config disables toggle change event by setting\n      // `disableToggleValue: true`, the slide toggle's value does not change, and the\n      // checked state of the underlying input needs to be changed back.\n\n      if (this.defaults.disableToggleValue) {\n        this._inputElement.nativeElement.checked = this.checked;\n        return;\n      } // Sync the value from the underlying input element with the component instance.\n\n\n      this.checked = this._inputElement.nativeElement.checked; // Emit our custom change event only if the underlying input emitted one. This ensures that\n      // there is no change event, when the checked state changes programmatically.\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInputClick\",\n    value: function _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `slide-toggle` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.checked = !this.checked;\n\n      this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      this._onChange(this.checked);\n\n      this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onLabelTextChange\",\n    value: function _onLabelTextChange() {\n      // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n      // slide-toggle component will be only marked for check, but no actual change detection runs\n      // automatically. Instead of going back into the zone in order to trigger a change detection\n      // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n      // we only trigger an explicit change detection for the slide-toggle view and its children.\n      this._changeDetectorRef.detectChanges();\n    }\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checked;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._checked = coerceBooleanProperty(value);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"inputId\",\n    get: function get() {\n      return \"\".concat(this.id || this._uniqueId, \"-input\");\n    }\n  }]);\n\n  return MatSlideToggle;\n}(_MatSlideToggleMixinBase);\n\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) {\n  return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\n\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSlideToggle,\n  selectors: [[\"mat-slide-toggle\"]],\n  viewQuery: function MatSlideToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n      ɵngcc0.ɵɵviewQuery(_c1, true);\n      ɵngcc0.ɵɵviewQuery(_c2, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-slide-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatSlideToggle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    name: \"name\",\n    id: \"id\",\n    labelPosition: \"labelPosition\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    required: \"required\",\n    checked: \"checked\"\n  },\n  outputs: {\n    change: \"change\",\n    toggleChange: \"toggleChange\",\n    dragChange: \"dragChange\"\n  },\n  exportAs: [\"matSlideToggle\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c4,\n  decls: 16,\n  vars: 18,\n  consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatSlideToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n      ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n      ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n      ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) {\n        return ctx._onChangeEvent($event);\n      })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n      ɵngcc0.ɵɵelement(8, \"div\", 8);\n      ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n      ɵngcc0.ɵɵelement(10, \"div\", 10);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n      ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() {\n        return ctx._onLabelTextChange();\n      });\n      ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n      ɵngcc0.ɵɵtext(14, \"\\xA0\");\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(15);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      var _r4 = ɵngcc0.ɵɵreference(12);\n\n      ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    }\n  },\n  directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent],\n  styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSlideToggle.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatSlideToggle.propDecorators = {\n  _thumbEl: [{\n    type: ViewChild,\n    args: ['thumbContainer']\n  }],\n  _thumbBarEl: [{\n    type: ViewChild,\n    args: ['toggleBar']\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  labelPosition: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  required: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  toggleChange: [{\n    type: Output\n  }],\n  dragChange: [{\n    type: Output\n  }],\n  _inputElement: [{\n    type: ViewChild,\n    args: ['input']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-slide-toggle',\n      exportAs: 'matSlideToggle',\n      host: {\n        'class': 'mat-slide-toggle',\n        '[id]': 'id',\n        // Needs to be `-1` so it can still receive programmatic focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[class.mat-checked]': 'checked',\n        '[class.mat-disabled]': 'disabled',\n        '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n      },\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n      inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    toggleChange: [{\n      type: Output\n    }],\n    dragChange: [{\n      type: Output\n    }],\n    required: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    _thumbEl: [{\n      type: ViewChild,\n      args: ['thumbContainer']\n    }],\n    _thumbBarEl: [{\n      type: ViewChild,\n      args: ['toggleBar']\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSlideToggle.ngAcceptInputType_required;\n  /** @type {?} */\n\n  MatSlideToggle.ngAcceptInputType_checked;\n  /** @type {?} */\n\n  MatSlideToggle.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatSlideToggle.ngAcceptInputType_disableRipple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._onChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._onTouched;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._uniqueId;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._required;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._checked;\n  /**\n   * Reference to the thumb HTMLElement.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype._thumbEl;\n  /**\n   * Reference to the thumb bar HTMLElement.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype._thumbBarEl;\n  /**\n   * Name value will be applied to the input element if present.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.name;\n  /**\n   * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.id;\n  /**\n   * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.labelPosition;\n  /**\n   * Used to set the aria-label attribute on the underlying input element.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.ariaLabel;\n  /**\n   * Used to set the aria-labelledby attribute on the underlying input element.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.ariaLabelledby;\n  /**\n   * An event will be dispatched each time the slide-toggle changes its value.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.change;\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.toggleChange;\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   * @deprecated No longer being used. To be removed.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype.dragChange;\n  /**\n   * Reference to the underlying input element.\n   * @type {?}\n   */\n\n  MatSlideToggle.prototype._inputElement;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSlideToggle.prototype._changeDetectorRef;\n  /** @type {?} */\n\n  MatSlideToggle.prototype.defaults;\n  /** @type {?} */\n\n  MatSlideToggle.prototype._animationMode;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatSlideToggleRequiredValidator;\n  }),\n  multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n\nvar MatSlideToggleRequiredValidator = /*#__PURE__*/function (_CheckboxRequiredVali) {\n  _inherits(MatSlideToggleRequiredValidator, _CheckboxRequiredVali);\n\n  var _super2 = _createSuper(MatSlideToggleRequiredValidator);\n\n  function MatSlideToggleRequiredValidator() {\n    _classCallCheck(this, MatSlideToggleRequiredValidator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatSlideToggleRequiredValidator;\n}(CheckboxRequiredValidator);\n\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) {\n  return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator);\n};\n\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatSlideToggleRequiredValidator,\n  selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nvar ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n      providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\n\n\nvar _MatSlideToggleRequiredValidatorModule = function _MatSlideToggleRequiredValidatorModule() {\n  _classCallCheck(this, _MatSlideToggleRequiredValidatorModule);\n};\n\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: _MatSlideToggleRequiredValidatorModule\n});\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) {\n    return new (t || _MatSlideToggleRequiredValidatorModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, {\n    declarations: [MatSlideToggleRequiredValidator],\n    exports: [MatSlideToggleRequiredValidator]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatSlideToggleRequiredValidator],\n      declarations: [MatSlideToggleRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nvar MatSlideToggleModule = function MatSlideToggleModule() {\n  _classCallCheck(this, MatSlideToggleModule);\n};\n\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSlideToggleModule\n});\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSlideToggleModule_Factory(t) {\n    return new (t || MatSlideToggleModule)();\n  },\n  imports: [[_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule], _MatSlideToggleRequiredValidatorModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, {\n    declarations: function declarations() {\n      return [MatSlideToggle];\n    },\n    imports: function imports() {\n      return [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [_MatSlideToggleRequiredValidatorModule, MatRippleModule, MatCommonModule, ObserversModule],\n      exports: [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule],\n      declarations: [MatSlideToggle]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };","map":{"version":3,"sources":["../../../../../material/slide-toggle/slide-toggle-config.ts","../../../../../material/slide-toggle/slide-toggle.ts","../../../../../material/slide-toggle/slide-toggle-required-validator.ts","../../../../../material/slide-toggle/slide-toggle-module.ts","../../../../../material/slide-toggle/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /**\n   * Whether drag action triggers value changes in slide toggle.\n   * @deprecated No longer being used.\n   * @breaking-change 10.0.0\n   */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    // Needs to be `-1` so it can still receive programmatic focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[attr.aria-label]': 'null',\n    '[attr.aria-labelledby]': 'null',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n                                                                        ControlValueAccessor,\n                                                                        CanDisable, CanColor,\n                                                                        HasTabIndex,\n                                                                        CanDisableRipple {\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 10.0.0\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n                /**\n                 * @deprecated `_ngZone` and `_dir` parameters to be removed.\n                 * @breaking-change 10.0.0\n                 */\n              _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        // Only forward focus manually when it was received programmatically or through the\n        // keyboard. We should not do this for mouse/touch focus for two reasons:\n        // 1. It can prevent clicks from landing in Chrome (see #18269).\n        // 2. They're already handled by the wrapping `label` element.\n        if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n          this._inputElement.nativeElement.focus();\n        } else if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this._onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n    this.toggleChange.emit();\n\n    // When the slide toggle's config disables toggle change event by setting\n    // `disableToggleValue: true`, the slide toggle's value does not change, and the\n    // checked state of the underlying input needs to be changed back.\n    if (this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(options?: FocusOptions): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this._onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this._onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_checked: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\n@Directive({\n  selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n  providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n})\nexport class MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatSlideToggle} from './slide-toggle';\nimport {MatSlideToggleRequiredValidator} from './slide-toggle-required-validator';\n\n/** This module is used by both original and MDC-based slide-toggle implementations. */\n@NgModule({\n  exports: [MatSlideToggleRequiredValidator],\n  declarations: [MatSlideToggleRequiredValidator],\n})\n// tslint:disable-next-line:class-name\nexport class _MatSlideToggleRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatRippleModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    _MatSlideToggleRequiredValidatorModule,\n    MatSlideToggle,\n    MatCommonModule\n  ],\n  declarations: [MatSlideToggle],\n})\nexport class MatSlideToggleModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}