{"ast":null,"code":"import _toConsumableArray from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Injectable, ɵɵdefineInjectable, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, NgZone, Input, Output, Directive, Optional, SkipSelf, InjectionToken, ChangeDetectorRef, Inject, ViewChild, forwardRef, ViewContainerRef, Attribute, ContentChild, InjectFlags, Injector, Self, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DateAdapter, MAT_DATE_FORMATS, mixinColor, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { ESCAPE, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { take, startWith, filter } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, NgControl, NgForm, FormGroupDirective, ControlContainer } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD, MatFormFieldControl } from '@angular/material/form-field';\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/material/button';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/portal';\nimport * as ɵngcc7 from '@angular/material/dialog';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nimport * as ɵngcc9 from '@angular/material/form-field';\nimport * as ɵngcc10 from '@angular/forms';\nvar _c0 = [\"mat-calendar-body\", \"\"];\n\nfunction MatCalendarBody_tr_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"td\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r0.numCols);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.label, \" \");\n  }\n}\n\nfunction MatCalendarBody_tr_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵstyleProp(\"padding-top\", ctx_r4._cellPadding)(\"padding-bottom\", ctx_r4._cellPadding);\n    ɵngcc0.ɵɵattribute(\"colspan\", ctx_r4._firstRowOffset);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4._firstRowOffset >= ctx_r4.labelMinRequiredCells ? ctx_r4.label : \"\", \" \");\n  }\n}\n\nfunction MatCalendarBody_tr_1_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function MatCalendarBody_tr_1_td_2_Template_td_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      var item_r6 = ctx.$implicit;\n      var ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r8._cellClicked(item_r6, $event);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 9);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(3, \"div\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r6 = ctx.$implicit;\n    var colIndex_r7 = ctx.index;\n    var rowIndex_r3 = ɵngcc0.ɵɵnextContext().index;\n    var ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r5._cellWidth)(\"padding-top\", ctx_r5._cellPadding)(\"padding-bottom\", ctx_r5._cellPadding);\n    ɵngcc0.ɵɵclassProp(\"mat-calendar-body-disabled\", !item_r6.enabled)(\"mat-calendar-body-active\", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7))(\"mat-calendar-body-range-start\", ctx_r5._isRangeStart(item_r6.compareValue))(\"mat-calendar-body-range-end\", ctx_r5._isRangeEnd(item_r6.compareValue))(\"mat-calendar-body-in-range\", ctx_r5._isInRange(item_r6.compareValue))(\"mat-calendar-body-comparison-bridge-start\", ctx_r5._isComparisonBridgeStart(item_r6.compareValue, rowIndex_r3, colIndex_r7))(\"mat-calendar-body-comparison-bridge-end\", ctx_r5._isComparisonBridgeEnd(item_r6.compareValue, rowIndex_r3, colIndex_r7))(\"mat-calendar-body-comparison-start\", ctx_r5._isComparisonStart(item_r6.compareValue))(\"mat-calendar-body-comparison-end\", ctx_r5._isComparisonEnd(item_r6.compareValue))(\"mat-calendar-body-in-comparison-range\", ctx_r5._isInComparisonRange(item_r6.compareValue))(\"mat-calendar-body-preview-start\", ctx_r5._isPreviewStart(item_r6.compareValue))(\"mat-calendar-body-preview-end\", ctx_r5._isPreviewEnd(item_r6.compareValue))(\"mat-calendar-body-in-preview\", ctx_r5._isInPreview(item_r6.compareValue));\n    ɵngcc0.ɵɵproperty(\"ngClass\", item_r6.cssClasses)(\"tabindex\", ctx_r5._isActiveCell(rowIndex_r3, colIndex_r7) ? 0 : 0 - 1);\n    ɵngcc0.ɵɵattribute(\"data-mat-row\", rowIndex_r3)(\"data-mat-col\", colIndex_r7)(\"aria-label\", item_r6.ariaLabel)(\"aria-disabled\", !item_r6.enabled || null)(\"aria-selected\", ctx_r5._isSelected(item_r6));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"mat-calendar-body-selected\", ctx_r5._isSelected(item_r6))(\"mat-calendar-body-today\", ctx_r5.todayValue === item_r6.compareValue);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", item_r6.displayValue, \" \");\n  }\n}\n\nfunction MatCalendarBody_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 4);\n    ɵngcc0.ɵɵtemplate(1, MatCalendarBody_tr_1_td_1_Template, 2, 6, \"td\", 5);\n    ɵngcc0.ɵɵtemplate(2, MatCalendarBody_tr_1_td_2_Template, 4, 44, \"td\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var row_r2 = ctx.$implicit;\n    var rowIndex_r3 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", rowIndex_r3 === 0 && ctx_r1._firstRowOffset);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", row_r2);\n  }\n}\n\nfunction MatMonthView_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 5);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var day_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"aria-label\", day_r1.long);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(day_r1.narrow);\n  }\n}\n\nvar _c1 = [\"*\"];\n\nfunction MatCalendar_ng_template_0_Template(rf, ctx) {}\n\nfunction MatCalendar_mat_month_view_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-month-view\", 5);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_month_view_2_Template_mat_month_view_activeDateChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.activeDate = $event;\n    })(\"_userSelection\", function MatCalendar_mat_month_view_2_Template_mat_month_view__userSelection_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6._dateSelected($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r1.activeDate)(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass)(\"comparisonStart\", ctx_r1.comparisonStart)(\"comparisonEnd\", ctx_r1.comparisonEnd);\n  }\n}\n\nfunction MatCalendar_mat_year_view_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-year-view\", 6);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_year_view_3_Template_mat_year_view_activeDateChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.activeDate = $event;\n    })(\"monthSelected\", function MatCalendar_mat_year_view_3_Template_mat_year_view_monthSelected_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9._monthSelectedInYearView($event);\n    })(\"selectedChange\", function MatCalendar_mat_year_view_3_Template_mat_year_view_selectedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10._goToDateInView($event, \"month\");\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r2.activeDate)(\"selected\", ctx_r2.selected)(\"dateFilter\", ctx_r2.dateFilter)(\"maxDate\", ctx_r2.maxDate)(\"minDate\", ctx_r2.minDate);\n  }\n}\n\nfunction MatCalendar_mat_multi_year_view_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"mat-multi-year-view\", 7);\n    ɵngcc0.ɵɵlistener(\"activeDateChange\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_activeDateChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.activeDate = $event;\n    })(\"yearSelected\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_yearSelected_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13._yearSelectedInMultiYearView($event);\n    })(\"selectedChange\", function MatCalendar_mat_multi_year_view_4_Template_mat_multi_year_view_selectedChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14._goToDateInView($event, \"year\");\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"activeDate\", ctx_r3.activeDate)(\"selected\", ctx_r3.selected)(\"dateFilter\", ctx_r3.dateFilter)(\"maxDate\", ctx_r3.maxDate)(\"minDate\", ctx_r3.minDate);\n  }\n}\n\nvar _c2 = [\"button\"];\n\nfunction MatDatepickerToggle__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(0, \"svg\", 3);\n    ɵngcc0.ɵɵelement(1, \"path\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nvar _c3 = [[[\"\", \"matDatepickerToggleIcon\", \"\"]]];\nvar _c4 = [\"[matDatepickerToggleIcon]\"];\nvar _c5 = [[[\"input\", \"matStartDate\", \"\"]], [[\"input\", \"matEndDate\", \"\"]]];\nvar _c6 = [\"input[matStartDate]\", \"input[matEndDate]\"];\n\nfunction createMissingDateImplError(provider) {\n  return Error(\"MatDatepicker: No provider found for \".concat(provider, \". You must import one of the following \") + \"modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a \" + \"custom implementation.\");\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-intl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Datepicker data that requires internationalization.\n */\n\n\nvar MatDatepickerIntl = /*#__PURE__*/function () {\n  function MatDatepickerIntl() {\n    _classCallCheck(this, MatDatepickerIntl);\n\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n    /**\n     * A label for the calendar popup (used by screen readers).\n     */\n\n    this.calendarLabel = 'Calendar';\n    /**\n     * A label for the button used to open the calendar popup (used by screen readers).\n     */\n\n    this.openCalendarLabel = 'Open calendar';\n    /**\n     * A label for the previous month button (used by screen readers).\n     */\n\n    this.prevMonthLabel = 'Previous month';\n    /**\n     * A label for the next month button (used by screen readers).\n     */\n\n    this.nextMonthLabel = 'Next month';\n    /**\n     * A label for the previous year button (used by screen readers).\n     */\n\n    this.prevYearLabel = 'Previous year';\n    /**\n     * A label for the next year button (used by screen readers).\n     */\n\n    this.nextYearLabel = 'Next year';\n    /**\n     * A label for the previous multi-year button (used by screen readers).\n     */\n\n    this.prevMultiYearLabel = 'Previous 20 years';\n    /**\n     * A label for the next multi-year button (used by screen readers).\n     */\n\n    this.nextMultiYearLabel = 'Next 20 years';\n    /**\n     * A label for the 'switch to month view' button (used by screen readers).\n     */\n\n    this.switchToMonthViewLabel = 'Choose date';\n    /**\n     * A label for the 'switch to year view' button (used by screen readers).\n     */\n\n    this.switchToMultiYearViewLabel = 'Choose month and year';\n  }\n  /**\n   * Formats a range of years.\n   * @param {?} start\n   * @param {?} end\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerIntl, [{\n    key: \"formatYearRange\",\n    value: function formatYearRange(start, end) {\n      return \"\".concat(start, \" \\u2013 \").concat(end);\n    }\n  }]);\n\n  return MatDatepickerIntl;\n}();\n\nMatDatepickerIntl.ɵfac = function MatDatepickerIntl_Factory(t) {\n  return new (t || MatDatepickerIntl)();\n};\n/** @nocollapse */\n\n\nMatDatepickerIntl.ɵprov = ɵɵdefineInjectable({\n  factory: function MatDatepickerIntl_Factory() {\n    return new MatDatepickerIntl();\n  },\n  token: MatDatepickerIntl,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   * @type {?}\n   */\n  MatDatepickerIntl.prototype.changes;\n  /**\n   * A label for the calendar popup (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.calendarLabel;\n  /**\n   * A label for the button used to open the calendar popup (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.openCalendarLabel;\n  /**\n   * A label for the previous month button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.prevMonthLabel;\n  /**\n   * A label for the next month button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.nextMonthLabel;\n  /**\n   * A label for the previous year button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.prevYearLabel;\n  /**\n   * A label for the next year button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.nextYearLabel;\n  /**\n   * A label for the previous multi-year button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.prevMultiYearLabel;\n  /**\n   * A label for the next multi-year button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.nextMultiYearLabel;\n  /**\n   * A label for the 'switch to month view' button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.switchToMonthViewLabel;\n  /**\n   * A label for the 'switch to year view' button (used by screen readers).\n   * @type {?}\n   */\n\n  MatDatepickerIntl.prototype.switchToMultiYearViewLabel;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/calendar-body.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n * @template D\n */\n\n\nvar MatCalendarCell =\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n * @param {?=} cssClasses\n * @param {?=} compareValue\n * @param {?=} rawValue\n */\nfunction MatCalendarCell(value, displayValue, ariaLabel, enabled) {\n  var cssClasses = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var compareValue = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : value;\n  var rawValue = arguments.length > 6 ? arguments[6] : undefined;\n\n  _classCallCheck(this, MatCalendarCell);\n\n  this.value = value;\n  this.displayValue = displayValue;\n  this.ariaLabel = ariaLabel;\n  this.enabled = enabled;\n  this.cssClasses = cssClasses;\n  this.compareValue = compareValue;\n  this.rawValue = rawValue;\n};\n\nif (false) {\n  /** @type {?} */\n  MatCalendarCell.prototype.value;\n  /** @type {?} */\n\n  MatCalendarCell.prototype.displayValue;\n  /** @type {?} */\n\n  MatCalendarCell.prototype.ariaLabel;\n  /** @type {?} */\n\n  MatCalendarCell.prototype.enabled;\n  /** @type {?} */\n\n  MatCalendarCell.prototype.cssClasses;\n  /** @type {?} */\n\n  MatCalendarCell.prototype.compareValue;\n  /** @type {?} */\n\n  MatCalendarCell.prototype.rawValue;\n}\n/**\n * Event emitted when a date inside the calendar is triggered as a result of a user action.\n * @record\n * @template D\n */\n\n\nfunction MatCalendarUserEvent() {}\n\nif (false) {\n  /** @type {?} */\n  MatCalendarUserEvent.prototype.value;\n  /** @type {?} */\n\n  MatCalendarUserEvent.prototype.event;\n}\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\n\n\nvar MatCalendarBody = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  function MatCalendarBody(_elementRef, _ngZone) {\n    var _this = this;\n\n    _classCallCheck(this, MatCalendarBody);\n\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * The number of columns in the table.\n     */\n\n    this.numCols = 7;\n    /**\n     * The cell number of the active cell in the table.\n     */\n\n    this.activeCell = 0;\n    /**\n     * Whether a range is being selected.\n     */\n\n    this.isRange = false;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n\n    this.cellAspectRatio = 1;\n    /**\n     * Start of the preview range.\n     */\n\n    this.previewStart = null;\n    /**\n     * End of the preview range.\n     */\n\n    this.previewEnd = null;\n    /**\n     * Emits when a new value is selected.\n     */\n\n    this.selectedValueChange = new EventEmitter();\n    /**\n     * Emits when the preview has changed as a result of a user action.\n     */\n\n    this.previewChange = new EventEmitter();\n    /**\n     * Event handler for when the user enters an element\n     * inside the calendar body (e.g. by hovering in or focus).\n     */\n\n    this._enterHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      if (_this._skipNextFocus && event.type === 'focus') {\n        _this._skipNextFocus = false;\n        return;\n      } // We only need to hit the zone when we're selecting a range.\n\n\n      if (event.target && _this.isRange) {\n        /** @type {?} */\n        var cell = _this._getCellFromElement(\n        /** @type {?} */\n        event.target);\n\n        if (cell) {\n          _this._ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this.previewChange.emit({\n              value: cell.enabled ? cell : null,\n              event: event\n            });\n          });\n        }\n      }\n    };\n    /**\n     * Event handler for when the user's pointer leaves an element\n     * inside the calendar body (e.g. by hovering out or blurring).\n     */\n\n\n    this._leaveHandler =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      // We only need to hit the zone when we're selecting a range.\n      if (_this.previewEnd !== null && _this.isRange) {\n        // Only reset the preview end value when leaving cells. This looks better, because\n        // we have a gap between the cells and the rows and we don't want to remove the\n        // range just for it to show up again when the user moves a few pixels to the side.\n        if (event.target && isTableCell(\n        /** @type {?} */\n        event.target)) {\n          _this._ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this.previewChange.emit({\n              value: null,\n              event: event\n            });\n          });\n        }\n      }\n    };\n\n    _ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      var element = _elementRef.nativeElement;\n      element.addEventListener('mouseenter', _this._enterHandler, true);\n      element.addEventListener('focus', _this._enterHandler, true);\n      element.addEventListener('mouseleave', _this._leaveHandler, true);\n      element.addEventListener('blur', _this._leaveHandler, true);\n    });\n  }\n  /**\n   * Called when a cell is clicked.\n   * @param {?} cell\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _createClass(MatCalendarBody, [{\n    key: \"_cellClicked\",\n    value: function _cellClicked(cell, event) {\n      if (cell.enabled) {\n        this.selectedValueChange.emit({\n          value: cell.value,\n          event: event\n        });\n      }\n    }\n    /**\n     * Returns whether a cell should be marked as selected.\n     * @param {?} cell\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSelected\",\n    value: function _isSelected(cell) {\n      return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var columnChanges = changes['numCols'];\n      var rows = this.rows,\n          numCols = this.numCols;\n\n      if (changes['rows'] || columnChanges) {\n        this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n      }\n\n      if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n        this._cellPadding = \"\".concat(50 * this.cellAspectRatio / numCols, \"%\");\n      }\n\n      if (columnChanges || !this._cellWidth) {\n        this._cellWidth = \"\".concat(100 / numCols, \"%\");\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      /** @type {?} */\n      var element = this._elementRef.nativeElement;\n      element.removeEventListener('mouseenter', this._enterHandler, true);\n      element.removeEventListener('focus', this._enterHandler, true);\n      element.removeEventListener('mouseleave', this._leaveHandler, true);\n      element.removeEventListener('blur', this._leaveHandler, true);\n    }\n    /**\n     * Returns whether a cell is active.\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isActiveCell\",\n    value: function _isActiveCell(rowIndex, colIndex) {\n      /** @type {?} */\n      var cellNumber = rowIndex * this.numCols + colIndex; // Account for the fact that the first row may not have as many cells.\n\n      if (rowIndex) {\n        cellNumber -= this._firstRowOffset;\n      }\n\n      return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @param {?=} movePreview\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      var _this2 = this;\n\n      var movePreview = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this2._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          /** @type {?} */\n          var activeCell = _this2._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n          if (activeCell) {\n            if (!movePreview) {\n              _this2._skipNextFocus = true;\n            }\n\n            activeCell.focus();\n          }\n        });\n      });\n    }\n    /**\n     * Gets whether a value is the start of the main range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRangeStart\",\n    value: function _isRangeStart(value) {\n      return isStart(value, this.startValue, this.endValue);\n    }\n    /**\n     * Gets whether a value is the end of the main range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRangeEnd\",\n    value: function _isRangeEnd(value) {\n      return isEnd(value, this.startValue, this.endValue);\n    }\n    /**\n     * Gets whether a value is within the currently-selected range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isInRange\",\n    value: function _isInRange(value) {\n      return isInRange(value, this.startValue, this.endValue, this.isRange);\n    }\n    /**\n     * Gets whether a value is the start of the comparison range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isComparisonStart\",\n    value: function _isComparisonStart(value) {\n      return isStart(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /**\n     * Whether the cell is a start bridge cell between the main and comparison ranges.\n     * @param {?} value\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isComparisonBridgeStart\",\n    value: function _isComparisonBridgeStart(value, rowIndex, colIndex) {\n      if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var previousCell = this.rows[rowIndex][colIndex - 1];\n\n      if (!previousCell) {\n        /** @type {?} */\n        var previousRow = this.rows[rowIndex - 1];\n        previousCell = previousRow && previousRow[previousRow.length - 1];\n      }\n\n      return previousCell && !this._isRangeEnd(previousCell.compareValue);\n    }\n    /**\n     * Whether the cell is an end bridge cell between the main and comparison ranges.\n     * @param {?} value\n     * @param {?} rowIndex\n     * @param {?} colIndex\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isComparisonBridgeEnd\",\n    value: function _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n      if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var nextCell = this.rows[rowIndex][colIndex + 1];\n\n      if (!nextCell) {\n        /** @type {?} */\n        var nextRow = this.rows[rowIndex + 1];\n        nextCell = nextRow && nextRow[0];\n      }\n\n      return nextCell && !this._isRangeStart(nextCell.compareValue);\n    }\n    /**\n     * Gets whether a value is the end of the comparison range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isComparisonEnd\",\n    value: function _isComparisonEnd(value) {\n      return isEnd(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /**\n     * Gets whether a value is within the current comparison range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isInComparisonRange\",\n    value: function _isInComparisonRange(value) {\n      return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n    }\n    /**\n     * Gets whether a value is the start of the preview range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPreviewStart\",\n    value: function _isPreviewStart(value) {\n      return isStart(value, this.previewStart, this.previewEnd);\n    }\n    /**\n     * Gets whether a value is the end of the preview range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isPreviewEnd\",\n    value: function _isPreviewEnd(value) {\n      return isEnd(value, this.previewStart, this.previewEnd);\n    }\n    /**\n     * Gets whether a value is inside the preview range.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isInPreview\",\n    value: function _isInPreview(value) {\n      return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n    }\n    /**\n     * Finds the MatCalendarCell that corresponds to a DOM node.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCellFromElement\",\n    value: function _getCellFromElement(element) {\n      /** @type {?} */\n      var cell;\n\n      if (isTableCell(element)) {\n        cell = element;\n      } else if (isTableCell(\n      /** @type {?} */\n      element.parentNode)) {\n        cell =\n        /** @type {?} */\n        element.parentNode;\n      }\n\n      if (cell) {\n        /** @type {?} */\n        var row = cell.getAttribute('data-mat-row');\n        /** @type {?} */\n\n        var col = cell.getAttribute('data-mat-col');\n\n        if (row && col) {\n          return this.rows[parseInt(row)][parseInt(col)];\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return MatCalendarBody;\n}();\n\nMatCalendarBody.ɵfac = function MatCalendarBody_Factory(t) {\n  return new (t || MatCalendarBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nMatCalendarBody.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCalendarBody,\n  selectors: [[\"\", \"mat-calendar-body\", \"\"]],\n  hostAttrs: [\"role\", \"grid\", \"aria-readonly\", \"true\", 1, \"mat-calendar-body\"],\n  inputs: {\n    numCols: \"numCols\",\n    activeCell: \"activeCell\",\n    isRange: \"isRange\",\n    cellAspectRatio: \"cellAspectRatio\",\n    previewStart: \"previewStart\",\n    previewEnd: \"previewEnd\",\n    label: \"label\",\n    rows: \"rows\",\n    todayValue: \"todayValue\",\n    startValue: \"startValue\",\n    endValue: \"endValue\",\n    labelMinRequiredCells: \"labelMinRequiredCells\",\n    comparisonStart: \"comparisonStart\",\n    comparisonEnd: \"comparisonEnd\"\n  },\n  outputs: {\n    selectedValueChange: \"selectedValueChange\",\n    previewChange: \"previewChange\"\n  },\n  exportAs: [\"matCalendarBody\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  attrs: _c0,\n  decls: 2,\n  vars: 2,\n  consts: [[\"aria-hidden\", \"true\", 4, \"ngIf\"], [\"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"aria-hidden\", \"true\"], [1, \"mat-calendar-body-label\"], [\"role\", \"row\"], [\"aria-hidden\", \"true\", \"class\", \"mat-calendar-body-label\", 3, \"paddingTop\", \"paddingBottom\", 4, \"ngIf\"], [\"role\", \"gridcell\", \"class\", \"mat-calendar-body-cell mat-focus-indicator\", 3, \"ngClass\", \"tabindex\", \"mat-calendar-body-disabled\", \"mat-calendar-body-active\", \"mat-calendar-body-range-start\", \"mat-calendar-body-range-end\", \"mat-calendar-body-in-range\", \"mat-calendar-body-comparison-bridge-start\", \"mat-calendar-body-comparison-bridge-end\", \"mat-calendar-body-comparison-start\", \"mat-calendar-body-comparison-end\", \"mat-calendar-body-in-comparison-range\", \"mat-calendar-body-preview-start\", \"mat-calendar-body-preview-end\", \"mat-calendar-body-in-preview\", \"width\", \"paddingTop\", \"paddingBottom\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-body-label\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell\", \"mat-focus-indicator\", 3, \"ngClass\", \"tabindex\", \"click\"], [1, \"mat-calendar-body-cell-content\"], [1, \"mat-calendar-body-cell-preview\"]],\n  template: function MatCalendarBody_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatCalendarBody_tr_0_Template, 3, 6, \"tr\", 0);\n      ɵngcc0.ɵɵtemplate(1, MatCalendarBody_tr_1_Template, 3, 2, \"tr\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._firstRowOffset < ctx.labelMinRequiredCells);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.rows);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgClass],\n  styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}[dir=rtl] .mat-calendar-body-label{text-align:right}@media(hover: none){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){background-color:transparent}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCalendarBody.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }];\n};\n\nMatCalendarBody.propDecorators = {\n  label: [{\n    type: Input\n  }],\n  rows: [{\n    type: Input\n  }],\n  todayValue: [{\n    type: Input\n  }],\n  startValue: [{\n    type: Input\n  }],\n  endValue: [{\n    type: Input\n  }],\n  labelMinRequiredCells: [{\n    type: Input\n  }],\n  numCols: [{\n    type: Input\n  }],\n  activeCell: [{\n    type: Input\n  }],\n  isRange: [{\n    type: Input\n  }],\n  cellAspectRatio: [{\n    type: Input\n  }],\n  comparisonStart: [{\n    type: Input\n  }],\n  comparisonEnd: [{\n    type: Input\n  }],\n  previewStart: [{\n    type: Input\n  }],\n  previewEnd: [{\n    type: Input\n  }],\n  selectedValueChange: [{\n    type: Output\n  }],\n  previewChange: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCalendarBody, [{\n    type: Component,\n    args: [{\n      selector: '[mat-calendar-body]',\n      template: \"<!--\\n  If there's not enough space in the first row, create a separate label row. We mark this row as\\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\\n-->\\n<tr *ngIf=\\\"_firstRowOffset < labelMinRequiredCells\\\" aria-hidden=\\\"true\\\">\\n  <td class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"numCols\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{label}}\\n  </td>\\n</tr>\\n\\n<!-- Create the first row separately so we can include a special spacer cell. -->\\n<tr *ngFor=\\\"let row of rows; let rowIndex = index\\\" role=\\\"row\\\">\\n  <!--\\n    We mark this cell as aria-hidden so it doesn't get read out as one of the days in the week.\\n    The aspect ratio of the table cells is maintained by setting the top and bottom padding as a\\n    percentage of the width (a variant of the trick described here:\\n    https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\\n  -->\\n  <td *ngIf=\\\"rowIndex === 0 && _firstRowOffset\\\"\\n      aria-hidden=\\\"true\\\"\\n      class=\\\"mat-calendar-body-label\\\"\\n      [attr.colspan]=\\\"_firstRowOffset\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\\n  </td>\\n  <td *ngFor=\\\"let item of row; let colIndex = index\\\"\\n      role=\\\"gridcell\\\"\\n      class=\\\"mat-calendar-body-cell mat-focus-indicator\\\"\\n      [ngClass]=\\\"item.cssClasses\\\"\\n      [tabindex]=\\\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\\\"\\n      [attr.data-mat-row]=\\\"rowIndex\\\"\\n      [attr.data-mat-col]=\\\"colIndex\\\"\\n      [class.mat-calendar-body-disabled]=\\\"!item.enabled\\\"\\n      [class.mat-calendar-body-active]=\\\"_isActiveCell(rowIndex, colIndex)\\\"\\n      [class.mat-calendar-body-range-start]=\\\"_isRangeStart(item.compareValue)\\\"\\n      [class.mat-calendar-body-range-end]=\\\"_isRangeEnd(item.compareValue)\\\"\\n      [class.mat-calendar-body-in-range]=\\\"_isInRange(item.compareValue)\\\"\\n      [class.mat-calendar-body-comparison-bridge-start]=\\\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\\\"\\n      [class.mat-calendar-body-comparison-bridge-end]=\\\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\\\"\\n      [class.mat-calendar-body-comparison-start]=\\\"_isComparisonStart(item.compareValue)\\\"\\n      [class.mat-calendar-body-comparison-end]=\\\"_isComparisonEnd(item.compareValue)\\\"\\n      [class.mat-calendar-body-in-comparison-range]=\\\"_isInComparisonRange(item.compareValue)\\\"\\n      [class.mat-calendar-body-preview-start]=\\\"_isPreviewStart(item.compareValue)\\\"\\n      [class.mat-calendar-body-preview-end]=\\\"_isPreviewEnd(item.compareValue)\\\"\\n      [class.mat-calendar-body-in-preview]=\\\"_isInPreview(item.compareValue)\\\"\\n      [attr.aria-label]=\\\"item.ariaLabel\\\"\\n      [attr.aria-disabled]=\\\"!item.enabled || null\\\"\\n      [attr.aria-selected]=\\\"_isSelected(item)\\\"\\n      (click)=\\\"_cellClicked(item, $event)\\\"\\n      [style.width]=\\\"_cellWidth\\\"\\n      [style.paddingTop]=\\\"_cellPadding\\\"\\n      [style.paddingBottom]=\\\"_cellPadding\\\">\\n      <div class=\\\"mat-calendar-body-cell-content\\\"\\n        [class.mat-calendar-body-selected]=\\\"_isSelected(item)\\\"\\n        [class.mat-calendar-body-today]=\\\"todayValue === item.compareValue\\\">\\n        {{item.displayValue}}\\n      </div>\\n      <div class=\\\"mat-calendar-body-cell-preview\\\"></div>\\n  </td>\\n</tr>\\n\",\n      host: {\n        'class': 'mat-calendar-body',\n        'role': 'grid',\n        'aria-readonly': 'true'\n      },\n      exportAs: 'matCalendarBody',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.mat-calendar-body-cell{position:relative;height:0;line-height:0;text-align:center;outline:none;cursor:pointer}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-cell-content{position:absolute;top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px}.cdk-high-contrast-active .mat-calendar-body-cell-content{border:none}.cdk-high-contrast-active .mat-datepicker-popup:not(:empty),.cdk-high-contrast-active .mat-calendar-body-selected{outline:solid 1px}.cdk-high-contrast-active .mat-calendar-body-today{outline:dotted 1px}.cdk-high-contrast-active .cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected),.cdk-high-contrast-active .cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){outline:dotted 2px}[dir=rtl] .mat-calendar-body-label{text-align:right}@media(hover: none){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected){background-color:transparent}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    numCols: [{\n      type: Input\n    }],\n    activeCell: [{\n      type: Input\n    }],\n    isRange: [{\n      type: Input\n    }],\n    cellAspectRatio: [{\n      type: Input\n    }],\n    previewStart: [{\n      type: Input\n    }],\n    previewEnd: [{\n      type: Input\n    }],\n    selectedValueChange: [{\n      type: Output\n    }],\n    previewChange: [{\n      type: Output\n    }],\n    label: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    todayValue: [{\n      type: Input\n    }],\n    startValue: [{\n      type: Input\n    }],\n    endValue: [{\n      type: Input\n    }],\n    labelMinRequiredCells: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Used to skip the next focus event when rendering the preview range.\n   * We need a flag like this, because some browsers fire focus events asynchronously.\n   * @type {?}\n   * @private\n   */\n  MatCalendarBody.prototype._skipNextFocus;\n  /**\n   * The label for the table. (e.g. \"Jan 2017\").\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.label;\n  /**\n   * The cells to display in the table.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.rows;\n  /**\n   * The value in the table that corresponds to today.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.todayValue;\n  /**\n   * Start value of the selected date range.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.startValue;\n  /**\n   * End value of the selected date range.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.endValue;\n  /**\n   * The minimum number of free cells needed to fit the label in the first row.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.labelMinRequiredCells;\n  /**\n   * The number of columns in the table.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.numCols;\n  /**\n   * The cell number of the active cell in the table.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.activeCell;\n  /**\n   * Whether a range is being selected.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.isRange;\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.cellAspectRatio;\n  /**\n   * Start of the comparison range.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.comparisonStart;\n  /**\n   * End of the comparison range.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.comparisonEnd;\n  /**\n   * Start of the preview range.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.previewStart;\n  /**\n   * End of the preview range.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.previewEnd;\n  /**\n   * Emits when a new value is selected.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.selectedValueChange;\n  /**\n   * Emits when the preview has changed as a result of a user action.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype.previewChange;\n  /**\n   * The number of blank cells to put at the beginning for the first row.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype._firstRowOffset;\n  /**\n   * Padding for the individual date cells.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype._cellPadding;\n  /**\n   * Width of an individual cell.\n   * @type {?}\n   */\n\n  MatCalendarBody.prototype._cellWidth;\n  /**\n   * Event handler for when the user enters an element\n   * inside the calendar body (e.g. by hovering in or focus).\n   * @type {?}\n   * @private\n   */\n\n  MatCalendarBody.prototype._enterHandler;\n  /**\n   * Event handler for when the user's pointer leaves an element\n   * inside the calendar body (e.g. by hovering out or blurring).\n   * @type {?}\n   * @private\n   */\n\n  MatCalendarBody.prototype._leaveHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendarBody.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendarBody.prototype._ngZone;\n}\n/**\n * Checks whether a node is a table cell element.\n * @param {?} node\n * @return {?}\n */\n\n\nfunction isTableCell(node) {\n  return node.nodeName === 'TD';\n}\n/**\n * Checks whether a value is the start of a range.\n * @param {?} value\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\n\n\nfunction isStart(value, start, end) {\n  return end !== null && start !== end && value < end && value === start;\n}\n/**\n * Checks whether a value is the end of a range.\n * @param {?} value\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\n\n\nfunction isEnd(value, start, end) {\n  return start !== null && start !== end && value >= start && value === end;\n}\n/**\n * Checks whether a value is inside of a range.\n * @param {?} value\n * @param {?} start\n * @param {?} end\n * @param {?} rangeEnabled\n * @return {?}\n */\n\n\nfunction isInRange(value, start, end, rangeEnabled) {\n  return rangeEnabled && start !== null && end !== null && start !== end && value >= start && value <= end;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/date-selection-model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A class representing a range of dates.\n * @template D\n */\n\n\nvar DateRange =\n/**\n * @param {?} start\n * @param {?} end\n */\nfunction DateRange(start, end) {\n  _classCallCheck(this, DateRange);\n\n  this.start = start;\n  this.end = end;\n};\n\nif (false) {\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   * @type {?}\n   * @private\n   */\n  DateRange.prototype._disableStructuralEquivalency;\n  /**\n   * The start date of the range.\n   * @type {?}\n   */\n\n  DateRange.prototype.start;\n  /**\n   * The end date of the range.\n   * @type {?}\n   */\n\n  DateRange.prototype.end;\n}\n/**\n * Event emitted by the date selection model when its selection changes.\n * @record\n * @template S\n */\n\n\nfunction DateSelectionModelChange() {}\n\nif (false) {\n  /**\n   * New value for the selection.\n   * @type {?}\n   */\n  DateSelectionModelChange.prototype.selection;\n  /**\n   * Object that triggered the change.\n   * @type {?}\n   */\n\n  DateSelectionModelChange.prototype.source;\n}\n/**\n * A selection model containing a date selection.\n * @abstract\n * @template S, D\n */\n\n\nvar MatDateSelectionModel = /*#__PURE__*/function () {\n  /**\n   * @protected\n   * @param {?} selection\n   * @param {?} _adapter\n   */\n  function MatDateSelectionModel(selection, _adapter) {\n    _classCallCheck(this, MatDateSelectionModel);\n\n    this.selection = selection;\n    this._adapter = _adapter;\n    this._selectionChanged = new Subject();\n    /**\n     * Emits when the selection has changed.\n     */\n\n    this.selectionChanged = this._selectionChanged.asObservable();\n    this.selection = selection;\n  }\n  /**\n   * Updates the current selection in the model.\n   * @param {?} value New selection that should be assigned.\n   * @param {?} source Object that triggered the selection change.\n   * @return {?}\n   */\n\n\n  _createClass(MatDateSelectionModel, [{\n    key: \"updateSelection\",\n    value: function updateSelection(value, source) {\n      /** @type {?} */\n      this.selection = value;\n\n      this._selectionChanged.next({\n        selection: value,\n        source: source\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._selectionChanged.complete();\n    }\n    /**\n     * @protected\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isValidDateInstance\",\n    value: function _isValidDateInstance(date) {\n      return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n    }\n  }]);\n\n  return MatDateSelectionModel;\n}();\n\nMatDateSelectionModel.ɵfac = function MatDateSelectionModel_Factory(t) {\n  return new (t || MatDateSelectionModel)(ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter));\n};\n\nMatDateSelectionModel.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDateSelectionModel\n});\n/** @nocollapse */\n\nMatDateSelectionModel.ctorParameters = function () {\n  return [{\n    type: undefined\n  }, {\n    type: DateAdapter\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDateSelectionModel, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined\n    }, {\n      type: ɵngcc2.DateAdapter\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatDateSelectionModel.prototype._selectionChanged;\n  /**\n   * Emits when the selection has changed.\n   * @type {?}\n   */\n\n  MatDateSelectionModel.prototype.selectionChanged;\n  /**\n   * The current selection.\n   * @type {?}\n   */\n\n  MatDateSelectionModel.prototype.selection;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatDateSelectionModel.prototype._adapter;\n  /**\n   * Adds a date to the current selection.\n   * @abstract\n   * @param {?} date\n   * @return {?}\n   */\n\n  MatDateSelectionModel.prototype.add = function (date) {};\n  /**\n   * Checks whether the current selection is valid.\n   * @abstract\n   * @return {?}\n   */\n\n\n  MatDateSelectionModel.prototype.isValid = function () {};\n  /**\n   * Checks whether the current selection is complete.\n   * @abstract\n   * @return {?}\n   */\n\n\n  MatDateSelectionModel.prototype.isComplete = function () {};\n}\n/**\n * A selection model that contains a single date.\n * @template D\n */\n\n\nvar MatSingleDateSelectionModel = /*#__PURE__*/function (_MatDateSelectionMode) {\n  _inherits(MatSingleDateSelectionModel, _MatDateSelectionMode);\n\n  var _super = _createSuper(MatSingleDateSelectionModel);\n\n  /**\n   * @param {?} adapter\n   */\n  function MatSingleDateSelectionModel(adapter) {\n    _classCallCheck(this, MatSingleDateSelectionModel);\n\n    return _super.call(this, null, adapter);\n  }\n  /**\n   * Adds a date to the current selection. In the case of a single date selection, the added date\n   * simply overwrites the previous selection\n   * @param {?} date\n   * @return {?}\n   */\n\n\n  _createClass(MatSingleDateSelectionModel, [{\n    key: \"add\",\n    value: function add(date) {\n      _get(_getPrototypeOf(MatSingleDateSelectionModel.prototype), \"updateSelection\", this).call(this, date, this);\n    }\n    /**\n     * Checks whether the current selection is valid.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return this.selection != null && this._isValidDateInstance(this.selection);\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a single date selection, this\n     * is true if the current selection is not null.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isComplete\",\n    value: function isComplete() {\n      return this.selection != null;\n    }\n  }]);\n\n  return MatSingleDateSelectionModel;\n}(MatDateSelectionModel);\n\nMatSingleDateSelectionModel.ɵfac = function MatSingleDateSelectionModel_Factory(t) {\n  return new (t || MatSingleDateSelectionModel)(ɵngcc0.ɵɵinject(ɵngcc2.DateAdapter));\n};\n\nMatSingleDateSelectionModel.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatSingleDateSelectionModel,\n  factory: MatSingleDateSelectionModel.ɵfac\n});\n/** @nocollapse */\n\nMatSingleDateSelectionModel.ctorParameters = function () {\n  return [{\n    type: DateAdapter\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSingleDateSelectionModel, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc2.DateAdapter\n    }];\n  }, null);\n})();\n/**\n * A selection model that contains a date range.\n * @template D\n */\n\n\nvar MatRangeDateSelectionModel = /*#__PURE__*/function (_MatDateSelectionMode2) {\n  _inherits(MatRangeDateSelectionModel, _MatDateSelectionMode2);\n\n  var _super2 = _createSuper(MatRangeDateSelectionModel);\n\n  /**\n   * @param {?} adapter\n   */\n  function MatRangeDateSelectionModel(adapter) {\n    _classCallCheck(this, MatRangeDateSelectionModel);\n\n    return _super2.call(this, new DateRange(null, null), adapter);\n  }\n  /**\n   * Adds a date to the current selection. In the case of a date range selection, the added date\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\n   * @param {?} date\n   * @return {?}\n   */\n\n\n  _createClass(MatRangeDateSelectionModel, [{\n    key: \"add\",\n    value: function add(date) {\n      var _this$selection = this.selection,\n          start = _this$selection.start,\n          end = _this$selection.end;\n\n      if (start == null) {\n        start = date;\n      } else if (end == null) {\n        end = date;\n      } else {\n        start = date;\n        end = null;\n      }\n\n      _get(_getPrototypeOf(MatRangeDateSelectionModel.prototype), \"updateSelection\", this).call(this, new DateRange(start, end), this);\n    }\n    /**\n     * Checks whether the current selection is valid.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var _this$selection2 = this.selection,\n          start = _this$selection2.start,\n          end = _this$selection2.end; // Empty ranges are valid.\n\n      if (start == null && end == null) {\n        return true;\n      } // Complete ranges are only valid if both dates are valid and the start is before the end.\n\n\n      if (start != null && end != null) {\n        return this._isValidDateInstance(start) && this._isValidDateInstance(end) && this._adapter.compareDate(start, end) <= 0;\n      } // Partial ranges are valid if the start/end is valid.\n\n\n      return (start == null || this._isValidDateInstance(start)) && (end == null || this._isValidDateInstance(end));\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a date range selection, this\n     * is true if the current selection has a non-null `start` and `end`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isComplete\",\n    value: function isComplete() {\n      return this.selection.start != null && this.selection.end != null;\n    }\n  }]);\n\n  return MatRangeDateSelectionModel;\n}(MatDateSelectionModel);\n\nMatRangeDateSelectionModel.ɵfac = function MatRangeDateSelectionModel_Factory(t) {\n  return new (t || MatRangeDateSelectionModel)(ɵngcc0.ɵɵinject(ɵngcc2.DateAdapter));\n};\n\nMatRangeDateSelectionModel.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MatRangeDateSelectionModel,\n  factory: MatRangeDateSelectionModel.ɵfac\n});\n/** @nocollapse */\n\nMatRangeDateSelectionModel.ctorParameters = function () {\n  return [{\n    type: DateAdapter\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatRangeDateSelectionModel, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc2.DateAdapter\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n * @param {?} parent\n * @param {?} adapter\n * @return {?}\n */\n\n\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n/**\n * Used to provide a single selection model to a component.\n * @type {?}\n */\n\n\nvar MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY\n};\n/**\n * \\@docs-private\n * @param {?} parent\n * @param {?} adapter\n * @return {?}\n */\n\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n/**\n * Used to provide a range selection model to a component.\n * @type {?}\n */\n\n\nvar MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/date-range-selection-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token used to customize the date range selection behavior.\n * @type {?}\n */\n\nvar MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/**\n * Object that can be provided in order to customize the date range selection behavior.\n * @record\n * @template D\n */\n\nfunction MatDateRangeSelectionStrategy() {}\n\nif (false) {\n  /**\n   * Called when the user has finished selecting a value.\n   * @param {?} date Date that was selected. Will be null if the user cleared the selection.\n   * @param {?} currentRange Range that is currently show in the calendar.\n   * @param {?} event DOM event that triggered the selection. Currently only corresponds to a `click`\n   *    event, but it may get expanded in the future.\n   * @return {?}\n   */\n  MatDateRangeSelectionStrategy.prototype.selectionFinished = function (date, currentRange, event) {};\n  /**\n   * Called when the user has activated a new date (e.g. by hovering over\n   * it or moving focus) and the calendar tries to display a date range.\n   *\n   * @param {?} activeDate Date that the user has activated. Will be null if the user moved\n   *    focus to an element that's no a calendar cell.\n   * @param {?} currentRange Range that is currently shown in the calendar.\n   * @param {?} event DOM event that caused the preview to be changed. Will be either a\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\n   * @return {?}\n   */\n\n\n  MatDateRangeSelectionStrategy.prototype.createPreview = function (activeDate, currentRange, event) {};\n}\n/**\n * Provides the default date range selection behavior.\n * @template D\n */\n\n\nvar DefaultMatCalendarRangeStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dateAdapter\n   */\n  function DefaultMatCalendarRangeStrategy(_dateAdapter) {\n    _classCallCheck(this, DefaultMatCalendarRangeStrategy);\n\n    this._dateAdapter = _dateAdapter;\n  }\n  /**\n   * @param {?} date\n   * @param {?} currentRange\n   * @return {?}\n   */\n\n\n  _createClass(DefaultMatCalendarRangeStrategy, [{\n    key: \"selectionFinished\",\n    value: function selectionFinished(date, currentRange) {\n      var start = currentRange.start,\n          end = currentRange.end;\n\n      if (start == null) {\n        start = date;\n      } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n        end = date;\n      } else {\n        start = date;\n        end = null;\n      }\n\n      return new DateRange(start, end);\n    }\n    /**\n     * @param {?} activeDate\n     * @param {?} currentRange\n     * @return {?}\n     */\n\n  }, {\n    key: \"createPreview\",\n    value: function createPreview(activeDate, currentRange) {\n      /** @type {?} */\n      var start = null;\n      /** @type {?} */\n\n      var end = null;\n\n      if (currentRange.start && !currentRange.end && activeDate) {\n        start = currentRange.start;\n        end = activeDate;\n      }\n\n      return new DateRange(start, end);\n    }\n  }]);\n\n  return DefaultMatCalendarRangeStrategy;\n}();\n\nDefaultMatCalendarRangeStrategy.ɵfac = function DefaultMatCalendarRangeStrategy_Factory(t) {\n  return new (t || DefaultMatCalendarRangeStrategy)(ɵngcc0.ɵɵinject(ɵngcc2.DateAdapter));\n};\n\nDefaultMatCalendarRangeStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: DefaultMatCalendarRangeStrategy,\n  factory: DefaultMatCalendarRangeStrategy.ɵfac\n});\n/** @nocollapse */\n\nDefaultMatCalendarRangeStrategy.ctorParameters = function () {\n  return [{\n    type: DateAdapter\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DefaultMatCalendarRangeStrategy, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc2.DateAdapter\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  DefaultMatCalendarRangeStrategy.prototype._dateAdapter;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/month-view.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n * @template D\n */\n\nvar MatMonthView = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateFormats\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   * @param {?=} _rangeStrategy\n   */\n  function MatMonthView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir, _rangeStrategy) {\n    _classCallCheck(this, MatMonthView);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateFormats = _dateFormats;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._rangeStrategy = _rangeStrategy;\n    this._rerenderSubscription = Subscription.EMPTY;\n    /**\n     * Emits when a new date is selected.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n\n    this._userSelection = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n\n    this.activeDateChange = new EventEmitter();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   * @return {?}\n   */\n\n\n  _createClass(MatMonthView, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this3._init();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Handles when a new date is selected.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dateSelected\",\n    value: function _dateSelected(event) {\n      /** @type {?} */\n      var date = event.value;\n      /** @type {?} */\n\n      var selectedYear = this._dateAdapter.getYear(this.activeDate);\n      /** @type {?} */\n\n\n      var selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      /** @type {?} */\n\n\n      var selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n      /** @type {?} */\n\n\n      var rangeStartDate;\n      /** @type {?} */\n\n      var rangeEndDate;\n\n      if (this._selected instanceof DateRange) {\n        rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n        rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n      } else {\n        rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n      }\n\n      if (rangeStartDate !== date || rangeEndDate !== date) {\n        this.selectedChange.emit(selectedDate);\n      }\n\n      this._userSelection.emit({\n        value: selectedDate,\n        event: event.event\n      });\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in month view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleCalendarBodyKeydown\",\n    value: function _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n          break;\n\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n          break;\n\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n          break;\n\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n          break;\n\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n          break;\n\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n          break;\n\n        case PAGE_UP:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n          break;\n\n        case PAGE_DOWN:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n          break;\n\n        case ENTER:\n        case SPACE:\n          if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n            this._dateSelected({\n              value: this._dateAdapter.getDate(this._activeDate),\n              event: event\n            }); // Prevent unexpected default actions such as form submission.\n\n\n            event.preventDefault();\n          }\n\n          return;\n\n        case ESCAPE:\n          // Abort the current range selection if the user presses escape mid-selection.\n          if (this._previewEnd != null) {\n            this._previewStart = this._previewEnd = null;\n            this.selectedChange.emit(null);\n\n            this._userSelection.emit({\n              value: null,\n              event: event\n            });\n\n            event.preventDefault();\n            event.stopPropagation(); // Prevents the overlay from closing.\n          }\n\n          return;\n\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n\n      this._focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n\n      event.preventDefault();\n    }\n    /**\n     * Initializes this month view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._setRanges(this.selected);\n\n      this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n      this._monthLabel = this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n      /** @type {?} */\n\n      var firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n\n      this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n      this._initWeekdays();\n\n      this._createWeekCells();\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @param {?=} movePreview\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell(movePreview) {\n      this._matCalendarBody._focusActiveCell(movePreview);\n    }\n    /**\n     * Called when the user has activated a new cell and the preview needs to be updated.\n     * @param {?} __0\n     * @return {?}\n     */\n\n  }, {\n    key: \"_previewChanged\",\n    value: function _previewChanged(_ref) {\n      var event = _ref.event,\n          cell = _ref.value;\n\n      if (this._rangeStrategy) {\n        // We can assume that this will be a range, because preview\n        // events aren't fired for single date selections.\n\n        /** @type {?} */\n        var _value = cell ?\n        /** @type {?} */\n        cell.rawValue : null;\n        /** @type {?} */\n\n\n        var previewRange = this._rangeStrategy.createPreview(_value,\n        /** @type {?} */\n        this.selected, event);\n\n        this._previewStart = this._getCellCompareValue(previewRange.start);\n        this._previewEnd = this._getCellCompareValue(previewRange.end); // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n        // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n        // when navigating one month back using the keyboard which will cause this handler\n        // to throw a \"changed after checked\" error when updating the preview state.\n\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Initializes the weekdays.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initWeekdays\",\n    value: function _initWeekdays() {\n      /** @type {?} */\n      var firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n      /** @type {?} */\n\n\n      var narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n      /** @type {?} */\n\n\n      var longWeekdays = this._dateAdapter.getDayOfWeekNames('long'); // Rotate the labels for days of the week based on the configured first day of the week.\n\n      /** @type {?} */\n\n\n      var weekdays = longWeekdays.map(\n      /**\n      * @param {?} long\n      * @param {?} i\n      * @return {?}\n      */\n      function (long, i) {\n        return {\n          long: long,\n          narrow: narrowWeekdays[i]\n        };\n      });\n      this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    }\n    /**\n     * Creates MatCalendarCells for the dates in this month.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createWeekCells\",\n    value: function _createWeekCells() {\n      /** @type {?} */\n      var daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n      /** @type {?} */\n\n\n      var dateNames = this._dateAdapter.getDateNames();\n\n      this._weeks = [[]];\n\n      for (var i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n        if (cell == DAYS_PER_WEEK) {\n          this._weeks.push([]);\n\n          cell = 0;\n        }\n        /** @type {?} */\n\n\n        var date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n        /** @type {?} */\n\n\n        var enabled = this._shouldEnableDate(date);\n        /** @type {?} */\n\n\n        var ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n        /** @type {?} */\n\n\n        var cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n        this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses,\n        /** @type {?} */\n        this._getCellCompareValue(date), date));\n      }\n    }\n    /**\n     * Date filter for the month\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldEnableDate\",\n    value: function _shouldEnableDate(date) {\n      return !!date && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) && (!this.dateFilter || this.dateFilter(date));\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDateInCurrentMonth\",\n    value: function _getDateInCurrentMonth(date) {\n      return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n    }\n    /**\n     * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n     * @private\n     * @param {?} d1\n     * @param {?} d2\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasSameMonthAndYear\",\n    value: function _hasSameMonthAndYear(d1, d2) {\n      return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /**\n     * Gets the value that will be used to one cell to another.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCellCompareValue\",\n    value: function _getCellCompareValue(date) {\n      if (date) {\n        // We use the time since the Unix epoch to compare dates in this view, rather than the\n        // cell values, because we need to support ranges that span across multiple months/years.\n\n        /** @type {?} */\n        var year = this._dateAdapter.getYear(date);\n        /** @type {?} */\n\n\n        var month = this._dateAdapter.getMonth(date);\n        /** @type {?} */\n\n\n        var day = this._dateAdapter.getDate(date);\n\n        return new Date(year, month, day).getTime();\n      }\n\n      return null;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /**\n     * Sets the current range based on a model value.\n     * @private\n     * @param {?} selectedValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setRanges\",\n    value: function _setRanges(selectedValue) {\n      if (selectedValue instanceof DateRange) {\n        this._rangeStart = this._getCellCompareValue(selectedValue.start);\n        this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n        this._isRange = true;\n      } else {\n        this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n        this._isRange = false;\n      }\n\n      this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n      this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n    }\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._activeDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n      if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n        this._init();\n      }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n\n      this._setRanges(this._selected);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }]);\n\n  return MatMonthView;\n}();\n\nMatMonthView.ɵfac = function MatMonthView_Factory(t) {\n  return new (t || MatMonthView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_SELECTION_STRATEGY, 8));\n};\n\nMatMonthView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatMonthView,\n  selectors: [[\"mat-month-view\"]],\n  viewQuery: function MatMonthView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    }\n  },\n  inputs: {\n    activeDate: \"activeDate\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    dateFilter: \"dateFilter\",\n    dateClass: \"dateClass\",\n    comparisonStart: \"comparisonStart\",\n    comparisonEnd: \"comparisonEnd\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    _userSelection: \"_userSelection\",\n    activeDateChange: \"activeDateChange\"\n  },\n  exportAs: [\"matMonthView\"],\n  decls: 7,\n  vars: 13,\n  consts: [[\"role\", \"presentation\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"scope\", \"col\", 4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"7\", \"aria-hidden\", \"true\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"isRange\", \"labelMinRequiredCells\", \"activeCell\", \"selectedValueChange\", \"previewChange\", \"keydown\"], [\"scope\", \"col\"]],\n  template: function MatMonthView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tr\");\n      ɵngcc0.ɵɵtemplate(3, MatMonthView_th_3_Template, 2, 2, \"th\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"tr\");\n      ɵngcc0.ɵɵelement(5, \"th\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"tbody\", 4);\n      ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatMonthView_Template_tbody_selectedValueChange_6_listener($event) {\n        return ctx._dateSelected($event);\n      })(\"previewChange\", function MatMonthView_Template_tbody_previewChange_6_listener($event) {\n        return ctx._previewChanged($event);\n      })(\"keydown\", function MatMonthView_Template_tbody_keydown_6_listener($event) {\n        return ctx._handleCalendarBodyKeydown($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._weekdays);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"label\", ctx._monthLabel)(\"rows\", ctx._weeks)(\"todayValue\", ctx._todayDate)(\"startValue\", ctx._rangeStart)(\"endValue\", ctx._rangeEnd)(\"comparisonStart\", ctx._comparisonRangeStart)(\"comparisonEnd\", ctx._comparisonRangeEnd)(\"previewStart\", ctx._previewStart)(\"previewEnd\", ctx._previewEnd)(\"isRange\", ctx._isRange)(\"labelMinRequiredCells\", 3)(\"activeCell\", ctx._dateAdapter.getDate(ctx.activeDate) - 1);\n    }\n  },\n  directives: [ɵngcc1.NgForOf, MatCalendarBody],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMonthView.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatMonthView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  comparisonStart: [{\n    type: Input\n  }],\n  comparisonEnd: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  _userSelection: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMonthView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-month-view',\n      template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr>\\n      <th scope=\\\"col\\\" *ngFor=\\\"let day of _weekdays\\\" [attr.aria-label]=\\\"day.long\\\">{{day.narrow}}</th>\\n    </tr>\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"7\\\" aria-hidden=\\\"true\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_monthLabel\\\"\\n         [rows]=\\\"_weeks\\\"\\n         [todayValue]=\\\"_todayDate!\\\"\\n         [startValue]=\\\"_rangeStart!\\\"\\n         [endValue]=\\\"_rangeEnd!\\\"\\n         [comparisonStart]=\\\"_comparisonRangeStart\\\"\\n         [comparisonEnd]=\\\"_comparisonRangeEnd\\\"\\n         [previewStart]=\\\"_previewStart\\\"\\n         [previewEnd]=\\\"_previewEnd\\\"\\n         [isRange]=\\\"_isRange\\\"\\n         [labelMinRequiredCells]=\\\"3\\\"\\n         [activeCell]=\\\"_dateAdapter.getDate(activeDate) - 1\\\"\\n         (selectedValueChange)=\\\"_dateSelected($event)\\\"\\n         (previewChange)=\\\"_previewChanged($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\",\n      exportAs: 'matMonthView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    _userSelection: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatMonthView.prototype._rerenderSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._activeDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._selected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._minDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._maxDate;\n  /**\n   * Function used to filter which dates are selectable.\n   * @type {?}\n   */\n\n  MatMonthView.prototype.dateFilter;\n  /**\n   * Function that can be used to add custom CSS classes to dates.\n   * @type {?}\n   */\n\n  MatMonthView.prototype.dateClass;\n  /**\n   * Start of the comparison range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype.comparisonStart;\n  /**\n   * End of the comparison range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype.comparisonEnd;\n  /**\n   * Emits when a new date is selected.\n   * @type {?}\n   */\n\n  MatMonthView.prototype.selectedChange;\n  /**\n   * Emits when any date is selected.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._userSelection;\n  /**\n   * Emits when any date is activated.\n   * @type {?}\n   */\n\n  MatMonthView.prototype.activeDateChange;\n  /**\n   * The body of calendar table\n   * @type {?}\n   */\n\n  MatMonthView.prototype._matCalendarBody;\n  /**\n   * The label for this month (e.g. \"January 2017\").\n   * @type {?}\n   */\n\n  MatMonthView.prototype._monthLabel;\n  /**\n   * Grid of calendar cells representing the dates of the month.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._weeks;\n  /**\n   * The number of blank cells in the first row before the 1st of the month.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._firstWeekOffset;\n  /**\n   * Start value of the currently-shown date range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._rangeStart;\n  /**\n   * End value of the currently-shown date range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._rangeEnd;\n  /**\n   * Start value of the currently-shown comparison date range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._comparisonRangeStart;\n  /**\n   * End value of the currently-shown comparison date range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._comparisonRangeEnd;\n  /**\n   * Start of the preview range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._previewStart;\n  /**\n   * End of the preview range.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._previewEnd;\n  /**\n   * Whether the user is currently selecting a range of dates.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._isRange;\n  /**\n   * The date of the month that today falls on. Null if today is in another month.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._todayDate;\n  /**\n   * The names of the weekdays.\n   * @type {?}\n   */\n\n  MatMonthView.prototype._weekdays;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._dateFormats;\n  /** @type {?} */\n\n  MatMonthView.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._dir;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMonthView.prototype._rangeStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/multi-year-view.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar yearsPerPage = 24;\n/** @type {?} */\n\nvar yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * \\@docs-private\n * @template D\n */\n\nvar MatMultiYearView = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  function MatMultiYearView(_changeDetectorRef, _dateAdapter, _dir) {\n    _classCallCheck(this, MatMultiYearView);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._rerenderSubscription = Subscription.EMPTY;\n    /**\n     * Emits when a new year is selected.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the selected year. This doesn't imply a change on the selected date\n     */\n\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n\n    this.activeDateChange = new EventEmitter();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this multi-year view (everything other than the year is ignored).\n   * @return {?}\n   */\n\n\n  _createClass(MatMultiYearView, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this4 = this;\n\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this4._init();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Initializes this multi-year view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this5 = this;\n\n      this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today()); // We want a range years such that we maximize the number of\n      // enabled dates visible at once. This prevents issues where the minimum year\n      // is the last item of a page OR the maximum year is the first item of a page.\n      // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view.\n\n      /** @type {?} */\n\n      var activeYear = this._dateAdapter.getYear(this._activeDate);\n      /** @type {?} */\n\n\n      var minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n      this._years = [];\n\n      for (var i = 0, row = []; i < yearsPerPage; i++) {\n        row.push(minYearOfPage + i);\n\n        if (row.length == yearsPerRow) {\n          this._years.push(row.map(\n          /**\n          * @param {?} year\n          * @return {?}\n          */\n          function (year) {\n            return _this5._createCellForYear(year);\n          }));\n\n          row = [];\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Handles when a new year is selected.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_yearSelected\",\n    value: function _yearSelected(event) {\n      /** @type {?} */\n      var year = event.value;\n      this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n      /** @type {?} */\n\n      var month = this._dateAdapter.getMonth(this.activeDate);\n      /** @type {?} */\n\n\n      var daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n\n      this.selectedChange.emit(this._dateAdapter.createDate(year, month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in multi-year view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleCalendarBodyKeydown\",\n    value: function _handleCalendarBodyKeydown(event) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n          break;\n\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n          break;\n\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n          break;\n\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n          break;\n\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n          break;\n\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n          break;\n\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n          break;\n\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n          break;\n\n        case ENTER:\n        case SPACE:\n          this._yearSelected({\n            value: this._dateAdapter.getYear(this._activeDate),\n            event: event\n          });\n\n          break;\n\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n\n      this._focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n\n      event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getActiveCell\",\n    value: function _getActiveCell() {\n      return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Creates an MatCalendarCell for the given year.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createCellForYear\",\n    value: function _createCellForYear(year) {\n      /** @type {?} */\n      var yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n\n      return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n    }\n    /**\n     * Whether the given year is enabled.\n     * @private\n     * @param {?} year\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldEnableYear\",\n    value: function _shouldEnableYear(year) {\n      // disable if the year is greater than maxDate lower than minDate\n      if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n        return false;\n      } // enable if it reaches here and there's no filter defined\n\n\n      if (!this.dateFilter) {\n        return true;\n      }\n      /** @type {?} */\n\n\n      var firstOfYear = this._dateAdapter.createDate(year, 0, 1); // If any date in the year is enabled count the year as enabled.\n\n\n      for (var date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /**\n     * Sets the currently-highlighted year based on a model value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectedYear\",\n    value: function _setSelectedYear(value) {\n      this._selectedYear = null;\n\n      if (value instanceof DateRange) {\n        /** @type {?} */\n        var displayValue = value.start || value.end;\n\n        if (displayValue) {\n          this._selectedYear = this._dateAdapter.getYear(displayValue);\n        }\n      } else if (value) {\n        this._selectedYear = this._dateAdapter.getYear(value);\n      }\n    }\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._activeDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n      if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n        this._init();\n      }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n\n      this._setSelectedYear(value);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }]);\n\n  return MatMultiYearView;\n}();\n\nMatMultiYearView.ɵfac = function MatMultiYearView_Factory(t) {\n  return new (t || MatMultiYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatMultiYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatMultiYearView,\n  selectors: [[\"mat-multi-year-view\"]],\n  viewQuery: function MatMultiYearView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    }\n  },\n  inputs: {\n    activeDate: \"activeDate\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    dateFilter: \"dateFilter\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    yearSelected: \"yearSelected\",\n    activeDateChange: \"activeDateChange\"\n  },\n  exportAs: [\"matMultiYearView\"],\n  decls: 5,\n  vars: 7,\n  consts: [[\"role\", \"presentation\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"numCols\", \"cellAspectRatio\", \"activeCell\", \"selectedValueChange\", \"keydown\"]],\n  template: function MatMultiYearView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tr\");\n      ɵngcc0.ɵɵelement(3, \"th\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"tbody\", 3);\n      ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatMultiYearView_Template_tbody_selectedValueChange_4_listener($event) {\n        return ctx._yearSelected($event);\n      })(\"keydown\", function MatMultiYearView_Template_tbody_keydown_4_listener($event) {\n        return ctx._handleCalendarBodyKeydown($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"rows\", ctx._years)(\"todayValue\", ctx._todayYear)(\"startValue\", ctx._selectedYear)(\"endValue\", ctx._selectedYear)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._getActiveCell());\n    }\n  },\n  directives: [MatCalendarBody],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatMultiYearView.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatMultiYearView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatMultiYearView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-multi-year-view',\n      template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [rows]=\\\"_years\\\"\\n         [todayValue]=\\\"_todayYear\\\"\\n         [startValue]=\\\"_selectedYear!\\\"\\n         [endValue]=\\\"_selectedYear!\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_getActiveCell()\\\"\\n         (selectedValueChange)=\\\"_yearSelected($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\",\n      exportAs: 'matMultiYearView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatMultiYearView.prototype._rerenderSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMultiYearView.prototype._activeDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMultiYearView.prototype._selected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMultiYearView.prototype._minDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMultiYearView.prototype._maxDate;\n  /**\n   * A function used to filter which dates are selectable.\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype.dateFilter;\n  /**\n   * Emits when a new year is selected.\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype.selectedChange;\n  /**\n   * Emits the selected year. This doesn't imply a change on the selected date\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype.yearSelected;\n  /**\n   * Emits when any date is activated.\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype.activeDateChange;\n  /**\n   * The body of calendar table\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype._matCalendarBody;\n  /**\n   * Grid of calendar cells representing the currently displayed years.\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype._years;\n  /**\n   * The year that today falls on.\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype._todayYear;\n  /**\n   * The year of the selected date. Null if the selected date is null.\n   * @type {?}\n   */\n\n  MatMultiYearView.prototype._selectedYear;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMultiYearView.prototype._changeDetectorRef;\n  /** @type {?} */\n\n  MatMultiYearView.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatMultiYearView.prototype._dir;\n}\n/**\n * @template D\n * @param {?} dateAdapter\n * @param {?} date1\n * @param {?} date2\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\n\n\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n  /** @type {?} */\n  var year1 = dateAdapter.getYear(date1);\n  /** @type {?} */\n\n  var year2 = dateAdapter.getYear(date2);\n  /** @type {?} */\n\n  var startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) === Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n * @template D\n * @param {?} dateAdapter\n * @param {?} activeDate\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\n\n\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n  /** @type {?} */\n  var activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n * @template D\n * @param {?} dateAdapter\n * @param {?} minDate\n * @param {?} maxDate\n * @return {?}\n */\n\n\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n  /** @type {?} */\n  var startingYear = 0;\n\n  if (maxDate) {\n    /** @type {?} */\n    var maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n\n  return startingYear;\n}\n/**\n * Gets remainder that is non-negative, even if first number is negative\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction euclideanModulo(a, b) {\n  return (a % b + b) % b;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/year-view.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n * @template D\n */\n\n\nvar MatYearView = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _dateFormats\n   * @param {?} _dateAdapter\n   * @param {?=} _dir\n   */\n  function MatYearView(_changeDetectorRef, _dateFormats, _dateAdapter, _dir) {\n    _classCallCheck(this, MatYearView);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dateFormats = _dateFormats;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._rerenderSubscription = Subscription.EMPTY;\n    /**\n     * Emits when a new month is selected.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the selected month. This doesn't imply a change on the selected date\n     */\n\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when any date is activated.\n     */\n\n    this.activeDateChange = new EventEmitter();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n  /**\n   * The date to display in this year view (everything other than the year is ignored).\n   * @return {?}\n   */\n\n\n  _createClass(MatYearView, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this6 = this;\n\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this6._init();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Handles when a new month is selected.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_monthSelected\",\n    value: function _monthSelected(event) {\n      /** @type {?} */\n      var month = event.value;\n      /** @type {?} */\n\n      var normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n      this.monthSelected.emit(normalizedDate);\n      /** @type {?} */\n\n      var daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n      this.selectedChange.emit(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n    /**\n     * Handles keydown events on the calendar body when calendar is in year view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleCalendarBodyKeydown\",\n    value: function _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var isRtl = this._isRtl();\n\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n          break;\n\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n          break;\n\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n          break;\n\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n          break;\n\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n          break;\n\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n          break;\n\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n          break;\n\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n          break;\n\n        case ENTER:\n        case SPACE:\n          this._monthSelected({\n            value: this._dateAdapter.getMonth(this._activeDate),\n            event: event\n          });\n\n          break;\n\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n\n      this._focusActiveCell(); // Prevent unexpected default actions such as form submission.\n\n\n      event.preventDefault();\n    }\n    /**\n     * Initializes this year view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      var _this7 = this;\n\n      this._setSelectedMonth(this.selected);\n\n      this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n      this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n      /** @type {?} */\n\n      var monthNames = this._dateAdapter.getMonthNames('short'); // First row of months only contains 5 elements so we can fit the year label on the same row.\n\n\n      this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(\n      /**\n      * @param {?} row\n      * @return {?}\n      */\n      function (row) {\n        return row.map(\n        /**\n        * @param {?} month\n        * @return {?}\n        */\n        function (month) {\n          return _this7._createCellForMonth(month, monthNames[month]);\n        });\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusActiveCell\",\n    value: function _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     * @private\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMonthInCurrentYear\",\n    value: function _getMonthInCurrentYear(date) {\n      return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Creates an MatCalendarCell for the given month.\n     * @private\n     * @param {?} month\n     * @param {?} monthName\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createCellForMonth\",\n    value: function _createCellForMonth(month, monthName) {\n      /** @type {?} */\n      var ariaLabel = this._dateAdapter.format(this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1), this._dateFormats.display.monthYearA11yLabel);\n\n      return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n    }\n    /**\n     * Whether the given month is enabled.\n     * @private\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldEnableMonth\",\n    value: function _shouldEnableMonth(month) {\n      /** @type {?} */\n      var activeYear = this._dateAdapter.getYear(this.activeDate);\n\n      if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n        return false;\n      }\n\n      if (!this.dateFilter) {\n        return true;\n      }\n      /** @type {?} */\n\n\n      var firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1); // If any date in the month is enabled count the month as enabled.\n\n\n      for (var date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isYearAndMonthAfterMaxDate\",\n    value: function _isYearAndMonthAfterMaxDate(year, month) {\n      if (this.maxDate) {\n        /** @type {?} */\n        var maxYear = this._dateAdapter.getYear(this.maxDate);\n        /** @type {?} */\n\n\n        var maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n        return year > maxYear || year === maxYear && month > maxMonth;\n      }\n\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     * @private\n     * @param {?} year\n     * @param {?} month\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isYearAndMonthBeforeMinDate\",\n    value: function _isYearAndMonthBeforeMinDate(year, month) {\n      if (this.minDate) {\n        /** @type {?} */\n        var minYear = this._dateAdapter.getYear(this.minDate);\n        /** @type {?} */\n\n\n        var minMonth = this._dateAdapter.getMonth(this.minDate);\n\n        return year < minYear || year === minYear && month < minMonth;\n      }\n\n      return false;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Determines whether the user has the RTL layout direction.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /**\n     * Sets the currently-selected month based on a model value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectedMonth\",\n    value: function _setSelectedMonth(value) {\n      if (value instanceof DateRange) {\n        this._selectedMonth = this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n      } else {\n        this._selectedMonth = this._getMonthInCurrentYear(value);\n      }\n    }\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._activeDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var oldActiveDate = this._activeDate;\n      /** @type {?} */\n\n      var validDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n      if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n        this._init();\n      }\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n\n      this._setSelectedMonth(value);\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }]);\n\n  return MatYearView;\n}();\n\nMatYearView.ɵfac = function MatYearView_Factory(t) {\n  return new (t || MatYearView)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8));\n};\n\nMatYearView.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatYearView,\n  selectors: [[\"mat-year-view\"]],\n  viewQuery: function MatYearView_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendarBody, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n    }\n  },\n  inputs: {\n    activeDate: \"activeDate\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    dateFilter: \"dateFilter\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    monthSelected: \"monthSelected\",\n    activeDateChange: \"activeDateChange\"\n  },\n  exportAs: [\"matYearView\"],\n  decls: 5,\n  vars: 9,\n  consts: [[\"role\", \"presentation\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"cellAspectRatio\", \"activeCell\", \"selectedValueChange\", \"keydown\"]],\n  template: function MatYearView_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"thead\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"tr\");\n      ɵngcc0.ɵɵelement(3, \"th\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"tbody\", 3);\n      ɵngcc0.ɵɵlistener(\"selectedValueChange\", function MatYearView_Template_tbody_selectedValueChange_4_listener($event) {\n        return ctx._monthSelected($event);\n      })(\"keydown\", function MatYearView_Template_tbody_keydown_4_listener($event) {\n        return ctx._handleCalendarBodyKeydown($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"label\", ctx._yearLabel)(\"rows\", ctx._months)(\"todayValue\", ctx._todayMonth)(\"startValue\", ctx._selectedMonth)(\"endValue\", ctx._selectedMonth)(\"labelMinRequiredCells\", 2)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._dateAdapter.getMonth(ctx.activeDate));\n    }\n  },\n  directives: [MatCalendarBody],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatYearView.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatYearView.propDecorators = {\n  activeDate: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  activeDateChange: [{\n    type: Output\n  }],\n  _matCalendarBody: [{\n    type: ViewChild,\n    args: [MatCalendarBody]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatYearView, [{\n    type: Component,\n    args: [{\n      selector: 'mat-year-view',\n      template: \"<table class=\\\"mat-calendar-table\\\" role=\\\"presentation\\\">\\n  <thead class=\\\"mat-calendar-table-header\\\">\\n    <tr><th class=\\\"mat-calendar-table-header-divider\\\" colspan=\\\"4\\\"></th></tr>\\n  </thead>\\n  <tbody mat-calendar-body\\n         [label]=\\\"_yearLabel\\\"\\n         [rows]=\\\"_months\\\"\\n         [todayValue]=\\\"_todayMonth!\\\"\\n         [startValue]=\\\"_selectedMonth!\\\"\\n         [endValue]=\\\"_selectedMonth!\\\"\\n         [labelMinRequiredCells]=\\\"2\\\"\\n         [numCols]=\\\"4\\\"\\n         [cellAspectRatio]=\\\"4 / 7\\\"\\n         [activeCell]=\\\"_dateAdapter.getMonth(activeDate)\\\"\\n         (selectedValueChange)=\\\"_monthSelected($event)\\\"\\n         (keydown)=\\\"_handleCalendarBodyKeydown($event)\\\">\\n  </tbody>\\n</table>\\n\",\n      exportAs: 'matYearView',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    selectedChange: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    activeDateChange: [{\n      type: Output\n    }],\n    activeDate: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    _matCalendarBody: [{\n      type: ViewChild,\n      args: [MatCalendarBody]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatYearView.prototype._rerenderSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._activeDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._selected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._minDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._maxDate;\n  /**\n   * A function used to filter which dates are selectable.\n   * @type {?}\n   */\n\n  MatYearView.prototype.dateFilter;\n  /**\n   * Emits when a new month is selected.\n   * @type {?}\n   */\n\n  MatYearView.prototype.selectedChange;\n  /**\n   * Emits the selected month. This doesn't imply a change on the selected date\n   * @type {?}\n   */\n\n  MatYearView.prototype.monthSelected;\n  /**\n   * Emits when any date is activated.\n   * @type {?}\n   */\n\n  MatYearView.prototype.activeDateChange;\n  /**\n   * The body of calendar table\n   * @type {?}\n   */\n\n  MatYearView.prototype._matCalendarBody;\n  /**\n   * Grid of calendar cells representing the months of the year.\n   * @type {?}\n   */\n\n  MatYearView.prototype._months;\n  /**\n   * The label for this year (e.g. \"2017\").\n   * @type {?}\n   */\n\n  MatYearView.prototype._yearLabel;\n  /**\n   * The month in this year that today falls on. Null if today is in a different year.\n   * @type {?}\n   */\n\n  MatYearView.prototype._todayMonth;\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   * @type {?}\n   */\n\n  MatYearView.prototype._selectedMonth;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._dateFormats;\n  /** @type {?} */\n\n  MatYearView.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatYearView.prototype._dir;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/calendar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default header for MatCalendar\n * @template D\n */\n\n\nvar MatCalendarHeader = /*#__PURE__*/function () {\n  /**\n   * @param {?} _intl\n   * @param {?} calendar\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} changeDetectorRef\n   */\n  function MatCalendarHeader(_intl, calendar, _dateAdapter, _dateFormats, changeDetectorRef) {\n    _classCallCheck(this, MatCalendarHeader);\n\n    this._intl = _intl;\n    this.calendar = calendar;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this.calendar.stateChanges.subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      return changeDetectorRef.markForCheck();\n    });\n  }\n  /**\n   * The label for the current calendar view.\n   * @return {?}\n   */\n\n\n  _createClass(MatCalendarHeader, [{\n    key: \"currentPeriodClicked\",\n\n    /**\n     * Handles user clicks on the period label.\n     * @return {?}\n     */\n    value: function currentPeriodClicked() {\n      this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /**\n     * Handles user clicks on the previous button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previousClicked\",\n    value: function previousClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /**\n     * Handles user clicks on the next button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextClicked\",\n    value: function nextClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /**\n     * Whether the previous period button is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"previousEnabled\",\n    value: function previousEnabled() {\n      if (!this.calendar.minDate) {\n        return true;\n      }\n\n      return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /**\n     * Whether the next period button is enabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextEnabled\",\n    value: function nextEnabled() {\n      return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /**\n     * Whether the two dates represent the same view in the current view mode (month or year).\n     * @private\n     * @param {?} date1\n     * @param {?} date2\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSameView\",\n    value: function _isSameView(date1, date2) {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n      }\n\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n      } // Otherwise we are in 'multi-year' view.\n\n\n      return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n  }, {\n    key: \"periodButtonText\",\n    get: function get() {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n      }\n\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYearName(this.calendar.activeDate);\n      } // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view, and the last year is\n      // just yearsPerPage - 1 away.\n\n      /** @type {?} */\n\n\n      var activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n      /** @type {?} */\n\n\n      var minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n      /** @type {?} */\n\n      var maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n      /** @type {?} */\n\n      var minYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n      /** @type {?} */\n\n\n      var maxYearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n\n      return this._intl.formatYearRange(minYearName, maxYearName);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"periodButtonLabel\",\n    get: function get() {\n      return this.calendar.currentView == 'month' ? this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n    }\n    /**\n     * The label for the previous button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"prevButtonLabel\",\n    get: function get() {\n      return {\n        'month': this._intl.prevMonthLabel,\n        'year': this._intl.prevYearLabel,\n        'multi-year': this._intl.prevMultiYearLabel\n      }[this.calendar.currentView];\n    }\n    /**\n     * The label for the next button.\n     * @return {?}\n     */\n\n  }, {\n    key: \"nextButtonLabel\",\n    get: function get() {\n      return {\n        'month': this._intl.nextMonthLabel,\n        'year': this._intl.nextYearLabel,\n        'multi-year': this._intl.nextMultiYearLabel\n      }[this.calendar.currentView];\n    }\n  }]);\n\n  return MatCalendarHeader;\n}();\n\nMatCalendarHeader.ɵfac = function MatCalendarHeader_Factory(t) {\n  return new (t || MatCalendarHeader)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatCalendar;\n  })), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatCalendarHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCalendarHeader,\n  selectors: [[\"mat-calendar-header\"]],\n  exportAs: [\"matCalendarHeader\"],\n  ngContentSelectors: _c1,\n  decls: 9,\n  vars: 8,\n  consts: [[1, \"mat-calendar-header\"], [1, \"mat-calendar-controls\"], [\"mat-button\", \"\", \"type\", \"button\", \"cdkAriaLive\", \"polite\", 1, \"mat-calendar-period-button\", 3, \"click\"], [1, \"mat-calendar-arrow\"], [1, \"mat-calendar-spacer\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-previous-button\", 3, \"disabled\", \"click\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-calendar-next-button\", 3, \"disabled\", \"click\"]],\n  template: function MatCalendarHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵelementStart(2, \"button\", 2);\n      ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_2_listener() {\n        return ctx.currentPeriodClicked();\n      });\n      ɵngcc0.ɵɵtext(3);\n      ɵngcc0.ɵɵelement(4, \"div\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n      ɵngcc0.ɵɵprojection(6);\n      ɵngcc0.ɵɵelementStart(7, \"button\", 5);\n      ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_7_listener() {\n        return ctx.previousClicked();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(8, \"button\", 6);\n      ɵngcc0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_8_listener() {\n        return ctx.nextClicked();\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.periodButtonLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.periodButtonText, \" \");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵclassProp(\"mat-calendar-invert\", ctx.calendar.currentView != \"month\");\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"disabled\", !ctx.previousEnabled());\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.prevButtonLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"disabled\", !ctx.nextEnabled());\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.nextButtonLabel);\n    }\n  },\n  directives: [ɵngcc4.MatButton, ɵngcc5.CdkAriaLive],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCalendarHeader.ctorParameters = function () {\n  return [{\n    type: MatDatepickerIntl\n  }, {\n    type: MatCalendar,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return MatCalendar;\n      })]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCalendarHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-calendar-header',\n      template: \"<div class=\\\"mat-calendar-header\\\">\\n  <div class=\\\"mat-calendar-controls\\\">\\n    <button mat-button type=\\\"button\\\" class=\\\"mat-calendar-period-button\\\"\\n            (click)=\\\"currentPeriodClicked()\\\" [attr.aria-label]=\\\"periodButtonLabel\\\"\\n            cdkAriaLive=\\\"polite\\\">\\n      {{periodButtonText}}\\n      <div class=\\\"mat-calendar-arrow\\\"\\n           [class.mat-calendar-invert]=\\\"calendar.currentView != 'month'\\\"></div>\\n    </button>\\n\\n    <div class=\\\"mat-calendar-spacer\\\"></div>\\n\\n    <ng-content></ng-content>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-previous-button\\\"\\n            [disabled]=\\\"!previousEnabled()\\\" (click)=\\\"previousClicked()\\\"\\n            [attr.aria-label]=\\\"prevButtonLabel\\\">\\n    </button>\\n\\n    <button mat-icon-button type=\\\"button\\\" class=\\\"mat-calendar-next-button\\\"\\n            [disabled]=\\\"!nextEnabled()\\\" (click)=\\\"nextClicked()\\\"\\n            [attr.aria-label]=\\\"nextButtonLabel\\\">\\n    </button>\\n  </div>\\n</div>\\n\",\n      exportAs: 'matCalendarHeader',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: MatDatepickerIntl\n    }, {\n      type: MatCalendar,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(\n        /**\n         * @return {?}\n         */\n        function () {\n          return MatCalendar;\n        })]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatCalendarHeader.prototype._intl;\n  /** @type {?} */\n\n  MatCalendarHeader.prototype.calendar;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendarHeader.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendarHeader.prototype._dateFormats;\n}\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n * @template D\n */\n\n\nvar MatCalendar = /*#__PURE__*/function () {\n  /**\n   * @param {?} _intl\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   * @param {?} _changeDetectorRef\n   */\n  function MatCalendar(_intl, _dateAdapter, _dateFormats, _changeDetectorRef) {\n    var _this8 = this;\n\n    _classCallCheck(this, MatCalendar);\n\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n\n    this._moveFocusOnNextTick = false;\n    /**\n     * Whether the calendar should be started in month or year view.\n     */\n\n    this.startView = 'month';\n    /**\n     * Emits when the currently selected date changes.\n     * \\@breaking-change 11.0.0 Emitted value to change to `D | null`.\n     */\n\n    this.selectedChange = new EventEmitter();\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when any date is selected.\n     */\n\n    this._userSelection = new EventEmitter();\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n\n    this.stateChanges = new Subject();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      _changeDetectorRef.markForCheck();\n\n      _this8.stateChanges.next();\n    });\n  }\n  /**\n   * A date representing the period (month or year) to start the calendar in.\n   * @return {?}\n   */\n\n\n  _createClass(MatCalendar, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n      this.activeDate = this.startAt || this._dateAdapter.today(); // Assign to the private property since we don't want to move focus on init.\n\n      this._currentView = this.startView;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      if (this._moveFocusOnNextTick) {\n        this._moveFocusOnNextTick = false;\n        this.focusActiveCell();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._intlChanges.unsubscribe();\n\n      this.stateChanges.complete();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n      if (change && !change.firstChange) {\n        /** @type {?} */\n        var view = this._getCurrentViewComponent();\n\n        if (view) {\n          // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n          // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n          this._changeDetectorRef.detectChanges();\n\n          view._init();\n        }\n      }\n\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"focusActiveCell\",\n    value: function focusActiveCell() {\n      this._getCurrentViewComponent()._focusActiveCell(false);\n    }\n    /**\n     * Updates today's date after an update of the active date\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateTodaysDate\",\n    value: function updateTodaysDate() {\n      /** @type {?} */\n      var currentView = this.currentView;\n      /** @type {?} */\n\n      var view;\n\n      if (currentView === 'month') {\n        view = this.monthView;\n      } else if (currentView === 'year') {\n        view = this.yearView;\n      } else {\n        view = this.multiYearView;\n      }\n\n      view._init();\n    }\n    /**\n     * Handles date selection in the month view.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dateSelected\",\n    value: function _dateSelected(event) {\n      /** @type {?} */\n      var date = event.value;\n\n      if (this.selected instanceof DateRange || date && !this._dateAdapter.sameDate(date, this.selected)) {\n        // @breaking-change 11.0.0 remove non-null assertion\n        // once the `selectedChange` is allowed to be null.\n        this.selectedChange.emit(\n        /** @type {?} */\n        date);\n      }\n\n      this._userSelection.emit(event);\n    }\n    /**\n     * Handles year selection in the multiyear view.\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n\n  }, {\n    key: \"_yearSelectedInMultiYearView\",\n    value: function _yearSelectedInMultiYearView(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Handles month selection in the year view.\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n\n  }, {\n    key: \"_monthSelectedInYearView\",\n    value: function _monthSelectedInYearView(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * Handles year/month selection in the multi-year/year views.\n     * @param {?} date\n     * @param {?} view\n     * @return {?}\n     */\n\n  }, {\n    key: \"_goToDateInView\",\n    value: function _goToDateInView(date, view) {\n      this.activeDate = date;\n      this.currentView = view;\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Returns the component instance that corresponds to the current calendar view.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getCurrentViewComponent\",\n    value: function _getCurrentViewComponent() {\n      return this.monthView || this.yearView || this.multiYearView;\n    }\n  }, {\n    key: \"startAt\",\n    get: function get() {\n      return this._startAt;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The currently selected date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minDate\",\n    get: function get() {\n      return this._minDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxDate\",\n    get: function get() {\n      return this._maxDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"activeDate\",\n    get: function get() {\n      return this._clampedActiveDate;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n      this.stateChanges.next();\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether the calendar is in month view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"currentView\",\n    get: function get() {\n      return this._currentView;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._currentView = value;\n      this._moveFocusOnNextTick = true;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatCalendar;\n}();\n\nMatCalendar.ɵfac = function MatCalendar_Factory(t) {\n  return new (t || MatCalendar)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatCalendar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatCalendar,\n  selectors: [[\"mat-calendar\"]],\n  viewQuery: function MatCalendar_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatMonthView, true);\n      ɵngcc0.ɵɵviewQuery(MatYearView, true);\n      ɵngcc0.ɵɵviewQuery(MatMultiYearView, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.monthView = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.yearView = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiYearView = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-calendar\"],\n  inputs: {\n    startView: \"startView\",\n    startAt: \"startAt\",\n    selected: \"selected\",\n    minDate: \"minDate\",\n    maxDate: \"maxDate\",\n    headerComponent: \"headerComponent\",\n    dateFilter: \"dateFilter\",\n    dateClass: \"dateClass\",\n    comparisonStart: \"comparisonStart\",\n    comparisonEnd: \"comparisonEnd\"\n  },\n  outputs: {\n    selectedChange: \"selectedChange\",\n    yearSelected: \"yearSelected\",\n    monthSelected: \"monthSelected\",\n    _userSelection: \"_userSelection\"\n  },\n  exportAs: [\"matCalendar\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 5,\n  consts: [[3, \"cdkPortalOutlet\"], [\"cdkMonitorSubtreeFocus\", \"\", \"tabindex\", \"-1\", 1, \"mat-calendar-content\", 3, \"ngSwitch\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"activeDateChange\", \"_userSelection\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"monthSelected\", \"selectedChange\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"yearSelected\", \"selectedChange\", 4, \"ngSwitchCase\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"activeDateChange\", \"_userSelection\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"monthSelected\", \"selectedChange\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"activeDateChange\", \"yearSelected\", \"selectedChange\"]],\n  template: function MatCalendar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatCalendar_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatCalendar_mat_month_view_2_Template, 1, 8, \"mat-month-view\", 2);\n      ɵngcc0.ɵɵtemplate(3, MatCalendar_mat_year_view_3_Template, 1, 5, \"mat-year-view\", 3);\n      ɵngcc0.ɵɵtemplate(4, MatCalendar_mat_multi_year_view_4_Template, 1, 5, \"mat-multi-year-view\", 4);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._calendarHeaderPortal);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.currentView);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"month\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"year\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", \"multi-year\");\n    }\n  },\n  directives: [ɵngcc6.CdkPortalOutlet, ɵngcc5.CdkMonitorFocus, ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase, MatMonthView, MatYearView, MatMultiYearView],\n  styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-controls .mat-icon-button:hover .mat-button-focus-overlay{opacity:.04}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button::after,.mat-calendar-next-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatCalendar.ctorParameters = function () {\n  return [{\n    type: MatDatepickerIntl\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nMatCalendar.propDecorators = {\n  headerComponent: [{\n    type: Input\n  }],\n  startAt: [{\n    type: Input\n  }],\n  startView: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }],\n  minDate: [{\n    type: Input\n  }],\n  maxDate: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  comparisonStart: [{\n    type: Input\n  }],\n  comparisonEnd: [{\n    type: Input\n  }],\n  selectedChange: [{\n    type: Output\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  _userSelection: [{\n    type: Output\n  }],\n  monthView: [{\n    type: ViewChild,\n    args: [MatMonthView]\n  }],\n  yearView: [{\n    type: ViewChild,\n    args: [MatYearView]\n  }],\n  multiYearView: [{\n    type: ViewChild,\n    args: [MatMultiYearView]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatCalendar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-calendar',\n      template: \"<ng-template [cdkPortalOutlet]=\\\"_calendarHeaderPortal\\\"></ng-template>\\n\\n<div class=\\\"mat-calendar-content\\\" [ngSwitch]=\\\"currentView\\\" cdkMonitorSubtreeFocus tabindex=\\\"-1\\\">\\n  <mat-month-view\\n      *ngSwitchCase=\\\"'month'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      [dateClass]=\\\"dateClass\\\"\\n      [comparisonStart]=\\\"comparisonStart\\\"\\n      [comparisonEnd]=\\\"comparisonEnd\\\"\\n      (_userSelection)=\\\"_dateSelected($event)\\\">\\n  </mat-month-view>\\n\\n  <mat-year-view\\n      *ngSwitchCase=\\\"'year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      (monthSelected)=\\\"_monthSelectedInYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'month')\\\">\\n  </mat-year-view>\\n\\n  <mat-multi-year-view\\n      *ngSwitchCase=\\\"'multi-year'\\\"\\n      [(activeDate)]=\\\"activeDate\\\"\\n      [selected]=\\\"selected\\\"\\n      [dateFilter]=\\\"dateFilter\\\"\\n      [maxDate]=\\\"maxDate\\\"\\n      [minDate]=\\\"minDate\\\"\\n      (yearSelected)=\\\"_yearSelectedInMultiYearView($event)\\\"\\n      (selectedChange)=\\\"_goToDateInView($event, 'year')\\\">\\n  </mat-multi-year-view>\\n</div>\\n\",\n      host: {\n        'class': 'mat-calendar'\n      },\n      exportAs: 'matCalendar',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\n      styles: [\".mat-calendar{display:block}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;margin:5% calc(33% / 7 - 16px)}.mat-calendar-controls .mat-icon-button:hover .mat-button-focus-overlay{opacity:.04}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0}.mat-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}.mat-calendar-previous-button,.mat-calendar-next-button{position:relative}.mat-calendar-previous-button::after,.mat-calendar-next-button::after{top:0;left:0;right:0;bottom:0;position:absolute;content:\\\"\\\";margin:15.5px;border:0 solid currentColor;border-top-width:2px}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-previous-button::after{border-left-width:2px;transform:translateX(2px) rotate(-45deg)}.mat-calendar-next-button::after{border-right-width:2px;transform:translateX(-2px) rotate(45deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatDatepickerIntl\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    startView: [{\n      type: Input\n    }],\n    selectedChange: [{\n      type: Output\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    _userSelection: [{\n      type: Output\n    }],\n    startAt: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    minDate: [{\n      type: Input\n    }],\n    maxDate: [{\n      type: Input\n    }],\n    headerComponent: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }],\n    monthView: [{\n      type: ViewChild,\n      args: [MatMonthView]\n    }],\n    yearView: [{\n      type: ViewChild,\n      args: [MatYearView]\n    }],\n    multiYearView: [{\n      type: ViewChild,\n      args: [MatMultiYearView]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * An input indicating the type of the header component, if set.\n   * @type {?}\n   */\n  MatCalendar.prototype.headerComponent;\n  /**\n   * A portal containing the header component type for this calendar.\n   * @type {?}\n   */\n\n  MatCalendar.prototype._calendarHeaderPortal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._intlChanges;\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._moveFocusOnNextTick;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._startAt;\n  /**\n   * Whether the calendar should be started in month or year view.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.startView;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._selected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._minDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._maxDate;\n  /**\n   * Function used to filter which dates are selectable.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.dateFilter;\n  /**\n   * Function that can be used to add custom CSS classes to dates.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.dateClass;\n  /**\n   * Start of the comparison range.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.comparisonStart;\n  /**\n   * End of the comparison range.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.comparisonEnd;\n  /**\n   * Emits when the currently selected date changes.\n   * \\@breaking-change 11.0.0 Emitted value to change to `D | null`.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.selectedChange;\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.yearSelected;\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.monthSelected;\n  /**\n   * Emits when any date is selected.\n   * @type {?}\n   */\n\n  MatCalendar.prototype._userSelection;\n  /**\n   * Reference to the current month view component.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.monthView;\n  /**\n   * Reference to the current year view component.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.yearView;\n  /**\n   * Reference to the current multi-year view component.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.multiYearView;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._clampedActiveDate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._currentView;\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   * @type {?}\n   */\n\n  MatCalendar.prototype.stateChanges;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._dateFormats;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatCalendar.prototype._changeDetectorRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the Material datepicker.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar matDatepickerAnimations = {\n  /**\n   * Transforms the height of the datepicker's calendar.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    opacity: 0,\n    transform: 'scale(1, 0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1, 1)'\n  }))), transition('* => void', animate('100ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * Fades in the content of the calendar.\n   */\n  fadeInCalendar: trigger('fadeInCalendar', [state('void', style({\n    opacity: 0\n  })), state('enter', style({\n    opacity: 1\n  })), // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n  // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n  transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Used to generate a unique ID for each datepicker instance.\n * @type {?}\n */\n\nvar datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n * @type {?}\n */\n\nvar MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\n\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      return overlay.scrollStrategies.reposition();\n    }\n  );\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n}; // Boilerplate for applying mixins to MatDatepickerContent.\n\n/**\n * \\@docs-private\n */\n\nvar MatDatepickerContentBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatDatepickerContentBase(_elementRef) {\n  _classCallCheck(this, MatDatepickerContentBase);\n\n  this._elementRef = _elementRef;\n};\n\nif (false) {\n  /** @type {?} */\n  MatDatepickerContentBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nvar _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n * @template S, D\n */\n\n\nvar MatDatepickerContent = /*#__PURE__*/function (_MatDatepickerContent) {\n  _inherits(MatDatepickerContent, _MatDatepickerContent);\n\n  var _super3 = _createSuper(MatDatepickerContent);\n\n  /**\n   * @param {?} elementRef\n   * @param {?=} _changeDetectorRef\n   * @param {?=} _model\n   * @param {?=} _dateAdapter\n   * @param {?=} _rangeSelectionStrategy\n   */\n  function MatDatepickerContent(elementRef, _changeDetectorRef, _model, _dateAdapter, _rangeSelectionStrategy) {\n    var _this9;\n\n    _classCallCheck(this, MatDatepickerContent);\n\n    _this9 = _super3.call(this, elementRef);\n    _this9._changeDetectorRef = _changeDetectorRef;\n    _this9._model = _model;\n    _this9._dateAdapter = _dateAdapter;\n    _this9._rangeSelectionStrategy = _rangeSelectionStrategy;\n    /**\n     * Current state of the animation.\n     */\n\n    _this9._animationState = 'enter';\n    /**\n     * Emits when an animation has finished.\n     */\n\n    _this9._animationDone = new Subject();\n    return _this9;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerContent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._calendar.focusActiveCell();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._animationDone.complete();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleUserSelection\",\n    value: function _handleUserSelection(event) {\n      // @breaking-change 11.0.0 Remove null checks for _model,\n      // _rangeSelectionStrategy and _dateAdapter.\n      if (this._model && this._dateAdapter) {\n        /** @type {?} */\n        var selection = this._model.selection;\n        /** @type {?} */\n\n        var _value2 = event.value;\n        /** @type {?} */\n\n        var isRange = selection instanceof DateRange; // If we're selecting a range and we have a selection strategy, always pass the value through\n        // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n        // A null value when picking a range means that the user cancelled the selection (e.g. by\n        // pressing escape), whereas when selecting a single value it means that the value didn't\n        // change. This isn't very intuitive, but it's here for backwards-compatibility.\n\n        if (isRange && this._rangeSelectionStrategy) {\n          /** @type {?} */\n          var newSelection = this._rangeSelectionStrategy.selectionFinished(_value2,\n          /** @type {?} */\n\n          /** @type {?} */\n          selection, event.event);\n\n          this._model.updateSelection(\n          /** @type {?} */\n\n          /** @type {?} */\n          newSelection, this);\n        } else if (_value2 && (isRange || !this._dateAdapter.sameDate(_value2,\n        /** @type {?} */\n\n        /** @type {?} */\n        selection))) {\n          this._model.add(_value2);\n        }\n      }\n\n      if (!this._model || this._model.isComplete()) {\n        this.datepicker.close();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_startExitAnimation\",\n    value: function _startExitAnimation() {\n      this._animationState = 'void'; // @breaking-change 11.0.0 Remove null check for `_changeDetectorRef`.\n\n      if (this._changeDetectorRef) {\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSelected\",\n    value: function _getSelected() {\n      // @breaking-change 11.0.0 Remove null check for `_model`.\n      return this._model ?\n      /** @type {?} */\n\n      /** @type {?} */\n      this._model.selection : null;\n    }\n  }]);\n\n  return MatDatepickerContent;\n}(_MatDatepickerContentMixinBase);\n\nMatDatepickerContent.ɵfac = function MatDatepickerContent_Factory(t) {\n  return new (t || MatDatepickerContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatDateSelectionModel), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_SELECTION_STRATEGY, 8));\n};\n\nMatDatepickerContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDatepickerContent,\n  selectors: [[\"mat-datepicker-content\"]],\n  viewQuery: function MatDatepickerContent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatCalendar, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calendar = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-datepicker-content\"],\n  hostVars: 3,\n  hostBindings: function MatDatepickerContent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@transformPanel.done\", function MatDatepickerContent_animation_transformPanel_done_HostBindingHandler() {\n        return ctx._animationDone.next();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@transformPanel\", ctx._animationState);\n      ɵngcc0.ɵɵclassProp(\"mat-datepicker-content-touch\", ctx.datepicker.touchUi);\n    }\n  },\n  inputs: {\n    color: \"color\"\n  },\n  exportAs: [\"matDatepickerContent\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 13,\n  consts: [[\"cdkTrapFocus\", \"\", 3, \"id\", \"ngClass\", \"startAt\", \"startView\", \"minDate\", \"maxDate\", \"dateFilter\", \"headerComponent\", \"selected\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"yearSelected\", \"monthSelected\", \"_userSelection\"]],\n  template: function MatDatepickerContent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"mat-calendar\", 0);\n      ɵngcc0.ɵɵlistener(\"yearSelected\", function MatDatepickerContent_Template_mat_calendar_yearSelected_0_listener($event) {\n        return ctx.datepicker._selectYear($event);\n      })(\"monthSelected\", function MatDatepickerContent_Template_mat_calendar_monthSelected_0_listener($event) {\n        return ctx.datepicker._selectMonth($event);\n      })(\"_userSelection\", function MatDatepickerContent_Template_mat_calendar__userSelection_0_listener($event) {\n        return ctx._handleUserSelection($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"id\", ctx.datepicker.id)(\"ngClass\", ctx.datepicker.panelClass)(\"startAt\", ctx.datepicker.startAt)(\"startView\", ctx.datepicker.startView)(\"minDate\", ctx.datepicker._minDate)(\"maxDate\", ctx.datepicker._maxDate)(\"dateFilter\", ctx.datepicker._dateFilter)(\"headerComponent\", ctx.datepicker.calendarHeaderComponent)(\"selected\", ctx._getSelected())(\"dateClass\", ctx.datepicker.dateClass)(\"comparisonStart\", ctx.comparisonStart)(\"comparisonEnd\", ctx.comparisonEnd)(\"@fadeInCalendar\", \"enter\");\n    }\n  },\n  directives: [MatCalendar, ɵngcc5.CdkTrapFocus, ɵngcc1.NgClass],\n  styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDatepickerContent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatDateSelectionModel\n  }, {\n    type: DateAdapter\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n    }]\n  }];\n};\n\nMatDatepickerContent.propDecorators = {\n  _calendar: [{\n    type: ViewChild,\n    args: [MatCalendar]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerContent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-content',\n      template: \"<mat-calendar cdkTrapFocus\\n    [id]=\\\"datepicker.id\\\"\\n    [ngClass]=\\\"datepicker.panelClass\\\"\\n    [startAt]=\\\"datepicker.startAt\\\"\\n    [startView]=\\\"datepicker.startView\\\"\\n    [minDate]=\\\"datepicker._minDate\\\"\\n    [maxDate]=\\\"datepicker._maxDate\\\"\\n    [dateFilter]=\\\"datepicker._dateFilter\\\"\\n    [headerComponent]=\\\"datepicker.calendarHeaderComponent\\\"\\n    [selected]=\\\"_getSelected()\\\"\\n    [dateClass]=\\\"datepicker.dateClass\\\"\\n    [comparisonStart]=\\\"comparisonStart\\\"\\n    [comparisonEnd]=\\\"comparisonEnd\\\"\\n    [@fadeInCalendar]=\\\"'enter'\\\"\\n    (yearSelected)=\\\"datepicker._selectYear($event)\\\"\\n    (monthSelected)=\\\"datepicker._selectMonth($event)\\\"\\n    (_userSelection)=\\\"_handleUserSelection($event)\\\">\\n</mat-calendar>\\n\",\n      host: {\n        'class': 'mat-datepicker-content',\n        '[@transformPanel]': '_animationState',\n        '(@transformPanel.done)': '_animationDone.next()',\n        '[class.mat-datepicker-content-touch]': 'datepicker.touchUi'\n      },\n      animations: [matDatepickerAnimations.transformPanel, matDatepickerAnimations.fadeInCalendar],\n      exportAs: 'matDatepickerContent',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['color'],\n      styles: [\".mat-datepicker-content{display:block;border-radius:4px}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content-touch{display:block;max-height:80vh;overflow:auto;margin:-24px}.mat-datepicker-content-touch .mat-calendar{min-width:250px;min-height:312px;max-width:750px;max-height:788px}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-calendar{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-calendar{width:80vw;height:100vw}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatDateSelectionModel\n    }, {\n      type: ɵngcc2.DateAdapter\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_RANGE_SELECTION_STRATEGY]\n      }]\n    }];\n  }, {\n    _calendar: [{\n      type: ViewChild,\n      args: [MatCalendar]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Reference to the internal calendar component.\n   * @type {?}\n   */\n  MatDatepickerContent.prototype._calendar;\n  /**\n   * Reference to the datepicker that created the overlay.\n   * @type {?}\n   */\n\n  MatDatepickerContent.prototype.datepicker;\n  /**\n   * Start of the comparison range.\n   * @type {?}\n   */\n\n  MatDatepickerContent.prototype.comparisonStart;\n  /**\n   * End of the comparison range.\n   * @type {?}\n   */\n\n  MatDatepickerContent.prototype.comparisonEnd;\n  /**\n   * Whether the datepicker is above or below the input.\n   * @type {?}\n   */\n\n  MatDatepickerContent.prototype._isAbove;\n  /**\n   * Current state of the animation.\n   * @type {?}\n   */\n\n  MatDatepickerContent.prototype._animationState;\n  /**\n   * Emits when an animation has finished.\n   * @type {?}\n   */\n\n  MatDatepickerContent.prototype._animationDone;\n  /**\n   * @deprecated `_changeDetectorRef`, `_model` and `_rangeSelectionStrategy`\n   * parameters to become required.\n   * \\@breaking-change 11.0.0\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerContent.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerContent.prototype._model;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerContent.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerContent.prototype._rangeSelectionStrategy;\n}\n/**\n * Form control that can be associated with a datepicker.\n * @record\n * @template D\n */\n\n\nfunction MatDatepickerControl() {}\n\nif (false) {\n  /** @type {?} */\n  MatDatepickerControl.prototype.min;\n  /** @type {?} */\n\n  MatDatepickerControl.prototype.max;\n  /** @type {?} */\n\n  MatDatepickerControl.prototype.disabled;\n  /** @type {?} */\n\n  MatDatepickerControl.prototype.dateFilter;\n  /** @type {?} */\n\n  MatDatepickerControl.prototype._disabledChange;\n  /**\n   * @return {?}\n   */\n\n  MatDatepickerControl.prototype.getStartValue = function () {};\n  /**\n   * @return {?}\n   */\n\n\n  MatDatepickerControl.prototype.getThemePalette = function () {};\n  /**\n   * @return {?}\n   */\n\n\n  MatDatepickerControl.prototype.getConnectedOverlayOrigin = function () {};\n}\n/**\n * Base class for a datepicker.\n * @abstract\n * @template C, S, D\n */\n\n\nvar MatDatepickerBase = /*#__PURE__*/function () {\n  /**\n   * @param {?} _dialog\n   * @param {?} _overlay\n   * @param {?} _ngZone\n   * @param {?} _viewContainerRef\n   * @param {?} scrollStrategy\n   * @param {?} _dateAdapter\n   * @param {?} _dir\n   * @param {?} _document\n   * @param {?} _model\n   */\n  function MatDatepickerBase(_dialog, _overlay, _ngZone, _viewContainerRef, scrollStrategy, _dateAdapter, _dir, _document, _model) {\n    _classCallCheck(this, MatDatepickerBase);\n\n    this._dialog = _dialog;\n    this._overlay = _overlay;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dateAdapter = _dateAdapter;\n    this._dir = _dir;\n    this._document = _document;\n    this._model = _model;\n    /**\n     * The view that the calendar should start in.\n     */\n\n    this.startView = 'month';\n    this._touchUi = false;\n    /**\n     * Preferred position of the datepicker in the X axis.\n     */\n\n    this.xPosition = 'start';\n    /**\n     * Preferred position of the datepicker in the Y axis.\n     */\n\n    this.yPosition = 'below';\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.yearSelected = new EventEmitter();\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n\n    this.monthSelected = new EventEmitter();\n    /**\n     * Emits when the datepicker has been opened.\n     */\n\n    this.openedStream = new EventEmitter();\n    /**\n     * Emits when the datepicker has been closed.\n     */\n\n    this.closedStream = new EventEmitter();\n    this._opened = false;\n    /**\n     * The id for the datepicker calendar.\n     */\n\n    this.id = \"mat-datepicker-\".concat(datepickerUid++);\n    /**\n     * The element that was focused before the datepicker was opened.\n     */\n\n    this._focusedElementBeforeOpen = null;\n    /**\n     * Emits when the datepicker is disabled.\n     */\n\n    this._disabledChange = new Subject();\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\n   * The date to open the calendar to initially.\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerBase, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var positionChange = changes['xPosition'] || changes['yPosition'];\n\n      if (positionChange && !positionChange.firstChange && this._popupRef) {\n        this._setConnectedPositions(\n        /** @type {?} */\n        this._popupRef.getConfig().positionStrategy);\n\n        if (this.opened) {\n          this._popupRef.updatePosition();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyPopup();\n\n      this.close();\n\n      this._disabledChange.complete();\n    }\n    /**\n     * Selects the given date\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(date) {\n      this._model.add(date);\n    }\n    /**\n     * Emits the selected year in multiyear view\n     * @param {?} normalizedYear\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectYear\",\n    value: function _selectYear(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /**\n     * Emits selected month in year view\n     * @param {?} normalizedMonth\n     * @return {?}\n     */\n\n  }, {\n    key: \"_selectMonth\",\n    value: function _selectMonth(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param {?} input The datepicker input to register with this datepicker.\n     * @return {?} Selection model that the input should hook itself up to.\n     */\n\n  }, {\n    key: \"_registerInput\",\n    value: function _registerInput(input) {\n      if (this._datepickerInput) {\n        throw Error('A MatDatepicker can only be associated with a single input.');\n      }\n\n      this._datepickerInput = input;\n      return this._model;\n    }\n    /**\n     * Open the calendar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this._opened || this.disabled) {\n        return;\n      }\n\n      if (!this._datepickerInput) {\n        throw Error('Attempted to open an MatDatepicker with no associated input.');\n      }\n\n      if (this._document) {\n        this._focusedElementBeforeOpen = this._document.activeElement;\n      }\n\n      this.touchUi ? this._openAsDialog() : this._openAsPopup();\n      this._opened = true;\n      this.openedStream.emit();\n    }\n    /**\n     * Close the calendar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this10 = this;\n\n      if (!this._opened) {\n        return;\n      }\n\n      if (this._popupComponentRef && this._popupRef) {\n        /** @type {?} */\n        var instance = this._popupComponentRef.instance;\n\n        instance._startExitAnimation();\n\n        instance._animationDone.pipe(take(1)).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this10._destroyPopup();\n        });\n      }\n\n      if (this._dialogRef) {\n        this._dialogRef.close();\n\n        this._dialogRef = null;\n      }\n      /** @type {?} */\n\n\n      var completeClose =\n      /**\n      * @return {?}\n      */\n      function completeClose() {\n        // The `_opened` could've been reset already if\n        // we got two events in quick succession.\n        if (_this10._opened) {\n          _this10._opened = false;\n\n          _this10.closedStream.emit();\n\n          _this10._focusedElementBeforeOpen = null;\n        }\n      };\n\n      if (this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function') {\n        // Because IE moves focus asynchronously, we can't count on it being restored before we've\n        // marked the datepicker as closed. If the event fires out of sequence and the element that\n        // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n        // able to close the calendar at all. We work around it by making the logic, that marks\n        // the datepicker as closed, async as well.\n        this._focusedElementBeforeOpen.focus();\n\n        setTimeout(completeClose);\n      } else {\n        completeClose();\n      }\n    }\n    /**\n     * Open the calendar as a dialog.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openAsDialog\",\n    value: function _openAsDialog() {\n      var _this11 = this;\n\n      // Usually this would be handled by `open` which ensures that we can only have one overlay\n      // open at a time, however since we reset the variables in async handlers some overlays\n      // may slip through if the user opens and closes multiple times in quick succession (e.g.\n      // by holding down the enter key).\n      if (this._dialogRef) {\n        this._dialogRef.close();\n      }\n\n      this._dialogRef = this._dialog.open(MatDatepickerContent, {\n        direction: this._dir ? this._dir.value : 'ltr',\n        viewContainerRef: this._viewContainerRef,\n        panelClass: 'mat-datepicker-dialog',\n        // These values are all the same as the defaults, but we set them explicitly so that the\n        // datepicker dialog behaves consistently even if the user changed the defaults.\n        hasBackdrop: true,\n        disableClose: false,\n        width: '',\n        height: '',\n        minWidth: '',\n        minHeight: '',\n        maxWidth: '80vw',\n        maxHeight: '',\n        position: {},\n        autoFocus: true,\n        // `MatDialog` has focus restoration built in, however we want to disable it since the\n        // datepicker also has focus restoration for dropdown mode. We want to do this, in order\n        // to ensure that the timing is consistent between dropdown and dialog modes since `MatDialog`\n        // restores focus when the animation is finished, but the datepicker does it immediately.\n        // Furthermore, this avoids any conflicts where the datepicker consumer might move focus\n        // inside the `closed` event which is dispatched immediately.\n        restoreFocus: false\n      });\n\n      this._dialogRef.afterClosed().subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this11.close();\n      });\n\n      this._forwardContentValues(this._dialogRef.componentInstance);\n    }\n    /**\n     * Open the calendar as a popup.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openAsPopup\",\n    value: function _openAsPopup() {\n      var _this12 = this;\n\n      /** @type {?} */\n      var portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n\n      this._destroyPopup();\n\n      this._createPopup();\n\n      this._popupComponentRef =\n      /** @type {?} */\n      this._popupRef.attach(portal);\n\n      this._forwardContentValues(this._popupComponentRef.instance); // Update the position once the calendar has rendered.\n\n\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        _this12._popupRef.updatePosition();\n      });\n    }\n    /**\n     * Forwards relevant values from the datepicker to the datepicker content inside the overlay.\n     * @protected\n     * @param {?} instance\n     * @return {?}\n     */\n\n  }, {\n    key: \"_forwardContentValues\",\n    value: function _forwardContentValues(instance) {\n      instance.datepicker = this;\n      instance.color = this.color;\n    }\n    /**\n     * Create the popup.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createPopup\",\n    value: function _createPopup() {\n      var _this13 = this;\n\n      /** @type {?} */\n      var positionStrategy = this._overlay.position().flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.mat-datepicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition();\n      /** @type {?} */\n\n\n      var overlayConfig = new OverlayConfig({\n        positionStrategy: this._setConnectedPositions(positionStrategy),\n        hasBackdrop: true,\n        backdropClass: 'mat-overlay-transparent-backdrop',\n        direction: this._dir,\n        scrollStrategy: this._scrollStrategy(),\n        panelClass: 'mat-datepicker-popup'\n      });\n      this._popupRef = this._overlay.create(overlayConfig);\n\n      this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n      merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE || _this13._datepickerInput && event.altKey && event.keyCode === UP_ARROW;\n      }))).subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        _this13.close();\n      });\n    }\n    /**\n     * Destroys the current popup overlay.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_destroyPopup\",\n    value: function _destroyPopup() {\n      if (this._popupRef) {\n        this._popupRef.dispose();\n\n        this._popupRef = this._popupComponentRef = null;\n      }\n    }\n    /**\n     * Sets the positions of the datepicker in dropdown mode based on the current configuration.\n     * @private\n     * @param {?} strategy\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setConnectedPositions\",\n    value: function _setConnectedPositions(strategy) {\n      /** @type {?} */\n      var primaryX = this.xPosition === 'end' ? 'end' : 'start';\n      /** @type {?} */\n\n      var secondaryX = primaryX === 'start' ? 'end' : 'start';\n      /** @type {?} */\n\n      var primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n      /** @type {?} */\n\n      var secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n      return strategy.withPositions([{\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY\n      }, {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY\n      }, {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY\n      }, {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY\n      }]);\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n  }, {\n    key: \"startAt\",\n    get: function get() {\n      // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n      // selected value is.\n      return this._startAt || (this._datepickerInput ? this._datepickerInput.getStartValue() : null);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    /**\n     * Color palette to use on the datepicker's calendar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._color || (this._datepickerInput ? this._datepickerInput.getThemePalette() : undefined);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._color = value;\n    }\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     * @return {?}\n     */\n\n  }, {\n    key: \"touchUi\",\n    get: function get() {\n      return this._touchUi;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._touchUi = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the datepicker pop-up should be disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled === undefined && this._datepickerInput ? this._datepickerInput.disabled : !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._disabledChange.next(newValue);\n      }\n    }\n    /**\n     * Whether the calendar is open.\n     * @return {?}\n     */\n\n  }, {\n    key: \"opened\",\n    get: function get() {\n      return this._opened;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value ? this.open() : this.close();\n    }\n    /**\n     * The minimum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_minDate\",\n    get: function get() {\n      return this._datepickerInput && this._datepickerInput.min;\n    }\n    /**\n     * The maximum selectable date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_maxDate\",\n    get: function get() {\n      return this._datepickerInput && this._datepickerInput.max;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dateFilter\",\n    get: function get() {\n      return this._datepickerInput && this._datepickerInput.dateFilter;\n    }\n  }]);\n\n  return MatDatepickerBase;\n}();\n\nMatDatepickerBase.ɵfac = function MatDatepickerBase_Factory(t) {\n  return new (t || MatDatepickerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc7.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(MAT_DATEPICKER_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDateSelectionModel));\n};\n\nMatDatepickerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDatepickerBase,\n  inputs: {\n    startView: \"startView\",\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    startAt: \"startAt\",\n    color: \"color\",\n    touchUi: \"touchUi\",\n    disabled: \"disabled\",\n    opened: \"opened\",\n    calendarHeaderComponent: \"calendarHeaderComponent\",\n    panelClass: \"panelClass\",\n    dateClass: \"dateClass\"\n  },\n  outputs: {\n    yearSelected: \"yearSelected\",\n    monthSelected: \"monthSelected\",\n    openedStream: \"opened\",\n    closedStream: \"closed\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatDatepickerBase.ctorParameters = function () {\n  return [{\n    type: MatDialog\n  }, {\n    type: Overlay\n  }, {\n    type: NgZone\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: MatDateSelectionModel\n  }];\n};\n\nMatDatepickerBase.propDecorators = {\n  calendarHeaderComponent: [{\n    type: Input\n  }],\n  startAt: [{\n    type: Input\n  }],\n  startView: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  touchUi: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  xPosition: [{\n    type: Input\n  }],\n  yPosition: [{\n    type: Input\n  }],\n  yearSelected: [{\n    type: Output\n  }],\n  monthSelected: [{\n    type: Output\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  dateClass: [{\n    type: Input\n  }],\n  openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  opened: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc7.MatDialog\n    }, {\n      type: ɵngcc8.Overlay\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DATEPICKER_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatDateSelectionModel\n    }];\n  }, {\n    startView: [{\n      type: Input\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    yearSelected: [{\n      type: Output\n    }],\n    monthSelected: [{\n      type: Output\n    }],\n    openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    startAt: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    touchUi: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    opened: [{\n      type: Input\n    }],\n    calendarHeaderComponent: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    dateClass: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDatepickerBase.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatDatepickerBase.ngAcceptInputType_touchUi;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._scrollStrategy;\n  /**\n   * An input indicating the type of the custom header component for the calendar, if set.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.calendarHeaderComponent;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._startAt;\n  /**\n   * The view that the calendar should start in.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.startView;\n  /** @type {?} */\n\n  MatDatepickerBase.prototype._color;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._touchUi;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._disabled;\n  /**\n   * Preferred position of the datepicker in the X axis.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.xPosition;\n  /**\n   * Preferred position of the datepicker in the Y axis.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.yPosition;\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.yearSelected;\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.monthSelected;\n  /**\n   * Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.panelClass;\n  /**\n   * Function that can be used to add custom CSS classes to dates.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.dateClass;\n  /**\n   * Emits when the datepicker has been opened.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.openedStream;\n  /**\n   * Emits when the datepicker has been closed.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.closedStream;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._opened;\n  /**\n   * The id for the datepicker calendar.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype.id;\n  /**\n   * A reference to the overlay when the calendar is opened as a popup.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._popupRef;\n  /**\n   * A reference to the dialog when the calendar is opened as a dialog.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._dialogRef;\n  /**\n   * Reference to the component instantiated in popup mode.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._popupComponentRef;\n  /**\n   * The element that was focused before the datepicker was opened.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._focusedElementBeforeOpen;\n  /**\n   * The input element this datepicker is associated with.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype._datepickerInput;\n  /**\n   * Emits when the datepicker is disabled.\n   * @type {?}\n   */\n\n  MatDatepickerBase.prototype._disabledChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._dialog;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._overlay;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._viewContainerRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._dir;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerBase.prototype._model;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n * @template D\n */\n\n\nvar MatDatepicker = /*#__PURE__*/function (_MatDatepickerBase) {\n  _inherits(MatDatepicker, _MatDatepickerBase);\n\n  var _super4 = _createSuper(MatDatepicker);\n\n  function MatDatepicker() {\n    _classCallCheck(this, MatDatepicker);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return MatDatepicker;\n}(MatDatepickerBase);\n\nMatDatepicker.ɵfac = function MatDatepicker_Factory(t) {\n  return ɵMatDatepicker_BaseFactory(t || MatDatepicker);\n};\n\nMatDatepicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDatepicker,\n  selectors: [[\"mat-datepicker\"]],\n  exportAs: [\"matDatepicker\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function MatDatepicker_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\nvar ɵMatDatepicker_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDatepicker);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepicker, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker',\n      template: '',\n      exportAs: 'matDatepicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-input-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n * @template D, S\n */\n\n\nvar MatDatepickerInputEvent =\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nfunction MatDatepickerInputEvent(target, targetElement) {\n  _classCallCheck(this, MatDatepickerInputEvent);\n\n  this.target = target;\n  this.targetElement = targetElement;\n  this.value = this.target.value;\n};\n\nif (false) {\n  /**\n   * The new value for the target datepicker input.\n   * @type {?}\n   */\n  MatDatepickerInputEvent.prototype.value;\n  /**\n   * Reference to the datepicker input component that emitted the event.\n   * @type {?}\n   */\n\n  MatDatepickerInputEvent.prototype.target;\n  /**\n   * Reference to the native input element associated with the datepicker input.\n   * @type {?}\n   */\n\n  MatDatepickerInputEvent.prototype.targetElement;\n}\n/**\n * Base class for datepicker inputs.\n * @abstract\n * @template S, D\n */\n\n\nvar MatDatepickerInputBase = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _dateAdapter\n   * @param {?} _dateFormats\n   */\n  function MatDatepickerInputBase(_elementRef, _dateAdapter, _dateFormats) {\n    var _this14 = this;\n\n    _classCallCheck(this, MatDatepickerInputBase);\n\n    this._elementRef = _elementRef;\n    this._dateAdapter = _dateAdapter;\n    this._dateFormats = _dateFormats;\n    /**\n     * Emits when a `change` event is fired on this `<input>`.\n     */\n\n    this.dateChange = new EventEmitter();\n    /**\n     * Emits when an `input` event is fired on this `<input>`.\n     */\n\n    this.dateInput = new EventEmitter();\n    /**\n     * Emits when the value changes (either due to user input or programmatic change).\n     */\n\n    this._valueChange = new EventEmitter();\n    /**\n     * Emits when the disabled state has changed\n     */\n\n    this._disabledChange = new EventEmitter();\n\n    this._onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this._validatorOnChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this._cvaOnChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this._valueChangesSubscription = Subscription.EMPTY;\n    this._localeSubscription = Subscription.EMPTY;\n    /**\n     * The form control validator for whether the input parses.\n     */\n\n    this._parseValidator =\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this14._lastValueValid ? null : {\n        'matDatepickerParse': {\n          'text': _this14._elementRef.nativeElement.value\n        }\n      };\n    };\n    /**\n     * The form control validator for the date filter.\n     */\n\n\n    this._filterValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    function (control) {\n      /** @type {?} */\n      var controlValue = _this14._getValidDateOrNull(_this14._dateAdapter.deserialize(control.value));\n      /** @type {?} */\n\n\n      var dateFilter = _this14._getDateFilter();\n\n      return !dateFilter || !controlValue || dateFilter(controlValue) ? null : {\n        'matDatepickerFilter': true\n      };\n    };\n    /**\n     * The form control validator for the min date.\n     */\n\n\n    this._minValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    function (control) {\n      /** @type {?} */\n      var controlValue = _this14._getValidDateOrNull(_this14._dateAdapter.deserialize(control.value));\n      /** @type {?} */\n\n\n      var min = _this14._getMinDate();\n\n      return !min || !controlValue || _this14._dateAdapter.compareDate(min, controlValue) <= 0 ? null : {\n        'matDatepickerMin': {\n          'min': min,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * The form control validator for the max date.\n     */\n\n\n    this._maxValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    function (control) {\n      /** @type {?} */\n      var controlValue = _this14._getValidDateOrNull(_this14._dateAdapter.deserialize(control.value));\n      /** @type {?} */\n\n\n      var max = _this14._getMaxDate();\n\n      return !max || !controlValue || _this14._dateAdapter.compareDate(max, controlValue) >= 0 ? null : {\n        'matDatepickerMax': {\n          'max': max,\n          'actual': controlValue\n        }\n      };\n    };\n    /**\n     * Whether the last value set on the input was valid.\n     */\n\n\n    this._lastValueValid = false;\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    } // Update the displayed date when the locale changes.\n\n\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      _this14.value = _this14.value;\n    });\n  }\n  /**\n   * The value of the input.\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerInputBase, [{\n    key: \"_getValidators\",\n\n    /**\n     * Gets the base validator functions.\n     * @protected\n     * @return {?}\n     */\n    value: function _getValidators() {\n      return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n    }\n    /**\n     * Registers a date selection model with the input.\n     * @param {?} model\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerModel\",\n    value: function _registerModel(model) {\n      var _this15 = this;\n\n      this._model = model;\n\n      this._valueChangesSubscription.unsubscribe();\n\n      if (this._pendingValue) {\n        this._assignValue(this._pendingValue);\n      }\n\n      this._valueChangesSubscription = this._model.selectionChanged.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        if (event.source !== _this15) {\n          /** @type {?} */\n          var _value3 = _this15._getValueFromModel(event.selection);\n\n          _this15._cvaOnChange(_value3);\n\n          _this15._onTouched();\n\n          _this15._formatValue(_value3);\n\n          _this15.dateInput.emit(new MatDatepickerInputEvent(_this15, _this15._elementRef.nativeElement));\n\n          _this15.dateChange.emit(new MatDatepickerInputEvent(_this15, _this15._elementRef.nativeElement));\n\n          if (_this15._outsideValueChanged) {\n            _this15._outsideValueChanged();\n          }\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._valueChangesSubscription.unsubscribe();\n\n      this._localeSubscription.unsubscribe();\n\n      this._valueChange.complete();\n\n      this._disabledChange.complete();\n    }\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnValidatorChange\",\n    value: function registerOnValidatorChange(fn) {\n      this._validatorOnChange = fn;\n    }\n    /**\n     * \\@docs-private\n     * @param {?} c\n     * @return {?}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate(c) {\n      return this._validator ? this._validator(c) : null;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._cvaOnChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      /** @type {?} */\n      var isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n      if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n        this._openPopup();\n\n        event.preventDefault();\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput(value) {\n      /** @type {?} */\n      var lastValueWasValid = this._lastValueValid;\n      /** @type {?} */\n\n      var date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n\n      this._lastValueValid = !date || this._dateAdapter.isValid(date);\n      date = this._getValidDateOrNull(date);\n\n      if (!this._dateAdapter.sameDate(date, this.value)) {\n        this._assignValue(date);\n\n        this._cvaOnChange(date);\n\n        this._valueChange.emit(date);\n\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      } else if (lastValueWasValid !== this._lastValueValid) {\n        this._validatorOnChange();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange() {\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /**\n     * Handles blur events on the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      // Reformat the input only if we have a valid value.\n      if (this.value) {\n        this._formatValue(this.value);\n      }\n\n      this._onTouched();\n    }\n    /**\n     * Formats a value and sets it on the input element.\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      this._elementRef.nativeElement.value = value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /**\n     * @protected\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Assigns a value to the model.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_assignValue\",\n    value: function _assignValue(value) {\n      // We may get some incoming values before the model was\n      // assigned. Save the value so that we can assign it later.\n      if (this._model) {\n        this._assignValueToModel(value);\n\n        this._pendingValue = null;\n      } else {\n        this._pendingValue = value;\n      }\n    }\n    /**\n     * Checks whether a parent control is disabled. This is in place so that it can be overridden\n     * by inputs extending this one which can be placed inside of a group that can be disabled.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parentDisabled\",\n    value: function _parentDisabled() {\n      return false;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = !value || this._dateAdapter.isValid(value);\n      value = this._getValidDateOrNull(value);\n      /** @type {?} */\n\n      var oldDate = this.value;\n\n      this._assignValue(value);\n\n      this._formatValue(value);\n\n      if (!this._dateAdapter.sameDate(oldDate, value)) {\n        this._valueChange.emit(value);\n      }\n    }\n    /**\n     * Whether the datepicker-input is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return !!this._disabled || this._parentDisabled();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n      /** @type {?} */\n\n      var element = this._elementRef.nativeElement;\n\n      if (this._disabled !== newValue) {\n        this._disabled = newValue;\n\n        this._disabledChange.emit(newValue);\n      } // We need to null check the `blur` method, because it's undefined during SSR.\n      // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n      // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n      // element has been inserted.\n\n\n      if (newValue && this._isInitialized && element.blur) {\n        // Normally, native input elements automatically blur if they turn disabled. This behavior\n        // is problematic, because it would mean that it triggers another change detection cycle,\n        // which then causes a changed after checked error if the input element was focused before.\n        element.blur();\n      }\n    }\n  }]);\n\n  return MatDatepickerInputBase;\n}();\n\nMatDatepickerInputBase.ɵfac = function MatDatepickerInputBase_Factory(t) {\n  return new (t || MatDatepickerInputBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8));\n};\n\nMatDatepickerInputBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDatepickerInputBase,\n  inputs: {\n    value: \"value\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    dateChange: \"dateChange\",\n    dateInput: \"dateInput\"\n  }\n});\n/** @nocollapse */\n\nMatDatepickerInputBase.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }];\n};\n\nMatDatepickerInputBase.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  dateChange: [{\n    type: Output\n  }],\n  dateInput: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerInputBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }];\n  }, {\n    dateChange: [{\n      type: Output\n    }],\n    dateInput: [{\n      type: Output\n    }],\n    value: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDatepickerInputBase.ngAcceptInputType_value;\n  /** @type {?} */\n\n  MatDatepickerInputBase.ngAcceptInputType_disabled;\n  /**\n   * Whether the component has been initialized.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._isInitialized;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInputBase.prototype._model;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._disabled;\n  /**\n   * Emits when a `change` event is fired on this `<input>`.\n   * @type {?}\n   */\n\n  MatDatepickerInputBase.prototype.dateChange;\n  /**\n   * Emits when an `input` event is fired on this `<input>`.\n   * @type {?}\n   */\n\n  MatDatepickerInputBase.prototype.dateInput;\n  /**\n   * Emits when the value changes (either due to user input or programmatic change).\n   * @type {?}\n   */\n\n  MatDatepickerInputBase.prototype._valueChange;\n  /**\n   * Emits when the disabled state has changed\n   * @type {?}\n   */\n\n  MatDatepickerInputBase.prototype._disabledChange;\n  /** @type {?} */\n\n  MatDatepickerInputBase.prototype._onTouched;\n  /** @type {?} */\n\n  MatDatepickerInputBase.prototype._validatorOnChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._cvaOnChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._valueChangesSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._localeSubscription;\n  /**\n   * Since the value is kept on the model which is assigned in an Input,\n   * we might get a value before we have a model. This property keeps track\n   * of the value until we have somewhere to assign it.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._pendingValue;\n  /**\n   * The form control validator for whether the input parses.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._parseValidator;\n  /**\n   * The form control validator for the date filter.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._filterValidator;\n  /**\n   * The form control validator for the min date.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._minValidator;\n  /**\n   * The form control validator for the max date.\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._maxValidator;\n  /**\n   * Combined form control validator for this input.\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInputBase.prototype._validator;\n  /**\n   * Callback that'll be invoked when the selection model is changed\n   * from somewhere that's not the current datepicker input.\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInputBase.prototype._outsideValueChanged;\n  /**\n   * Whether the last value set on the input was valid.\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInputBase.prototype._lastValueValid;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInputBase.prototype._elementRef;\n  /** @type {?} */\n\n  MatDatepickerInputBase.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInputBase.prototype._dateFormats;\n  /**\n   * Gets the minimum date for the input. Used for validation.\n   * @abstract\n   * @protected\n   * @return {?}\n   */\n\n  MatDatepickerInputBase.prototype._getMinDate = function () {};\n  /**\n   * Gets the maximum date for the input. Used for validation.\n   * @abstract\n   * @protected\n   * @return {?}\n   */\n\n\n  MatDatepickerInputBase.prototype._getMaxDate = function () {};\n  /**\n   * Gets the date filter function. Used for validation.\n   * @abstract\n   * @protected\n   * @return {?}\n   */\n\n\n  MatDatepickerInputBase.prototype._getDateFilter = function () {};\n  /**\n   * Opens the popup associated with the input.\n   * @abstract\n   * @protected\n   * @return {?}\n   */\n\n\n  MatDatepickerInputBase.prototype._openPopup = function () {};\n  /**\n   * Assigns a value to the input's model.\n   * @abstract\n   * @protected\n   * @param {?} model\n   * @return {?}\n   */\n\n\n  MatDatepickerInputBase.prototype._assignValueToModel = function (model) {};\n  /**\n   * Converts a value from the model into a native value for the input.\n   * @abstract\n   * @protected\n   * @param {?} modelValue\n   * @return {?}\n   */\n\n\n  MatDatepickerInputBase.prototype._getValueFromModel = function (modelValue) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatDatepickerInput;\n  }),\n  multi: true\n};\n/**\n * \\@docs-private\n * @type {?}\n */\n\nvar MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatDatepickerInput;\n  }),\n  multi: true\n};\n/**\n * Directive used to connect an input to a MatDatepicker.\n * @template D\n */\n\nvar MatDatepickerInput = /*#__PURE__*/function (_MatDatepickerInputBa) {\n  _inherits(MatDatepickerInput, _MatDatepickerInputBa);\n\n  var _super5 = _createSuper(MatDatepickerInput);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} dateAdapter\n   * @param {?} dateFormats\n   * @param {?} _formField\n   */\n  function MatDatepickerInput(elementRef, dateAdapter, dateFormats, _formField) {\n    var _thisSuper, _this16;\n\n    _classCallCheck(this, MatDatepickerInput);\n\n    _this16 = _super5.call(this, elementRef, dateAdapter, dateFormats);\n    _this16._formField = _formField;\n    _this16._validator = Validators.compose(_get((_thisSuper = _assertThisInitialized(_this16), _getPrototypeOf(MatDatepickerInput.prototype)), \"_getValidators\", _thisSuper).call(_thisSuper));\n    return _this16;\n  }\n  /**\n   * The datepicker that this input is associated with.\n   * @param {?} datepicker\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerInput, [{\n    key: \"getConnectedOverlayOrigin\",\n\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return {?} The element to connect the popup to.\n     */\n    value: function getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /**\n     * Returns the palette used by the input's form field, if any.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getThemePalette\",\n    value: function getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /**\n     * Gets the value at which the calendar should start.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getStartValue\",\n    value: function getStartValue() {\n      return this.value;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n     * @return {?}\n     */\n\n  }, {\n    key: \"getPopupConnectionElementRef\",\n    value: function getPopupConnectionElementRef() {\n      return this.getConnectedOverlayOrigin();\n    }\n    /**\n     * Opens the associated datepicker.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openPopup\",\n    value: function _openPopup() {\n      if (this._datepicker) {\n        this._datepicker.open();\n      }\n    }\n    /**\n     * @protected\n     * @param {?} modelValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getValueFromModel\",\n    value: function _getValueFromModel(modelValue) {\n      return modelValue;\n    }\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_assignValueToModel\",\n    value: function _assignValueToModel(value) {\n      if (this._model) {\n        this._model.updateSelection(value, this);\n      }\n    }\n    /**\n     * Gets the input's minimum date.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMinDate\",\n    value: function _getMinDate() {\n      return this._min;\n    }\n    /**\n     * Gets the input's maximum date.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMaxDate\",\n    value: function _getMaxDate() {\n      return this._max;\n    }\n    /**\n     * Gets the input's date filtering function.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDateFilter\",\n    value: function _getDateFilter() {\n      return this._dateFilter;\n    }\n  }, {\n    key: \"matDatepicker\",\n    set: function set(datepicker) {\n      if (datepicker) {\n        this._datepicker = datepicker;\n\n        this._registerModel(datepicker._registerInput(this));\n      }\n    }\n    /**\n     * The minimum valid date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._min;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n      this._validatorOnChange();\n    }\n    /**\n     * The maximum valid date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n      this._validatorOnChange();\n    }\n    /**\n     * Function that can be used to filter out dates within the datepicker.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dateFilter\",\n    get: function get() {\n      return this._dateFilter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._dateFilter = value;\n\n      this._validatorOnChange();\n    }\n  }]);\n\n  return MatDatepickerInput;\n}(MatDatepickerInputBase);\n\nMatDatepickerInput.ɵfac = function MatDatepickerInput_Factory(t) {\n  return new (t || MatDatepickerInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n};\n\nMatDatepickerInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDatepickerInput,\n  selectors: [[\"input\", \"matDatepicker\", \"\"]],\n  hostVars: 5,\n  hostBindings: function MatDatepickerInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function MatDatepickerInput_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      })(\"change\", function MatDatepickerInput_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"blur\", function MatDatepickerInput_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      })(\"keydown\", function MatDatepickerInput_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx._datepicker ? \"dialog\" : null)(\"aria-owns\", (ctx._datepicker == null ? null : ctx._datepicker.opened) && ctx._datepicker.id || null)(\"min\", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)(\"max\", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null);\n    }\n  },\n  inputs: {\n    matDatepicker: \"matDatepicker\",\n    min: \"min\",\n    max: \"max\",\n    dateFilter: [\"matDatepickerFilter\", \"dateFilter\"]\n  },\n  exportAs: [\"matDatepickerInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n    provide: MAT_INPUT_VALUE_ACCESSOR,\n    useExisting: MatDatepickerInput\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatDatepickerInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_FORM_FIELD]\n    }]\n  }];\n};\n\nMatDatepickerInput.propDecorators = {\n  matDatepicker: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input,\n    args: ['matDatepickerFilter']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matDatepicker]',\n      providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: MatDatepickerInput\n      }],\n      host: {\n        '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n        '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n        '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(blur)': '_onBlur()',\n        '(keydown)': '_onKeydown($event)'\n      },\n      exportAs: 'matDatepickerInput'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }, {\n      type: ɵngcc9.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    matDatepicker: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input,\n      args: ['matDatepickerFilter']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDatepickerInput.ngAcceptInputType_value;\n  /** @type {?} */\n\n  MatDatepickerInput.prototype._datepicker;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInput.prototype._min;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInput.prototype._max;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInput.prototype._dateFilter;\n  /**\n   * The combined form control validator for this input.\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInput.prototype._validator;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatDatepickerInput.prototype._outsideValueChanged;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerInput.prototype._formField;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Can be used to override the icon of a `matDatepickerToggle`.\n */\n\n\nvar MatDatepickerToggleIcon = function MatDatepickerToggleIcon() {\n  _classCallCheck(this, MatDatepickerToggleIcon);\n};\n\nMatDatepickerToggleIcon.ɵfac = function MatDatepickerToggleIcon_Factory(t) {\n  return new (t || MatDatepickerToggleIcon)();\n};\n\nMatDatepickerToggleIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDatepickerToggleIcon,\n  selectors: [[\"\", \"matDatepickerToggleIcon\", \"\"]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerToggleIcon, [{\n    type: Directive,\n    args: [{\n      selector: '[matDatepickerToggleIcon]'\n    }]\n  }], null, null);\n})();\n/**\n * @template D\n */\n\n\nvar MatDatepickerToggle = /*#__PURE__*/function () {\n  /**\n   * @param {?} _intl\n   * @param {?} _changeDetectorRef\n   * @param {?} defaultTabIndex\n   */\n  function MatDatepickerToggle(_intl, _changeDetectorRef, defaultTabIndex) {\n    _classCallCheck(this, MatDatepickerToggle);\n\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._stateChanges = Subscription.EMPTY;\n    /** @type {?} */\n\n    var parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n  }\n  /**\n   * Whether the toggle button is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(MatDatepickerToggle, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    value: function ngOnChanges(changes) {\n      if (changes['datepicker']) {\n        this._watchStateChanges();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this._watchStateChanges();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_open\",\n    value: function _open(event) {\n      if (this.datepicker && !this.disabled) {\n        this.datepicker.open();\n        event.stopPropagation();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_watchStateChanges\",\n    value: function _watchStateChanges() {\n      var _this17 = this;\n\n      /** @type {?} */\n      var datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : of();\n      /** @type {?} */\n\n      var inputDisabled = this.datepicker && this.datepicker._datepickerInput ? this.datepicker._datepickerInput._disabledChange : of();\n      /** @type {?} */\n\n      var datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n\n      this._stateChanges.unsubscribe();\n\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled, datepickerToggled).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this17._changeDetectorRef.markForCheck();\n      });\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      if (this._disabled === undefined && this.datepicker) {\n        return this.datepicker.disabled;\n      }\n\n      return !!this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatDatepickerToggle;\n}();\n\nMatDatepickerToggle.ɵfac = function MatDatepickerToggle_Factory(t) {\n  return new (t || MatDatepickerToggle)(ɵngcc0.ɵɵdirectiveInject(MatDatepickerIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatDatepickerToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDatepickerToggle,\n  selectors: [[\"mat-datepicker-toggle\"]],\n  contentQueries: function MatDatepickerToggle_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatDatepickerToggleIcon, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n    }\n  },\n  viewQuery: function MatDatepickerToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c2, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._button = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-datepicker-toggle\"],\n  hostVars: 7,\n  hostBindings: function MatDatepickerToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatDatepickerToggle_focus_HostBindingHandler() {\n        return ctx._button.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1);\n      ɵngcc0.ɵɵclassProp(\"mat-datepicker-toggle-active\", ctx.datepicker && ctx.datepicker.opened)(\"mat-accent\", ctx.datepicker && ctx.datepicker.color === \"accent\")(\"mat-warn\", ctx.datepicker && ctx.datepicker.color === \"warn\");\n    }\n  },\n  inputs: {\n    tabIndex: \"tabIndex\",\n    disabled: \"disabled\",\n    datepicker: [\"for\", \"datepicker\"],\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matDatepickerToggle\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c4,\n  decls: 4,\n  vars: 6,\n  consts: [[\"mat-icon-button\", \"\", \"type\", \"button\", 3, \"disabled\", \"disableRipple\", \"click\"], [\"button\", \"\"], [\"class\", \"mat-datepicker-toggle-default-icon\", \"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", 1, \"mat-datepicker-toggle-default-icon\"], [\"d\", \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"]],\n  template: function MatDatepickerToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c3);\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatDatepickerToggle_Template_button_click_0_listener($event) {\n        return ctx._open($event);\n      });\n      ɵngcc0.ɵɵtemplate(2, MatDatepickerToggle__svg_svg_2_Template, 2, 0, \"svg\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n      ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx.datepicker ? \"dialog\" : null)(\"aria-label\", ctx._intl.openCalendarLabel)(\"tabindex\", ctx.disabled ? 0 - 1 : ctx.tabIndex);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._customIcon);\n    }\n  },\n  directives: [ɵngcc4.MatButton, ɵngcc1.NgIf],\n  styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDatepickerToggle.ctorParameters = function () {\n  return [{\n    type: MatDatepickerIntl\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatDatepickerToggle.propDecorators = {\n  datepicker: [{\n    type: Input,\n    args: ['for']\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  disableRipple: [{\n    type: Input\n  }],\n  _customIcon: [{\n    type: ContentChild,\n    args: [MatDatepickerToggleIcon]\n  }],\n  _button: [{\n    type: ViewChild,\n    args: ['button']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-datepicker-toggle',\n      template: \"<button\\n  #button\\n  mat-icon-button\\n  type=\\\"button\\\"\\n  [attr.aria-haspopup]=\\\"datepicker ? 'dialog' : null\\\"\\n  [attr.aria-label]=\\\"_intl.openCalendarLabel\\\"\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n  [disabled]=\\\"disabled\\\"\\n  [disableRipple]=\\\"disableRipple\\\"\\n  (click)=\\\"_open($event)\\\">\\n\\n  <svg\\n    *ngIf=\\\"!_customIcon\\\"\\n    class=\\\"mat-datepicker-toggle-default-icon\\\"\\n    viewBox=\\\"0 0 24 24\\\"\\n    width=\\\"24px\\\"\\n    height=\\\"24px\\\"\\n    fill=\\\"currentColor\\\"\\n    focusable=\\\"false\\\">\\n    <path d=\\\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\\\"/>\\n  </svg>\\n\\n  <ng-content select=\\\"[matDatepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\",\n      host: {\n        'class': 'mat-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n        '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n        '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n        '(focus)': '_button.focus()'\n      },\n      exportAs: 'matDatepickerToggle',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-datepicker-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-datepicker-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-datepicker-toggle-default-icon{margin:auto}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatDatepickerIntl\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    datepicker: [{\n      type: Input,\n      args: ['for']\n    }],\n    disableRipple: [{\n      type: Input\n    }],\n    _customIcon: [{\n      type: ContentChild,\n      args: [MatDatepickerToggleIcon]\n    }],\n    _button: [{\n      type: ViewChild,\n      args: ['button']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDatepickerToggle.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerToggle.prototype._stateChanges;\n  /**\n   * Datepicker instance that the button will toggle.\n   * @type {?}\n   */\n\n  MatDatepickerToggle.prototype.datepicker;\n  /**\n   * Tabindex for the toggle.\n   * @type {?}\n   */\n\n  MatDatepickerToggle.prototype.tabIndex;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerToggle.prototype._disabled;\n  /**\n   * Whether ripples on the toggle should be disabled.\n   * @type {?}\n   */\n\n  MatDatepickerToggle.prototype.disableRipple;\n  /**\n   * Custom icon set by the consumer.\n   * @type {?}\n   */\n\n  MatDatepickerToggle.prototype._customIcon;\n  /**\n   * Underlying button element.\n   * @type {?}\n   */\n\n  MatDatepickerToggle.prototype._button;\n  /** @type {?} */\n\n  MatDatepickerToggle.prototype._intl;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDatepickerToggle.prototype._changeDetectorRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/date-range-input-parts.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parent component that should be wrapped around `MatStartDate` and `MatEndDate`.\n * @record\n * @template D\n */\n\n\nfunction MatDateRangeInputParent() {}\n\nif (false) {\n  /** @type {?} */\n  MatDateRangeInputParent.prototype.id;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype.min;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype.max;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype.dateFilter;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._startInput;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._endInput;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._groupDisabled;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._ariaDescribedBy;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._ariaLabelledBy;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._handleChildValueChange;\n  /** @type {?} */\n\n  MatDateRangeInputParent.prototype._openDatepicker;\n}\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n * @type {?}\n */\n\n\nvar MAT_DATE_RANGE_INPUT_PARENT = new InjectionToken('MAT_DATE_RANGE_INPUT_PARENT');\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n * @abstract\n * @template D\n */\n\nvar MatDateRangeInputPartBase = /*#__PURE__*/function (_MatDatepickerInputBa2) {\n  _inherits(MatDateRangeInputPartBase, _MatDatepickerInputBa2);\n\n  var _super6 = _createSuper(MatDateRangeInputPartBase);\n\n  /**\n   * @param {?} _rangeInput\n   * @param {?} elementRef\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _injector\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} dateAdapter\n   * @param {?} dateFormats\n   */\n  function MatDateRangeInputPartBase(_rangeInput, elementRef, _defaultErrorStateMatcher, _injector, _parentForm, _parentFormGroup, dateAdapter, dateFormats) {\n    var _this18;\n\n    _classCallCheck(this, MatDateRangeInputPartBase);\n\n    _this18 = _super6.call(this, elementRef, dateAdapter, dateFormats);\n    _this18._rangeInput = _rangeInput;\n    _this18._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    _this18._injector = _injector;\n    _this18._parentForm = _parentForm;\n    _this18._parentFormGroup = _parentFormGroup;\n\n    _this18._outsideValueChanged =\n    /**\n    * @return {?}\n    */\n    function () {\n      // Whenever the value changes outside the input we need to revalidate, because\n      // the validation state of each of the inputs depends on the other one.\n      _this18._validatorOnChange();\n    };\n\n    return _this18;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatDateRangeInputPartBase, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n      // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n      // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n      // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n      // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n      // everything has been resolved.\n\n      /** @type {?} */\n      var ngControl = this._injector.get(NgControl, null, InjectFlags.Self);\n\n      if (ngControl) {\n        this.ngControl = ngControl;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      }\n    }\n    /**\n     * Gets whether the input is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._elementRef.nativeElement.value.length === 0;\n    }\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Handles `input` events on the input element.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput(value) {\n      _get(_getPrototypeOf(MatDateRangeInputPartBase.prototype), \"_onInput\", this).call(this, value);\n\n      this._rangeInput._handleChildValueChange();\n    }\n    /**\n     * Opens the datepicker associated with the input.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openPopup\",\n    value: function _openPopup() {\n      this._rangeInput._openDatepicker();\n    }\n    /**\n     * Gets the minimum date from the range input.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMinDate\",\n    value: function _getMinDate() {\n      return this._rangeInput.min;\n    }\n    /**\n     * Gets the maximum date from the range input.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getMaxDate\",\n    value: function _getMaxDate() {\n      return this._rangeInput.max;\n    }\n    /**\n     * Gets the date filter function from the range input.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDateFilter\",\n    value: function _getDateFilter() {\n      return this._rangeInput.dateFilter;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_parentDisabled\",\n    value: function _parentDisabled() {\n      return this._rangeInput._groupDisabled;\n    }\n    /**\n     * @param {?} model\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerModel\",\n    value: function _registerModel(model) {\n      var _this19 = this;\n\n      // The very first time the range inputs write their values, they don't know about the value\n      // of the opposite input. When this is combined with the fact that `NgModel` defers writing\n      // its value with a `Promise.resolve`, we can get into a situation where the first input\n      // resets the value of the second. We work around it by deferring the registration of\n      // the model, allowing the input enough time to assign the initial value.\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _get(_getPrototypeOf(MatDateRangeInputPartBase.prototype), \"_registerModel\", _this19).call(_this19, model);\n      });\n    }\n  }]);\n\n  return MatDateRangeInputPartBase;\n}(MatDatepickerInputBase);\n\nMatDateRangeInputPartBase.ɵfac = function MatDateRangeInputPartBase_Factory(t) {\n  return new (t || MatDateRangeInputPartBase)(ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_INPUT_PARENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8));\n};\n\nMatDateRangeInputPartBase.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatDateRangeInputPartBase,\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatDateRangeInputPartBase.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DATE_RANGE_INPUT_PARENT]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDateRangeInputPartBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DATE_RANGE_INPUT_PARENT]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc10.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc10.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n  MatDateRangeInputPartBase.prototype.ngControl;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatDateRangeInputPartBase.prototype._validator;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatDateRangeInputPartBase.prototype._outsideValueChanged;\n  /** @type {?} */\n\n  MatDateRangeInputPartBase.prototype._rangeInput;\n  /** @type {?} */\n\n  MatDateRangeInputPartBase.prototype._defaultErrorStateMatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInputPartBase.prototype._injector;\n  /** @type {?} */\n\n  MatDateRangeInputPartBase.prototype._parentForm;\n  /** @type {?} */\n\n  MatDateRangeInputPartBase.prototype._parentFormGroup;\n  /**\n   * \\@docs-private\n   * @abstract\n   * @return {?}\n   */\n\n  MatDateRangeInputPartBase.prototype.updateErrorState = function () {};\n  /**\n   * @abstract\n   * @protected\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  MatDateRangeInputPartBase.prototype._assignValueToModel = function (value) {};\n  /**\n   * @abstract\n   * @protected\n   * @param {?} modelValue\n   * @return {?}\n   */\n\n\n  MatDateRangeInputPartBase.prototype._getValueFromModel = function (modelValue) {};\n}\n/** @type {?} */\n\n\nvar _MatDateRangeInputBase = // Needs to be `as any`, because the base class is abstract.\nmixinErrorState(\n/** @type {?} */\nMatDateRangeInputPartBase);\n/**\n * Input for entering the start date in a `mat-date-range-input`.\n * @template D\n */\n\n\nvar MatStartDate = /*#__PURE__*/function (_MatDateRangeInputBas) {\n  _inherits(MatStartDate, _MatDateRangeInputBas);\n\n  var _super7 = _createSuper(MatStartDate);\n\n  /**\n   * @param {?} rangeInput\n   * @param {?} elementRef\n   * @param {?} defaultErrorStateMatcher\n   * @param {?} injector\n   * @param {?} parentForm\n   * @param {?} parentFormGroup\n   * @param {?} dateAdapter\n   * @param {?} dateFormats\n   */\n  function MatStartDate(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats) {\n    var _thisSuper2, _this20;\n\n    _classCallCheck(this, MatStartDate);\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    _this20 = _super7.call(this, rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats);\n    /**\n     * Validator that checks that the start date isn't after the end date.\n     */\n\n    _this20._startValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    function (control) {\n      /** @type {?} */\n      var start = _this20._getValidDateOrNull(_this20._dateAdapter.deserialize(control.value));\n      /** @type {?} */\n\n\n      var end = _this20._model ? _this20._model.selection.end : null;\n      return !start || !end || _this20._dateAdapter.compareDate(start, end) <= 0 ? null : {\n        'matStartDateInvalid': {\n          'end': end,\n          'actual': start\n        }\n      };\n    };\n\n    _this20._validator = Validators.compose([].concat(_toConsumableArray(_get((_thisSuper2 = _assertThisInitialized(_this20), _getPrototypeOf(MatStartDate.prototype)), \"_getValidators\", _thisSuper2).call(_thisSuper2)), [_this20._startValidator]));\n    return _this20;\n  }\n  /**\n   * @protected\n   * @param {?} modelValue\n   * @return {?}\n   */\n\n\n  _createClass(MatStartDate, [{\n    key: \"_getValueFromModel\",\n    value: function _getValueFromModel(modelValue) {\n      return modelValue.start;\n    }\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_assignValueToModel\",\n    value: function _assignValueToModel(value) {\n      if (this._model) {\n        /** @type {?} */\n        var range = new DateRange(value, this._model.selection.end);\n\n        this._model.updateSelection(range, this);\n      }\n    }\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_formatValue\",\n    value: function _formatValue(value) {\n      _get(_getPrototypeOf(MatStartDate.prototype), \"_formatValue\", this).call(this, value); // Any time the input value is reformatted we need to tell the parent.\n\n\n      this._rangeInput._handleChildValueChange();\n    }\n    /**\n     * Gets the value that should be used when mirroring the input's size.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMirrorValue\",\n    value: function getMirrorValue() {\n      /** @type {?} */\n      var element = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var value = element.value;\n      return value.length > 0 ? value : element.placeholder;\n    }\n  }]);\n\n  return MatStartDate;\n}(_MatDateRangeInputBase);\n\nMatStartDate.ɵfac = function MatStartDate_Factory(t) {\n  return new (t || MatStartDate)(ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_INPUT_PARENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8));\n};\n\nMatStartDate.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatStartDate,\n  selectors: [[\"input\", \"matStartDate\", \"\"]],\n  hostAttrs: [\"type\", \"text\", 1, \"mat-date-range-input-inner\"],\n  hostVars: 8,\n  hostBindings: function MatStartDate_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function MatStartDate_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      })(\"change\", function MatStartDate_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"keydown\", function MatStartDate_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      })(\"blur\", function MatStartDate_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"id\", ctx._rangeInput.id)(\"aria-labelledby\", ctx._rangeInput._ariaLabelledBy)(\"aria-describedby\", ctx._rangeInput._ariaDescribedBy)(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", (ctx._rangeInput.rangePicker == null ? null : ctx._rangeInput.rangePicker.opened) && ctx._rangeInput.rangePicker.id || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: MatStartDate,\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: MatStartDate,\n    multi: true\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatStartDate.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DATE_RANGE_INPUT_PARENT]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatStartDate, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matStartDate]',\n      host: {\n        'class': 'mat-date-range-input-inner',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(keydown)': '_onKeydown($event)',\n        '[attr.id]': '_rangeInput.id',\n        '[attr.aria-labelledby]': '_rangeInput._ariaLabelledBy',\n        '[attr.aria-describedby]': '_rangeInput._ariaDescribedBy',\n        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n        '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n        '(blur)': '_onBlur()',\n        'type': 'text'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatStartDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatStartDate,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DATE_RANGE_INPUT_PARENT]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc10.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc10.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  MatStartDate.ngAcceptInputType_disabled;\n  /**\n   * Validator that checks that the start date isn't after the end date.\n   * @type {?}\n   * @private\n   */\n\n  MatStartDate.prototype._startValidator;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatStartDate.prototype._validator;\n}\n/**\n * Input for entering the end date in a `mat-date-range-input`.\n * @template D\n */\n\n\nvar MatEndDate = /*#__PURE__*/function (_MatDateRangeInputBas2) {\n  _inherits(MatEndDate, _MatDateRangeInputBas2);\n\n  var _super8 = _createSuper(MatEndDate);\n\n  /**\n   * @param {?} rangeInput\n   * @param {?} elementRef\n   * @param {?} defaultErrorStateMatcher\n   * @param {?} injector\n   * @param {?} parentForm\n   * @param {?} parentFormGroup\n   * @param {?} dateAdapter\n   * @param {?} dateFormats\n   */\n  function MatEndDate(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats) {\n    var _thisSuper3, _this21;\n\n    _classCallCheck(this, MatEndDate);\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    _this21 = _super8.call(this, rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup, dateAdapter, dateFormats);\n    /**\n     * Validator that checks that the end date isn't before the start date.\n     */\n\n    _this21._endValidator =\n    /**\n    * @param {?} control\n    * @return {?}\n    */\n    function (control) {\n      /** @type {?} */\n      var end = _this21._getValidDateOrNull(_this21._dateAdapter.deserialize(control.value));\n      /** @type {?} */\n\n\n      var start = _this21._model ? _this21._model.selection.start : null;\n      return !end || !start || _this21._dateAdapter.compareDate(end, start) >= 0 ? null : {\n        'matEndDateInvalid': {\n          'start': start,\n          'actual': end\n        }\n      };\n    };\n\n    _this21._validator = Validators.compose([].concat(_toConsumableArray(_get((_thisSuper3 = _assertThisInitialized(_this21), _getPrototypeOf(MatEndDate.prototype)), \"_getValidators\", _thisSuper3).call(_thisSuper3)), [_this21._endValidator]));\n    return _this21;\n  }\n  /**\n   * @protected\n   * @param {?} modelValue\n   * @return {?}\n   */\n\n\n  _createClass(MatEndDate, [{\n    key: \"_getValueFromModel\",\n    value: function _getValueFromModel(modelValue) {\n      return modelValue.end;\n    }\n    /**\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_assignValueToModel\",\n    value: function _assignValueToModel(value) {\n      if (this._model) {\n        /** @type {?} */\n        var range = new DateRange(this._model.selection.start, value);\n\n        this._model.updateSelection(range, this);\n      }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onKeydown\",\n    value: function _onKeydown(event) {\n      // If the user is pressing backspace on an empty end input, focus focus back to the start.\n      if (event.keyCode === BACKSPACE && !this._elementRef.nativeElement.value) {\n        this._rangeInput._startInput.focus();\n      }\n\n      _get(_getPrototypeOf(MatEndDate.prototype), \"_onKeydown\", this).call(this, event);\n    }\n  }]);\n\n  return MatEndDate;\n}(_MatDateRangeInputBase);\n\nMatEndDate.ɵfac = function MatEndDate_Factory(t) {\n  return new (t || MatEndDate)(ɵngcc0.ɵɵdirectiveInject(MAT_DATE_RANGE_INPUT_PARENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(MAT_DATE_FORMATS, 8));\n};\n\nMatEndDate.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatEndDate,\n  selectors: [[\"input\", \"matEndDate\", \"\"]],\n  hostAttrs: [\"type\", \"text\", 1, \"mat-date-range-input-inner\"],\n  hostVars: 7,\n  hostBindings: function MatEndDate_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function MatEndDate_input_HostBindingHandler($event) {\n        return ctx._onInput($event.target.value);\n      })(\"change\", function MatEndDate_change_HostBindingHandler() {\n        return ctx._onChange();\n      })(\"keydown\", function MatEndDate_keydown_HostBindingHandler($event) {\n        return ctx._onKeydown($event);\n      })(\"blur\", function MatEndDate_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._rangeInput._ariaLabelledBy)(\"aria-describedby\", ctx._rangeInput._ariaDescribedBy)(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", (ctx._rangeInput.rangePicker == null ? null : ctx._rangeInput.rangePicker.opened) && ctx._rangeInput.rangePicker.id || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: MatEndDate,\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: MatEndDate,\n    multi: true\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatEndDate.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_DATE_RANGE_INPUT_PARENT]\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: Injector\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_FORMATS]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatEndDate, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matEndDate]',\n      host: {\n        'class': 'mat-date-range-input-inner',\n        '[disabled]': 'disabled',\n        '(input)': '_onInput($event.target.value)',\n        '(change)': '_onChange()',\n        '(keydown)': '_onKeydown($event)',\n        '[attr.aria-labelledby]': '_rangeInput._ariaLabelledBy',\n        '[attr.aria-describedby]': '_rangeInput._ariaDescribedBy',\n        '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n        '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n        '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n        '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n        '(blur)': '_onBlur()',\n        'type': 'text'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatEndDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatEndDate,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_DATE_RANGE_INPUT_PARENT]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc10.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc10.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_FORMATS]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  MatEndDate.ngAcceptInputType_disabled;\n  /**\n   * Validator that checks that the end date isn't before the start date.\n   * @type {?}\n   * @private\n   */\n\n  MatEndDate.prototype._endValidator;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatEndDate.prototype._validator;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/date-range-picker.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n\n/**\n * Component responsible for managing the date range picker popup/dialog.\n * @template D\n */\n\n\nvar MatDateRangePicker = /*#__PURE__*/function (_MatDatepickerBase2) {\n  _inherits(MatDateRangePicker, _MatDatepickerBase2);\n\n  var _super9 = _createSuper(MatDateRangePicker);\n\n  function MatDateRangePicker() {\n    _classCallCheck(this, MatDateRangePicker);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(MatDateRangePicker, [{\n    key: \"_forwardContentValues\",\n\n    /**\n     * @protected\n     * @param {?} instance\n     * @return {?}\n     */\n    value: function _forwardContentValues(instance) {\n      _get(_getPrototypeOf(MatDateRangePicker.prototype), \"_forwardContentValues\", this).call(this, instance);\n      /** @type {?} */\n\n\n      var input = this._datepickerInput;\n\n      if (input) {\n        instance.comparisonStart = input.comparisonStart;\n        instance.comparisonEnd = input.comparisonEnd;\n      }\n    }\n  }]);\n\n  return MatDateRangePicker;\n}(MatDatepickerBase);\n\nMatDateRangePicker.ɵfac = function MatDateRangePicker_Factory(t) {\n  return ɵMatDateRangePicker_BaseFactory(t || MatDateRangePicker);\n};\n\nMatDateRangePicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDateRangePicker,\n  selectors: [[\"mat-date-range-picker\"]],\n  exportAs: [\"matDateRangePicker\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 0,\n  vars: 0,\n  template: function MatDateRangePicker_Template(rf, ctx) {},\n  encapsulation: 2,\n  changeDetection: 0\n});\nvar ɵMatDateRangePicker_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatDateRangePicker);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDateRangePicker, [{\n    type: Component,\n    args: [{\n      selector: 'mat-date-range-picker',\n      template: '',\n      exportAs: 'matDateRangePicker',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/date-range-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * @template D\n */\n\nvar MatDateRangeInput = /*#__PURE__*/function () {\n  /**\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} control\n   * @param {?} _dateAdapter\n   * @param {?=} _formField\n   */\n  function MatDateRangeInput(_changeDetectorRef, _elementRef, control, _dateAdapter, _formField) {\n    _classCallCheck(this, MatDateRangeInput);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dateAdapter = _dateAdapter;\n    this._formField = _formField;\n    /**\n     * Emits when the input's state has changed.\n     */\n\n    this.stateChanges = new Subject();\n    /**\n     * Unique ID for the input.\n     */\n\n    this.id = \"mat-date-range-input-\".concat(nextUniqueId++);\n    /**\n     * Whether the control is focused.\n     */\n\n    this.focused = false;\n    /**\n     * Name of the form control.\n     */\n\n    this.controlType = 'mat-date-range-input';\n    this._groupDisabled = false;\n    /**\n     * Value for the `aria-describedby` attribute of the inputs.\n     */\n\n    this._ariaDescribedBy = null;\n    /**\n     * Value for the `aria-labelledby` attribute of the inputs.\n     */\n\n    this._ariaLabelledBy = null;\n    /**\n     * Separator text to be shown between the inputs.\n     */\n\n    this.separator = '–';\n    /**\n     * Start of the comparison range that should be shown in the calendar.\n     */\n\n    this.comparisonStart = null;\n    /**\n     * End of the comparison range that should be shown in the calendar.\n     */\n\n    this.comparisonEnd = null;\n    /**\n     * Emits when the input's disabled state changes.\n     */\n\n    this._disabledChange = new Subject();\n\n    if (!_dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    } // TODO(crisbeto): remove `as any` after #18206 lands.\n\n\n    this.ngControl =\n    /** @type {?} */\n    control;\n    this._ariaLabelledBy = _formField ? _formField._labelId : null;\n  }\n  /**\n   * Current value of the range input.\n   * @return {?}\n   */\n\n\n  _createClass(MatDateRangeInput, [{\n    key: \"setDescribedByIds\",\n\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      if (!this.focused && !this.disabled) {\n        if (!this._model || !this._model.selection.start) {\n          this._startInput.focus();\n        } else {\n          this._endInput.focus();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this22 = this;\n\n      if (!this._startInput) {\n        throw Error('mat-date-range-input must contain a matStartDate input');\n      }\n\n      if (!this._endInput) {\n        throw Error('mat-date-range-input must contain a matEndDate input');\n      }\n\n      if (this._model) {\n        this._registerModel(this._model);\n      } // We don't need to unsubscribe from this, because we\n      // know that the input streams will be completed on destroy.\n\n\n      merge(this._startInput._disabledChange, this._endInput._disabledChange).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this22._disabledChange.next(_this22.disabled);\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.stateChanges.complete();\n\n      this._disabledChange.unsubscribe();\n    }\n    /**\n     * Gets the date at which the calendar should start.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getStartValue\",\n    value: function getStartValue() {\n      return this.value ? this.value.start : null;\n    }\n    /**\n     * Gets the input's theme palette.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getThemePalette\",\n    value: function getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /**\n     * Gets the element to which the calendar overlay should be attached.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getConnectedOverlayOrigin\",\n    value: function getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /**\n     * Gets the value that is used to mirror the state input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getInputMirrorValue\",\n    value: function _getInputMirrorValue() {\n      return this._startInput ? this._startInput.getMirrorValue() : '';\n    }\n    /**\n     * Whether the input placeholders should be hidden.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_shouldHidePlaceholders\",\n    value: function _shouldHidePlaceholders() {\n      return this._startInput ? !this._startInput.isEmpty() : false;\n    }\n    /**\n     * Handles the value in one of the child inputs changing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleChildValueChange\",\n    value: function _handleChildValueChange() {\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Opens the date range picker associated with the input.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_openDatepicker\",\n    value: function _openDatepicker() {\n      if (this._rangePicker) {\n        this._rangePicker.open();\n      }\n    }\n    /**\n     * @private\n     * @param {?} obj The object to check.\n     * @return {?} The given object if it is both a date instance and valid, otherwise null.\n     */\n\n  }, {\n    key: \"_getValidDateOrNull\",\n    value: function _getValidDateOrNull(obj) {\n      return this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj) ? obj : null;\n    }\n    /**\n     * Re-runs the validators on the start/end inputs.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_revalidate\",\n    value: function _revalidate() {\n      if (this._startInput) {\n        this._startInput._validatorOnChange();\n      }\n\n      if (this._endInput) {\n        this._endInput._validatorOnChange();\n      }\n    }\n    /**\n     * Registers the current date selection model with the start/end inputs.\n     * @private\n     * @param {?} model\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerModel\",\n    value: function _registerModel(model) {\n      if (this._startInput) {\n        this._startInput._registerModel(model);\n      }\n\n      if (this._endInput) {\n        this._endInput._registerModel(model);\n      }\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._model ? this._model.selection : null;\n    }\n    /**\n     * Whether the control's label should float.\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return this.focused || !this.empty;\n    }\n    /**\n     * The range picker that this input is associated with.\n     * @return {?}\n     */\n\n  }, {\n    key: \"rangePicker\",\n    get: function get() {\n      return this._rangePicker;\n    }\n    /**\n     * @param {?} rangePicker\n     * @return {?}\n     */\n    ,\n    set: function set(rangePicker) {\n      if (rangePicker) {\n        this._model = rangePicker._registerInput(this);\n        this._rangePicker = rangePicker;\n\n        this._registerModel(\n        /** @type {?} */\n        this._model);\n      }\n    }\n    /**\n     * Whether the input is required.\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return !!this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Function that can be used to filter out dates within the date range picker.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dateFilter\",\n    get: function get() {\n      return this._dateFilter;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._dateFilter = value;\n\n      this._revalidate();\n    }\n    /**\n     * The minimum valid date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._min;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n      this._revalidate();\n    }\n    /**\n     * The maximum valid date.\n     * @return {?}\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._max;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n      this._revalidate();\n    }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._startInput && this._endInput ? this._startInput.disabled && this._endInput.disabled : this._groupDisabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._groupDisabled) {\n        this._groupDisabled = newValue;\n\n        this._disabledChange.next(this.disabled);\n      }\n    }\n    /**\n     * Whether the input is in an error state.\n     * @return {?}\n     */\n\n  }, {\n    key: \"errorState\",\n    get: function get() {\n      if (this._startInput && this._endInput) {\n        return this._startInput.errorState || this._endInput.errorState;\n      }\n\n      return false;\n    }\n    /**\n     * Whether the datepicker input is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      /** @type {?} */\n      var startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n      /** @type {?} */\n\n      var endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n      return startEmpty && endEmpty;\n    }\n  }]);\n\n  return MatDateRangeInput;\n}();\n\nMatDateRangeInput.ɵfac = function MatDateRangeInput_Factory(t) {\n  return new (t || MatDateRangeInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.ControlContainer, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DateAdapter, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.MatFormField, 8));\n};\n\nMatDateRangeInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDateRangeInput,\n  selectors: [[\"mat-date-range-input\"]],\n  contentQueries: function MatDateRangeInput_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatStartDate, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatEndDate, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._startInput = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._endInput = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-date-range-input\"],\n  hostVars: 3,\n  hostBindings: function MatDateRangeInput_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-date-range-input-hide-placeholders\", ctx._shouldHidePlaceholders());\n    }\n  },\n  inputs: {\n    separator: \"separator\",\n    comparisonStart: \"comparisonStart\",\n    comparisonEnd: \"comparisonEnd\",\n    rangePicker: \"rangePicker\",\n    required: \"required\",\n    dateFilter: \"dateFilter\",\n    min: \"min\",\n    max: \"max\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matDateRangeInput\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatDateRangeInput\n  }, {\n    provide: MAT_DATE_RANGE_INPUT_PARENT,\n    useExisting: MatDateRangeInput\n  }])],\n  ngContentSelectors: _c6,\n  decls: 9,\n  vars: 2,\n  consts: [[\"cdkMonitorSubtreeFocus\", \"\", 1, \"mat-date-range-input-container\", 3, \"cdkFocusChange\"], [1, \"mat-date-range-input-start-wrapper\"], [\"aria-hidden\", \"true\", 1, \"mat-date-range-input-mirror\"], [1, \"mat-date-range-input-separator\"], [1, \"mat-date-range-input-end-wrapper\"]],\n  template: function MatDateRangeInput_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c5);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"cdkFocusChange\", function MatDateRangeInput_Template_div_cdkFocusChange_0_listener($event) {\n        return ctx.focused = $event !== null;\n      });\n      ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementStart(3, \"span\", 2);\n      ɵngcc0.ɵɵtext(4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"span\", 3);\n      ɵngcc0.ɵɵtext(6);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 4);\n      ɵngcc0.ɵɵprojection(8, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵtextInterpolate(ctx._getInputMirrorValue());\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.separator);\n    }\n  },\n  directives: [ɵngcc5.CdkMonitorFocus],\n  styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{margin:0 4px;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-separator{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent;transition:none}.mat-date-range-input-inner{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.mat-date-range-input-inner::-ms-clear,.mat-date-range-input-inner::-ms-reveal{display:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-start-wrapper .mat-date-range-input-inner{position:absolute;top:0;left:0}.mat-date-range-input-end-wrapper{flex-grow:1;max-width:calc(50% - 4px)}.mat-form-field-type-mat-date-range-input .mat-form-field-infix{width:200px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatDateRangeInput.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: ControlContainer,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }, {\n    type: DateAdapter,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatFormField,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatDateRangeInput.propDecorators = {\n  rangePicker: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  dateFilter: [{\n    type: Input\n  }],\n  min: [{\n    type: Input\n  }],\n  max: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  separator: [{\n    type: Input\n  }],\n  comparisonStart: [{\n    type: Input\n  }],\n  comparisonEnd: [{\n    type: Input\n  }],\n  _startInput: [{\n    type: ContentChild,\n    args: [MatStartDate]\n  }],\n  _endInput: [{\n    type: ContentChild,\n    args: [MatEndDate]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDateRangeInput, [{\n    type: Component,\n    args: [{\n      selector: 'mat-date-range-input',\n      template: \"<div\\n  class=\\\"mat-date-range-input-container\\\"\\n  cdkMonitorSubtreeFocus\\n  (cdkFocusChange)=\\\"focused = $event !== null\\\">\\n  <div class=\\\"mat-date-range-input-start-wrapper\\\">\\n    <ng-content select=\\\"input[matStartDate]\\\"></ng-content>\\n    <span\\n      class=\\\"mat-date-range-input-mirror\\\"\\n      aria-hidden=\\\"true\\\">{{_getInputMirrorValue()}}</span>\\n  </div>\\n\\n  <span class=\\\"mat-date-range-input-separator\\\">{{separator}}</span>\\n\\n  <div class=\\\"mat-date-range-input-end-wrapper\\\">\\n    <ng-content select=\\\"input[matEndDate]\\\"></ng-content>\\n  </div>\\n</div>\\n\\n\",\n      exportAs: 'matDateRangeInput',\n      host: {\n        'class': 'mat-date-range-input',\n        '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n        '[attr.id]': 'null'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatDateRangeInput\n      }, {\n        provide: MAT_DATE_RANGE_INPUT_PARENT,\n        useExisting: MatDateRangeInput\n      }],\n      styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{margin:0 4px;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-separator{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent;transition:none}.mat-date-range-input-inner{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.mat-date-range-input-inner::-ms-clear,.mat-date-range-input-inner::-ms-reveal{display:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-start-wrapper .mat-date-range-input-inner{position:absolute;top:0;left:0}.mat-date-range-input-end-wrapper{flex-grow:1;max-width:calc(50% - 4px)}.mat-form-field-type-mat-date-range-input .mat-form-field-infix{width:200px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc10.ControlContainer,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: ɵngcc2.DateAdapter,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc9.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    separator: [{\n      type: Input\n    }],\n    comparisonStart: [{\n      type: Input\n    }],\n    comparisonEnd: [{\n      type: Input\n    }],\n    rangePicker: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    dateFilter: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _startInput: [{\n      type: ContentChild,\n      args: [MatStartDate]\n    }],\n    _endInput: [{\n      type: ContentChild,\n      args: [MatEndDate]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDateRangeInput.ngAcceptInputType_required;\n  /** @type {?} */\n\n  MatDateRangeInput.ngAcceptInputType_disabled;\n  /**\n   * Emits when the input's state has changed.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.stateChanges;\n  /**\n   * Unique ID for the input.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.id;\n  /**\n   * Whether the control is focused.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.focused;\n  /**\n   * Name of the form control.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.controlType;\n  /**\n   * Implemented as a part of `MatFormFieldControl`, but not used.\n   * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.placeholder;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._rangePicker;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._required;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._dateFilter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._min;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._max;\n  /** @type {?} */\n\n  MatDateRangeInput.prototype._groupDisabled;\n  /**\n   * Value for the `aria-describedby` attribute of the inputs.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype._ariaDescribedBy;\n  /**\n   * Value for the `aria-labelledby` attribute of the inputs.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype._ariaLabelledBy;\n  /**\n   * Date selection model currently registered with the input.\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._model;\n  /**\n   * Separator text to be shown between the inputs.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.separator;\n  /**\n   * Start of the comparison range that should be shown in the calendar.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.comparisonStart;\n  /**\n   * End of the comparison range that should be shown in the calendar.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.comparisonEnd;\n  /** @type {?} */\n\n  MatDateRangeInput.prototype._startInput;\n  /** @type {?} */\n\n  MatDateRangeInput.prototype._endInput;\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype.ngControl;\n  /**\n   * Emits when the input's disabled state changes.\n   * @type {?}\n   */\n\n  MatDateRangeInput.prototype._disabledChange;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._dateAdapter;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDateRangeInput.prototype._formField;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/datepicker-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatDatepickerModule = function MatDatepickerModule() {\n  _classCallCheck(this, MatDatepickerModule);\n};\n\nMatDatepickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatDatepickerModule\n});\nMatDatepickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatDatepickerModule_Factory(t) {\n    return new (t || MatDatepickerModule)();\n  },\n  providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n    provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n    useClass: DefaultMatCalendarRangeStrategy\n  }],\n  imports: [[CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule], CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDatepickerModule, {\n    declarations: function declarations() {\n      return [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker];\n    },\n    imports: function imports() {\n      return [CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule];\n    },\n    exports: function exports() {\n      return [CdkScrollableModule, MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDatepickerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatButtonModule, MatDialogModule, OverlayModule, A11yModule, PortalModule],\n      exports: [CdkScrollableModule, MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker],\n      declarations: [MatCalendar, MatCalendarBody, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerToggle, MatDatepickerToggleIcon, MatMonthView, MatYearView, MatMultiYearView, MatCalendarHeader, MatDateRangeInput, MatStartDate, MatEndDate, MatDateRangePicker],\n      providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, {\n        provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n        useClass: DefaultMatCalendarRangeStrategy\n      }],\n      entryComponents: [MatDatepickerContent, MatCalendarHeader]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/datepicker/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow, MatDatepickerBase as ɵangular_material_src_material_datepicker_datepicker_a, MatDatepickerInputBase as ɵangular_material_src_material_datepicker_datepicker_b, MAT_DATE_RANGE_INPUT_PARENT as ɵangular_material_src_material_datepicker_datepicker_c };","map":{"version":3,"sources":["../../../../../material/datepicker/datepicker-errors.ts","../../../../../material/datepicker/datepicker-intl.ts","../../../../../material/datepicker/calendar-body.ts","../../../../../material/datepicker/date-selection-model.ts","../../../../../material/datepicker/date-range-selection-strategy.ts","../../../../../material/datepicker/month-view.ts","../../../../../material/datepicker/multi-year-view.ts","../../../../../material/datepicker/year-view.ts","../../../../../material/datepicker/calendar.ts","../../../../../material/datepicker/datepicker-animations.ts","../../../../../material/datepicker/datepicker-base.ts","../../../../../material/datepicker/datepicker.ts","../../../../../material/datepicker/datepicker-input-base.ts","../../../../../material/datepicker/datepicker-input.ts","../../../../../material/datepicker/datepicker-toggle.ts","../../../../../material/datepicker/date-range-input-parts.ts","../../../../../material/datepicker/date-range-picker.ts","../../../../../material/datepicker/date-range-input.ts","../../../../../material/datepicker/datepicker-module.ts","../../../../../material/datepicker/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n\n  /** Formats a range of years. */\n  formatYearRange(start: string, end: string): string {\n    return `${start} \\u2013 ${end}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell<D = any> {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses: MatCalendarCellCssClasses = {},\n              public compareValue = value,\n              public rawValue?: D) {}\n}\n\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\nexport interface MatCalendarUserEvent<D> {\n  value: D;\n  event: Event;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges, OnDestroy {\n  /**\n   * Used to skip the next focus event when rendering the preview range.\n   * We need a flag like this, because some browsers fire focus events asynchronously.\n   */\n  private _skipNextFocus: boolean;\n\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** Start value of the selected date range. */\n  @Input() startValue: number;\n\n  /** End value of the selected date range. */\n  @Input() endValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols: number = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell: number = 0;\n\n  /** Whether a range is being selected. */\n  @Input() isRange: boolean = false;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio: number = 1;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: number | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: number | null;\n\n  /** Start of the preview range. */\n  @Input() previewStart: number | null = null;\n\n  /** End of the preview range. */\n  @Input() previewEnd: number | null = null;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<MatCalendarUserEvent<number>> =\n      new EventEmitter<MatCalendarUserEvent<number>>();\n\n  /** Emits when the preview has changed as a result of a user action. */\n  @Output() previewChange = new EventEmitter<MatCalendarUserEvent<MatCalendarCell | null>>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\n    _ngZone.runOutsideAngular(() => {\n      const element = _elementRef.nativeElement;\n      element.addEventListener('mouseenter', this._enterHandler, true);\n      element.addEventListener('focus', this._enterHandler, true);\n      element.addEventListener('mouseleave', this._leaveHandler, true);\n      element.addEventListener('blur', this._leaveHandler, true);\n    });\n  }\n\n  /** Called when a cell is clicked. */\n  _cellClicked(cell: MatCalendarCell, event: MouseEvent): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit({value: cell.value, event});\n    }\n  }\n\n  /** Returns whether a cell should be marked as selected. */\n  _isSelected(cell: MatCalendarCell) {\n    return this.startValue === cell.compareValue || this.endValue === cell.compareValue;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mouseenter', this._enterHandler, true);\n    element.removeEventListener('focus', this._enterHandler, true);\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\n    element.removeEventListener('blur', this._leaveHandler, true);\n  }\n\n  /** Returns whether a cell is active. */\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview = true) {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          if (!movePreview) {\n            this._skipNextFocus = true;\n          }\n\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  /** Gets whether a value is the start of the main range. */\n  _isRangeStart(value: number) {\n    return isStart(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is the end of the main range. */\n  _isRangeEnd(value: number) {\n    return isEnd(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is within the currently-selected range. */\n  _isInRange(value: number): boolean {\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\n  }\n\n  /** Gets whether a value is the start of the comparison range. */\n  _isComparisonStart(value: number) {\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let previousCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\n\n    if (!previousCell) {\n      const previousRow = this.rows[rowIndex - 1];\n      previousCell = previousRow && previousRow[previousRow.length - 1];\n    }\n\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\n  }\n\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let nextCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\n\n    if (!nextCell) {\n      const nextRow = this.rows[rowIndex + 1];\n      nextCell = nextRow && nextRow[0];\n    }\n\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\n  }\n\n  /** Gets whether a value is the end of the comparison range. */\n  _isComparisonEnd(value: number) {\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Gets whether a value is within the current comparison range. */\n  _isInComparisonRange(value: number) {\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n  }\n\n  /** Gets whether a value is the start of the preview range. */\n  _isPreviewStart(value: number) {\n    return isStart(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is the end of the preview range. */\n  _isPreviewEnd(value: number) {\n    return isEnd(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is inside the preview range. */\n  _isInPreview(value: number) {\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n  }\n\n  /**\n   * Event handler for when the user enters an element\n   * inside the calendar body (e.g. by hovering in or focus).\n   */\n  private _enterHandler = (event: Event) => {\n    if (this._skipNextFocus && event.type === 'focus') {\n      this._skipNextFocus = false;\n      return;\n    }\n\n    // We only need to hit the zone when we're selecting a range.\n    if (event.target && this.isRange) {\n      const cell = this._getCellFromElement(event.target as HTMLElement);\n\n      if (cell) {\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\n      }\n    }\n  }\n\n  /**\n   * Event handler for when the user's pointer leaves an element\n   * inside the calendar body (e.g. by hovering out or blurring).\n   */\n  private _leaveHandler = (event: Event) => {\n    // We only need to hit the zone when we're selecting a range.\n    if (this.previewEnd !== null && this.isRange) {\n      // Only reset the preview end value when leaving cells. This looks better, because\n      // we have a gap between the cells and the rows and we don't want to remove the\n      // range just for it to show up again when the user moves a few pixels to the side.\n      if (event.target && isTableCell(event.target as HTMLElement)) {\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\n      }\n    }\n  }\n\n  /** Finds the MatCalendarCell that corresponds to a DOM node. */\n  private _getCellFromElement(element: HTMLElement): MatCalendarCell | null {\n    let cell: HTMLElement | undefined;\n\n    if (isTableCell(element)) {\n      cell = element;\n    } else if (isTableCell(element.parentNode!)) {\n      cell = element.parentNode as HTMLElement;\n    }\n\n    if (cell) {\n      const row = cell.getAttribute('data-mat-row');\n      const col = cell.getAttribute('data-mat-col');\n\n      if (row && col) {\n        return this.rows[parseInt(row)][parseInt(col)];\n      }\n    }\n\n    return null;\n  }\n\n}\n\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node: Node): node is HTMLTableCellElement {\n  return node.nodeName === 'TD';\n}\n\n/** Checks whether a value is the start of a range. */\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\n  return end !== null && start !== end && value < end && value === start;\n}\n\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\n  return start !== null && start !== end && value >= start && value === end;\n}\n\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value: number,\n                   start: number | null,\n                   end: number | null,\n                   rangeEnabled: boolean): boolean {\n  return rangeEnabled && start !== null && end !== null && start !== end &&\n         value >= start && value <= end;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FactoryProvider, Injectable, Optional, SkipSelf, OnDestroy, Directive} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** A class representing a range of dates. */\nexport class DateRange<D> {\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  private _disableStructuralEquivalency: never;\n\n  constructor(\n    /** The start date of the range. */\n    readonly start: D | null,\n    /** The end date of the range. */\n    readonly end: D | null) {}\n}\n\n/**\n * Conditionally picks the date type, if a DateRange is passed in.\n * @docs-private\n */\nexport type ExtractDateTypeFromSelection<T> = T extends DateRange<infer D> ? D : NonNullable<T>;\n\n/** Event emitted by the date selection model when its selection changes. */\nexport interface DateSelectionModelChange<S> {\n  /** New value for the selection. */\n  selection: S;\n\n  /** Object that triggered the change. */\n  source: unknown;\n}\n\n/** A selection model containing a date selection. */\n@Directive()\nexport abstract class MatDateSelectionModel<S, D = ExtractDateTypeFromSelection<S>>\n    implements OnDestroy {\n  private _selectionChanged = new Subject<DateSelectionModelChange<S>>();\n\n  /** Emits when the selection has changed. */\n  selectionChanged: Observable<DateSelectionModelChange<S>> = this._selectionChanged.asObservable();\n\n  protected constructor(\n    /** The current selection. */\n    readonly selection: S,\n    protected _adapter: DateAdapter<D>) {\n    this.selection = selection;\n  }\n\n  /**\n   * Updates the current selection in the model.\n   * @param value New selection that should be assigned.\n   * @param source Object that triggered the selection change.\n   */\n  updateSelection(value: S, source: unknown) {\n    (this as {selection: S}).selection = value;\n    this._selectionChanged.next({selection: value, source});\n  }\n\n  ngOnDestroy() {\n    this._selectionChanged.complete();\n  }\n\n  protected _isValidDateInstance(date: D): boolean {\n    return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n  }\n\n  /** Adds a date to the current selection. */\n  abstract add(date: D | null): void;\n\n  /** Checks whether the current selection is valid. */\n  abstract isValid(): boolean;\n\n  /** Checks whether the current selection is complete. */\n  abstract isComplete(): boolean;\n}\n\n/**  A selection model that contains a single date. */\n@Injectable()\nexport class MatSingleDateSelectionModel<D> extends MatDateSelectionModel<D | null, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(null, adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a single date selection, the added date\n   * simply overwrites the previous selection\n   */\n  add(date: D | null) {\n    super.updateSelection(date, this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    return this.selection != null && this._isValidDateInstance(this.selection);\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a single date selection, this\n   * is true if the current selection is not null.\n   */\n  isComplete() {\n    return this.selection != null;\n  }\n}\n\n/**  A selection model that contains a date range. */\n@Injectable()\nexport class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<DateRange<D>, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(new DateRange<D>(null, null), adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a date range selection, the added date\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\n   */\n  add(date: D | null): void {\n    let {start, end} = this.selection;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    super.updateSelection(new DateRange<D>(start, end), this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    const {start, end} = this.selection;\n\n    // Empty ranges are valid.\n    if (start == null && end == null) {\n      return true;\n    }\n\n    // Complete ranges are only valid if both dates are valid and the start is before the end.\n    if (start != null && end != null) {\n      return this._isValidDateInstance(start) && this._isValidDateInstance(end) &&\n             this._adapter.compareDate(start, end) <= 0;\n    }\n\n    // Partial ranges are valid if the start/end is valid.\n    return (start == null || this._isValidDateInstance(start)) &&\n           (end == null || this._isValidDateInstance(end));\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a date range selection, this\n   * is true if the current selection has a non-null `start` and `end`.\n   */\n  isComplete(): boolean {\n    return this.selection.start != null && this.selection.end != null;\n  }\n}\n\n/** @docs-private */\nexport function MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(\n    parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n\n/** Used to provide a single selection model to a component. */\nexport const MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n\n/** @docs-private */\nexport function MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(\n    parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n\n/** Used to provide a range selection model to a component. */\nexport const MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {DateRange} from './date-selection-model';\n\n/** Injection token used to customize the date range selection behavior. */\nexport const MAT_DATE_RANGE_SELECTION_STRATEGY =\n    new InjectionToken<MatDateRangeSelectionStrategy<any>>('MAT_DATE_RANGE_SELECTION_STRATEGY');\n\n/** Object that can be provided in order to customize the date range selection behavior. */\nexport interface MatDateRangeSelectionStrategy<D> {\n  /**\n   * Called when the user has finished selecting a value.\n   * @param date Date that was selected. Will be null if the user cleared the selection.\n   * @param currentRange Range that is currently show in the calendar.\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\n   *    event, but it may get expanded in the future.\n   */\n  selectionFinished(date: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n\n  /**\n   * Called when the user has activated a new date (e.g. by hovering over\n   * it or moving focus) and the calendar tries to display a date range.\n   *\n   * @param activeDate Date that the user has activated. Will be null if the user moved\n   *    focus to an element that's no a calendar cell.\n   * @param currentRange Range that is currently shown in the calendar.\n   * @param event DOM event that caused the preview to be changed. Will be either a\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\n   */\n  createPreview(activeDate: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n}\n\n/** Provides the default date range selection behavior. */\n@Injectable()\nexport class DefaultMatCalendarRangeStrategy<D> implements MatDateRangeSelectionStrategy<D> {\n  constructor(private _dateAdapter: DateAdapter<D>) {}\n\n  selectionFinished(date: D, currentRange: DateRange<D>) {\n    let {start, end} = currentRange;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n\n  createPreview(activeDate: D | null, currentRange: DateRange<D>) {\n    let start: D | null = null;\n    let end: D | null = null;\n\n    if (currentRange.start && !currentRange.end && activeDate) {\n      start = currentRange.start;\n      end = activeDate;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n  ESCAPE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarCellCssClasses,\n  MatCalendarUserEvent,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\nimport {\n  MatDateRangeSelectionStrategy,\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n} from './date-range-selection-strategy';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setRanges(this._selected);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /** Start value of the currently-shown date range. */\n  _rangeStart: number | null;\n\n  /** End value of the currently-shown date range. */\n  _rangeEnd: number | null;\n\n  /** Start value of the currently-shown comparison date range. */\n  _comparisonRangeStart: number | null;\n\n  /** End value of the currently-shown comparison date range. */\n  _comparisonRangeEnd: number | null;\n\n  /** Start of the preview range. */\n  _previewStart: number | null;\n\n  /** End of the preview range. */\n  _previewEnd: number | null;\n\n  /** Whether the user is currently selecting a range of dates. */\n  _isRange: boolean;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality,\n              @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY) @Optional()\n                  private _rangeStrategy?: MatDateRangeSelectionStrategy<D>) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(event: MatCalendarUserEvent<number>) {\n    const date = event.value;\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n    const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n    let rangeStartDate: number | null;\n    let rangeEndDate: number | null;\n\n    if (this._selected instanceof DateRange) {\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n    } else {\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n    }\n\n    if (rangeStartDate !== date || rangeEndDate !== date) {\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit({value: selectedDate, event: event.event});\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected({value: this._dateAdapter.getDate(this._activeDate), event});\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      case ESCAPE:\n        // Abort the current range selection if the user presses escape mid-selection.\n        if (this._previewEnd != null) {\n          this._previewStart = this._previewEnd = null;\n          this.selectedChange.emit(null);\n          this._userSelection.emit({value: null, event});\n          event.preventDefault();\n          event.stopPropagation(); // Prevents the overlay from closing.\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._setRanges(this.selected);\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview?: boolean) {\n    this._matCalendarBody._focusActiveCell(movePreview);\n  }\n\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\n  _previewChanged({event, value: cell}: MatCalendarUserEvent<MatCalendarCell<D> | null>) {\n    if (this._rangeStrategy) {\n      // We can assume that this will be a range, because preview\n      // events aren't fired for single date selections.\n      const value = cell ? cell.rawValue! : null;\n      const previewRange =\n          this._rangeStrategy.createPreview(value, this.selected as DateRange<D>, event);\n      this._previewStart = this._getCellCompareValue(previewRange.start);\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\n\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n      // when navigating one month back using the keyboard which will cause this handler\n      // to throw a \"changed after checked\" error when updating the preview state.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell<D>(i + 1, dateNames[i],\n          ariaLabel, enabled, cellClasses, this._getCellCompareValue(date)!, date));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n        (!this.dateFilter || this.dateFilter(date));\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /** Gets the value that will be used to one cell to another. */\n  private _getCellCompareValue(date: D | null): number | null {\n    if (date) {\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\n      // cell values, because we need to support ranges that span across multiple months/years.\n      const year = this._dateAdapter.getYear(date);\n      const month = this._dateAdapter.getMonth(date);\n      const day = this._dateAdapter.getDate(date);\n      return new Date(year, month, day).getTime();\n    }\n\n    return null;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the current range based on a model value. */\n  private _setRanges(selectedValue: DateRange<D> | D | null) {\n    if (selectedValue instanceof DateRange) {\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n      this._isRange = true;\n    } else {\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n      this._isRange = false;\n    }\n\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarUserEvent} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedYear(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(event: MatCalendarUserEvent<number>) {\n    const year = event.value;\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected({value: this._dateAdapter.getYear(this._activeDate), event});\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-highlighted year based on a model value. */\n  private _setSelectedYear(value: DateRange<D> | D | null) {\n    this._selectedYear = null;\n\n    if (value instanceof DateRange) {\n      const displayValue = value.start || value.end;\n\n      if (displayValue) {\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\n      }\n    } else if (value) {\n      this._selectedYear = this._dateAdapter.getYear(value);\n    }\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarUserEvent} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedMonth(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(event: MatCalendarUserEvent<number>) {\n    const month = event.value;\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected({value: this._dateAdapter.getMonth(this._activeDate), event});\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._setSelectedMonth(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-selected month based on a model value. */\n  private _setSelectedMonth(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\n                            this._getMonthInCurrentYear(value.end);\n    } else {\n      this._selectedMonth = this._getMonthInCurrentYear(value);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarCellCssClasses, MatCalendarUserEvent} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    const minYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n    const maxYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n    return this._intl.formatYearRange(minYearName, maxYearName);\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /**\n   * Emits when the currently selected date changes.\n   * @breaking-change 11.0.0 Emitted value to change to `D | null`.\n   */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell(false);\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    const currentView = this.currentView;\n    let view: MatMonthView<D> | MatYearView<D> | MatMultiYearView<D>;\n\n    if (currentView === 'month') {\n      view = this.monthView;\n    } else if (currentView === 'year') {\n      view = this.yearView;\n    } else {\n      view = this.multiYearView;\n    }\n\n    view._init();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(event: MatCalendarUserEvent<D | null>): void {\n    const date = event.value;\n\n    if (this.selected instanceof DateRange ||\n        (date && !this._dateAdapter.sameDate(date, this.selected))) {\n      // @breaking-change 11.0.0 remove non-null assertion\n      // once the `selectedChange` is allowed to be null.\n      this.selectedChange.emit(date!);\n    }\n\n    this._userSelection.emit(event);\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  FlexibleConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Observable} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatCalendarCellCssClasses, MatCalendarUserEvent} from './calendar-body';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {\n  ExtractDateTypeFromSelection,\n  MatDateSelectionModel,\n  DateRange,\n} from './date-selection-model';\nimport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  MatDateRangeSelectionStrategy,\n} from './date-range-selection-strategy';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Possible positions for the datepicker dropdown along the X axis. */\nexport type DatepickerDropdownPositionX = 'start' | 'end';\n\n/** Possible positions for the datepicker dropdown along the Y axis. */\nexport type DatepickerDropdownPositionY = 'above' | 'below';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '_animationState',\n    '(@transformPanel.done)': '_animationDone.next()',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>>\n  extends _MatDatepickerContentMixinBase implements AfterViewInit, OnDestroy, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepickerBase<any, S, D>;\n\n  /** Start of the comparison range. */\n  comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  comparisonEnd: D | null;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  /** Current state of the animation. */\n  _animationState: 'enter' | 'void' = 'enter';\n\n  /** Emits when an animation has finished. */\n  _animationDone = new Subject<void>();\n\n  constructor(\n    elementRef: ElementRef,\n    /**\n     * @deprecated `_changeDetectorRef`, `_model` and `_rangeSelectionStrategy`\n     * parameters to become required.\n     * @breaking-change 11.0.0\n     */\n    private _changeDetectorRef?: ChangeDetectorRef,\n    private _model?: MatDateSelectionModel<S, D>,\n    private _dateAdapter?: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY)\n        private _rangeSelectionStrategy?: MatDateRangeSelectionStrategy<D>) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n\n  ngOnDestroy() {\n    this._animationDone.complete();\n  }\n\n  _handleUserSelection(event: MatCalendarUserEvent<D | null>) {\n    // @breaking-change 11.0.0 Remove null checks for _model,\n    // _rangeSelectionStrategy and _dateAdapter.\n    if (this._model && this._dateAdapter) {\n      const selection = this._model.selection;\n      const value = event.value;\n      const isRange = selection instanceof DateRange;\n\n      // If we're selecting a range and we have a selection strategy, always pass the value through\n      // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n      // A null value when picking a range means that the user cancelled the selection (e.g. by\n      // pressing escape), whereas when selecting a single value it means that the value didn't\n      // change. This isn't very intuitive, but it's here for backwards-compatibility.\n      if (isRange && this._rangeSelectionStrategy) {\n        const newSelection = this._rangeSelectionStrategy.selectionFinished(value,\n            selection as unknown as DateRange<D>, event.event);\n        this._model.updateSelection(newSelection as unknown as S, this);\n      } else if (value && (isRange ||\n                !this._dateAdapter.sameDate(value, selection as unknown as D))) {\n        this._model.add(value);\n      }\n    }\n\n    if (!this._model || this._model.isComplete()) {\n      this.datepicker.close();\n    }\n  }\n\n  _startExitAnimation() {\n    this._animationState = 'void';\n\n    // @breaking-change 11.0.0 Remove null check for `_changeDetectorRef`.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _getSelected() {\n    // @breaking-change 11.0.0 Remove null check for `_model`.\n    return this._model ? this._model.selection as unknown as D | DateRange<D> | null : null;\n  }\n}\n\n/** Form control that can be associated with a datepicker. */\nexport interface MatDatepickerControl<D> {\n  getStartValue(): D | null;\n  getThemePalette(): ThemePalette;\n  min: D | null;\n  max: D | null;\n  disabled: boolean;\n  dateFilter: DateFilterFn<D>;\n  getConnectedOverlayOrigin(): ElementRef;\n  _disabledChange: Observable<boolean>;\n}\n\n/** Base class for a datepicker. */\n@Directive()\nexport abstract class MatDatepickerBase<C extends MatDatepickerControl<D>, S,\n  D = ExtractDateTypeFromSelection<S>> implements OnDestroy, CanColor, OnChanges {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.getStartValue() : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput.getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Preferred position of the datepicker in the X axis. */\n  @Input()\n  xPosition: DatepickerDropdownPositionX = 'start';\n\n  /** Preferred position of the datepicker in the Y axis. */\n  @Input()\n  yPosition: DatepickerDropdownPositionY = 'below';\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): DateFilterFn<D> {\n    return this._datepickerInput && this._datepickerInput.dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef | null;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<S, D>> | null;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<S, D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: C;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              private _model: MatDateSelectionModel<S, D>) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const positionChange = changes['xPosition'] || changes['yPosition'];\n\n    if (positionChange && !positionChange.firstChange && this._popupRef) {\n      this._setConnectedPositions(\n          this._popupRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n\n      if (this.opened) {\n        this._popupRef.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyPopup();\n    this.close();\n    this._disabledChange.complete();\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    this._model.add(date);\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   * @returns Selection model that the input should hook itself up to.\n   */\n  _registerInput(input: C): MatDateSelectionModel<S, D> {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    return this._model;\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupComponentRef && this._popupRef) {\n      const instance = this._popupComponentRef.instance;\n      instance._startExitAnimation();\n      instance._animationDone.pipe(take(1)).subscribe(() => this._destroyPopup());\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<S, D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n\n      // These values are all the same as the defaults, but we set them explicitly so that the\n      // datepicker dialog behaves consistently even if the user changed the defaults.\n      hasBackdrop: true,\n      disableClose: false,\n      width: '',\n      height: '',\n      minWidth: '',\n      minHeight: '',\n      maxWidth: '80vw',\n      maxHeight: '',\n      position: {},\n      autoFocus: true,\n\n      // `MatDialog` has focus restoration built in, however we want to disable it since the\n      // datepicker also has focus restoration for dropdown mode. We want to do this, in order\n      // to ensure that the timing is consistent between dropdown and dialog modes since `MatDialog`\n      // restores focus when the animation is finished, but the datepicker does it immediately.\n      // Furthermore, this avoids any conflicts where the datepicker consumer might move focus\n      // inside the `closed` event which is dispatched immediately.\n      restoreFocus: false\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._forwardContentValues(this._dialogRef.componentInstance);\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    const portal = new ComponentPortal<MatDatepickerContent<S, D>>(MatDatepickerContent,\n                                                                   this._viewContainerRef);\n\n    this._destroyPopup();\n    this._createPopup();\n    this._popupComponentRef = this._popupRef!.attach(portal);\n    this._forwardContentValues(this._popupComponentRef.instance);\n\n    // Update the position once the calendar has rendered.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      this._popupRef!.updatePosition();\n    });\n  }\n\n  /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n  protected _forwardContentValues(instance: MatDatepickerContent<S, D>) {\n    instance.datepicker = this;\n    instance.color = this.color;\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition();\n\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._setConnectedPositions(positionStrategy),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Destroys the current popup overlay. */\n  private _destroyPopup() {\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupRef = this._popupComponentRef = null;\n    }\n  }\n\n  /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n  private _setConnectedPositions(strategy: FlexibleConnectedPositionStrategy) {\n    const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n    const secondaryX = primaryX === 'start' ? 'end' : 'start';\n    const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n    const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n\n    return strategy.withPositions([\n      {\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY\n      },\n      {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY\n      },\n      {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY\n      },\n      {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY\n      }\n    ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_touchUi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase} from './datepicker-base';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER} from './date-selection-model';\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatDatepicker<D> extends MatDatepickerBase<MatDatepickerInput<D>, D | null, D> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {ExtractDateTypeFromSelection, MatDateSelectionModel} from './date-selection-model';\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D, S = unknown> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n      /** Reference to the datepicker input component that emitted the event. */\n      public target: MatDatepickerInputBase<S, D>,\n      /** Reference to the native input element associated with the datepicker input. */\n      public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n/** Function that can be used to filter out dates from a calendar. */\nexport type DateFilterFn<D> = (date: D | null) => boolean;\n\n/** Base class for datepicker inputs. */\n@Directive()\nexport abstract class MatDatepickerInputBase<S, D = ExtractDateTypeFromSelection<S>>\n  implements ControlValueAccessor, AfterViewInit, OnDestroy, Validator {\n\n  /** Whether the component has been initialized. */\n  private _isInitialized: boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._assignValue(value);\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  protected _model: MatDateSelectionModel<S, D> | undefined;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled || this._parentDisabled(); }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n    // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n    // element has been inserted.\n    if (newValue && this._isInitialized && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D, S>> =\n      new EventEmitter<MatDatepickerInputEvent<D, S>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D, S>> =\n      new EventEmitter<MatDatepickerInputEvent<D, S>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n  _validatorOnChange = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n  private _valueChangesSubscription = Subscription.EMPTY;\n  private _localeSubscription = Subscription.EMPTY;\n\n  /**\n   * Since the value is kept on the model which is assigned in an Input,\n   * we might get a value before we have a model. This property keeps track\n   * of the value until we have somewhere to assign it.\n   */\n  private _pendingValue: D | null;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const dateFilter = this._getDateFilter();\n    return !dateFilter || !controlValue || dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const min = this._getMinDate();\n    return (!min || !controlValue ||\n        this._dateAdapter.compareDate(min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const max = this._getMaxDate();\n    return (!max || !controlValue ||\n        this._dateAdapter.compareDate(max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': max, 'actual': controlValue}};\n  }\n\n  /** Gets the base validator functions. */\n  protected _getValidators(): ValidatorFn[] {\n    return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n  }\n\n  /** Gets the minimum date for the input. Used for validation. */\n  protected abstract _getMinDate(): D | null;\n\n  /** Gets the maximum date for the input. Used for validation. */\n  protected abstract _getMaxDate(): D | null;\n\n  /** Gets the date filter function. Used for validation. */\n  protected abstract _getDateFilter(): DateFilterFn<D> | undefined;\n\n  /** Registers a date selection model with the input. */\n  _registerModel(model: MatDateSelectionModel<S, D>): void {\n    this._model = model;\n    this._valueChangesSubscription.unsubscribe();\n\n    if (this._pendingValue) {\n      this._assignValue(this._pendingValue);\n    }\n\n    this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n      if (event.source !== this) {\n        const value = this._getValueFromModel(event.selection);\n        this._cvaOnChange(value);\n        this._onTouched();\n        this._formatValue(value);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n\n        if (this._outsideValueChanged) {\n          this._outsideValueChanged();\n        }\n      }\n    });\n  }\n\n  /** Opens the popup associated with the input. */\n  protected abstract _openPopup(): void;\n\n  /** Assigns a value to the input's model. */\n  protected abstract _assignValueToModel(model: D | null): void;\n\n  /** Converts a value from the model into a native value for the input. */\n  protected abstract _getValueFromModel(modelValue: S): D | null;\n\n  /** Combined form control validator for this input. */\n  protected abstract _validator: ValidatorFn | null;\n\n  /**\n   * Callback that'll be invoked when the selection model is changed\n   * from somewhere that's not the current datepicker input.\n   */\n  protected abstract _outsideValueChanged?: () => void;\n\n  /** Whether the last value set on the input was valid. */\n  protected _lastValueValid = false;\n\n  constructor(\n      protected _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterViewInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this._valueChangesSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._openPopup();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    const lastValueWasValid = this._lastValueValid;\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this.value)) {\n      this._assignValue(date);\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else if (lastValueWasValid !== this._lastValueValid) {\n      this._validatorOnChange();\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  protected _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  protected _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Assigns a value to the model. */\n  private _assignValue(value: D | null) {\n    // We may get some incoming values before the model was\n    // assigned. Save the value so that we can assign it later.\n    if (this._model) {\n      this._assignValueToModel(value);\n      this._pendingValue = null;\n    } else {\n      this._pendingValue = value;\n    }\n  }\n\n  /**\n   * Checks whether a parent control is disabled. This is in place so that it can be overridden\n   * by inputs extending this one which can be placed inside of a group that can be disabled.\n   */\n  protected _parentDisabled() {\n    return false;\n  }\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that\n  // may accept different types.\n  static ngAcceptInputType_value: any;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n} from '@angular/core';\nimport {\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerInputBase, DateFilterFn} from './datepicker-input-base';\nimport {MatDatepickerControl} from './datepicker-base';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> extends MatDatepickerInputBase<D | null, D>\n  implements MatDatepickerControl<D | null> {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(datepicker: MatDatepicker<D>) {\n    if (datepicker) {\n      this._datepicker = datepicker;\n      this._registerModel(datepicker._registerInput(this));\n    }\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input('matDatepickerFilter')\n  get dateFilter() { return this._dateFilter; }\n  set dateFilter(value: DateFilterFn<D | null>) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  private _dateFilter: DateFilterFn<D | null>;\n\n  /** The combined form control validator for this input. */\n  protected _validator: ValidatorFn | null;\n\n  constructor(\n      elementRef: ElementRef<HTMLInputElement>,\n      @Optional() dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats,\n      @Optional() @Inject(MAT_FORM_FIELD) private _formField: MatFormField) {\n    super(elementRef, dateAdapter, dateFormats);\n    this._validator = Validators.compose(super._getValidators());\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the value at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /** Opens the associated datepicker. */\n  protected _openPopup(): void {\n    if (this._datepicker) {\n      this._datepicker.open();\n    }\n  }\n\n  protected _getValueFromModel(modelValue: D | null): D | null {\n    return modelValue;\n  }\n\n  protected _assignValueToModel(value: D | null): void {\n    if (this._model) {\n      this._model.updateSelection(value, this);\n    }\n  }\n\n  /** Gets the input's minimum date. */\n  protected _getMinDate() {\n    return this._min;\n  }\n\n  /** Gets the input's maximum date. */\n  protected _getMaxDate() {\n    return this._max;\n  }\n\n  /** Gets the input's date filtering function. */\n  protected _getDateFilter() {\n    return this._dateFilter;\n  }\n\n  // Unnecessary when selecting a single date.\n  protected _outsideValueChanged: undefined;\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that\n  // may accept different types.\n  static ngAcceptInputType_value: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerBase, MatDatepickerControl} from './datepicker-base';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': 'disabled ? null : -1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepickerBase<MatDatepickerControl<any>, D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Optional,\n  InjectionToken,\n  Inject,\n  OnInit,\n  Injector,\n  InjectFlags,\n  DoCheck,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  NgForm,\n  FormGroupDirective,\n  NgControl,\n  ValidatorFn,\n  Validators,\n  AbstractControl,\n  ValidationErrors,\n} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  mixinErrorState,\n  MAT_DATE_FORMATS,\n  DateAdapter,\n  MatDateFormats,\n  ErrorStateMatcher,\n} from '@angular/material/core';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {MatDatepickerInputBase, DateFilterFn} from './datepicker-input-base';\nimport {DateRange, MatDateSelectionModel} from './date-selection-model';\n\n/** Parent component that should be wrapped around `MatStartDate` and `MatEndDate`. */\nexport interface MatDateRangeInputParent<D> {\n  id: string;\n  min: D | null;\n  max: D | null;\n  dateFilter: DateFilterFn<D>;\n  _startInput: MatDateRangeInputPartBase<D>;\n  _endInput: MatDateRangeInputPartBase<D>;\n  _groupDisabled: boolean;\n  _ariaDescribedBy: string | null;\n  _ariaLabelledBy: string | null;\n  _handleChildValueChange: () => void;\n  _openDatepicker: () => void;\n}\n\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nexport const MAT_DATE_RANGE_INPUT_PARENT =\n    new InjectionToken<MatDateRangeInputParent<unknown>>('MAT_DATE_RANGE_INPUT_PARENT');\n\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\n@Directive()\nabstract class MatDateRangeInputPartBase<D>\n  extends MatDatepickerInputBase<DateRange<D>> implements OnInit, DoCheck {\n\n  /** @docs-private */\n  ngControl: NgControl;\n\n  /** @docs-private */\n  abstract updateErrorState(): void;\n\n  protected abstract _validator: ValidatorFn | null;\n  protected abstract _assignValueToModel(value: D | null): void;\n  protected abstract _getValueFromModel(modelValue: DateRange<D>): D | null;\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) public _rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    public _defaultErrorStateMatcher: ErrorStateMatcher,\n    private _injector: Injector,\n    @Optional() public _parentForm: NgForm,\n    @Optional() public _parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n    super(elementRef, dateAdapter, dateFormats);\n  }\n\n  ngOnInit() {\n    // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n    // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n    // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n    // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n    // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n    // everything has been resolved.\n    const ngControl = this._injector.get(NgControl, null, InjectFlags.Self);\n\n    if (ngControl) {\n      this.ngControl = ngControl;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** Gets whether the input is empty. */\n  isEmpty(): boolean {\n    return this._elementRef.nativeElement.value.length === 0;\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Handles `input` events on the input element. */\n  _onInput(value: string) {\n    super._onInput(value);\n    this._rangeInput._handleChildValueChange();\n  }\n\n  /** Opens the datepicker associated with the input. */\n  protected _openPopup(): void {\n    this._rangeInput._openDatepicker();\n  }\n\n  /** Gets the minimum date from the range input. */\n  protected _getMinDate() {\n    return this._rangeInput.min;\n  }\n\n  /** Gets the maximum date from the range input. */\n  protected _getMaxDate() {\n    return this._rangeInput.max;\n  }\n\n  /** Gets the date filter function from the range input. */\n  protected _getDateFilter() {\n    return this._rangeInput.dateFilter;\n  }\n\n  protected _outsideValueChanged = () => {\n    // Whenever the value changes outside the input we need to revalidate, because\n    // the validation state of each of the inputs depends on the other one.\n    this._validatorOnChange();\n  }\n\n  protected _parentDisabled() {\n    return this._rangeInput._groupDisabled;\n  }\n\n  _registerModel(model: MatDateSelectionModel<DateRange<D>, D>) {\n    // The very first time the range inputs write their values, they don't know about the value\n    // of the opposite input. When this is combined with the fact that `NgModel` defers writing\n    // its value with a `Promise.resolve`, we can get into a situation where the first input\n    // resets the value of the second. We work around it by deferring the registration of\n    // the model, allowing the input enough time to assign the initial value.\n    Promise.resolve().then(() => super._registerModel(model));\n  }\n}\n\nconst _MatDateRangeInputBase:\n    CanUpdateErrorStateCtor & typeof MatDateRangeInputPartBase =\n    // Needs to be `as any`, because the base class is abstract.\n    mixinErrorState(MatDateRangeInputPartBase as any);\n\n/** Input for entering the start date in a `mat-date-range-input`. */\n@Directive({\n  selector: 'input[matStartDate]',\n  host: {\n    'class': 'mat-date-range-input-inner',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(keydown)': '_onKeydown($event)',\n    '[attr.id]': '_rangeInput.id',\n    '[attr.aria-labelledby]': '_rangeInput._ariaLabelledBy',\n    '[attr.aria-describedby]': '_rangeInput._ariaDescribedBy',\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n    '(blur)': '_onBlur()',\n    'type': 'text',\n  },\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true},\n    {provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true}\n  ]\n})\nexport class MatStartDate<D> extends _MatDateRangeInputBase<D> implements CanUpdateErrorState {\n  /** Validator that checks that the start date isn't after the end date. */\n  private _startValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const start = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const end = this._model ? this._model.selection.end : null;\n    return (!start || !end ||\n        this._dateAdapter.compareDate(start, end) <= 0) ?\n        null : {'matStartDateInvalid': {'end': end, 'actual': start}};\n  }\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    injector: Injector,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup,\n        dateAdapter, dateFormats);\n  }\n\n  protected _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n\n  protected _getValueFromModel(modelValue: DateRange<D>) {\n    return modelValue.start;\n  }\n\n  protected _assignValueToModel(value: D | null) {\n    if (this._model) {\n      const range = new DateRange(value, this._model.selection.end);\n      this._model.updateSelection(range, this);\n    }\n  }\n\n  protected _formatValue(value: D | null) {\n    super._formatValue(value);\n\n    // Any time the input value is reformatted we need to tell the parent.\n    this._rangeInput._handleChildValueChange();\n  }\n\n  /** Gets the value that should be used when mirroring the input's size. */\n  getMirrorValue(): string {\n    const element = this._elementRef.nativeElement;\n    const value = element.value;\n    return value.length > 0 ? value : element.placeholder;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n\n/** Input for entering the end date in a `mat-date-range-input`. */\n@Directive({\n  selector: 'input[matEndDate]',\n  host: {\n    'class': 'mat-date-range-input-inner',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(keydown)': '_onKeydown($event)',\n    '[attr.aria-labelledby]': '_rangeInput._ariaLabelledBy',\n    '[attr.aria-describedby]': '_rangeInput._ariaDescribedBy',\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n    '(blur)': '_onBlur()',\n    'type': 'text',\n  },\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true},\n    {provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true}\n  ]\n})\nexport class MatEndDate<D> extends _MatDateRangeInputBase<D> implements CanUpdateErrorState {\n  /** Validator that checks that the end date isn't before the start date. */\n  private _endValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const end = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const start = this._model ? this._model.selection.start : null;\n    return (!end || !start ||\n        this._dateAdapter.compareDate(end, start) >= 0) ?\n        null : {'matEndDateInvalid': {'start': start, 'actual': end}};\n  }\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    injector: Injector,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup,\n        dateAdapter, dateFormats);\n  }\n\n  protected _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n\n  protected _getValueFromModel(modelValue: DateRange<D>) {\n    return modelValue.end;\n  }\n\n  protected _assignValueToModel(value: D | null) {\n    if (this._model) {\n      const range = new DateRange(this._model.selection.start, value);\n      this._model.updateSelection(range, this);\n    }\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    // If the user is pressing backspace on an empty end input, focus focus back to the start.\n    if (event.keyCode === BACKSPACE && !this._elementRef.nativeElement.value) {\n      this._rangeInput._startInput.focus();\n    }\n\n    super._onKeydown(event);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase, MatDatepickerContent} from './datepicker-base';\nimport {MatDateRangeInput} from './date-range-input';\nimport {MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\n@Component({\n  selector: 'mat-date-range-picker',\n  template: '',\n  exportAs: 'matDateRangePicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatDateRangePicker<D>\n  extends MatDatepickerBase<MatDateRangeInput<D>, DateRange<D>, D> {\n\n  protected _forwardContentValues(instance: MatDatepickerContent<DateRange<D>, D>) {\n    super._forwardContentValues(instance);\n\n    const input = this._datepickerInput;\n\n    if (input) {\n      instance.comparisonStart = input.comparisonStart;\n      instance.comparisonEnd = input.comparisonEnd;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Input,\n  Optional,\n  OnDestroy,\n  ContentChild,\n  AfterContentInit,\n  ChangeDetectorRef,\n  Self,\n  ElementRef,\n} from '@angular/core';\nimport {MatFormFieldControl, MatFormField} from '@angular/material/form-field';\nimport {ThemePalette, DateAdapter} from '@angular/material/core';\nimport {NgControl, ControlContainer} from '@angular/forms';\nimport {Subject, merge} from 'rxjs';\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  MatStartDate,\n  MatEndDate,\n  MatDateRangeInputParent,\n  MAT_DATE_RANGE_INPUT_PARENT,\n} from './date-range-input-parts';\nimport {MatDatepickerControl} from './datepicker-base';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {MatDateRangePicker} from './date-range-picker';\nimport {DateRange, MatDateSelectionModel} from './date-selection-model';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mat-date-range-input',\n  templateUrl: 'date-range-input.html',\n  styleUrls: ['date-range-input.css'],\n  exportAs: 'matDateRangeInput',\n  host: {\n    'class': 'mat-date-range-input',\n    '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n    '[attr.id]': 'null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatDateRangeInput},\n    {provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput},\n  ]\n})\nexport class MatDateRangeInput<D> implements MatFormFieldControl<DateRange<D>>,\n  MatDatepickerControl<D>, MatDateRangeInputParent<D>, AfterContentInit, OnDestroy {\n  /** Current value of the range input. */\n  get value() {\n    return this._model ? this._model.selection : null;\n  }\n\n  /** Emits when the input's state has changed. */\n  stateChanges = new Subject<void>();\n\n  /** Unique ID for the input. */\n  id = `mat-date-range-input-${nextUniqueId++}`;\n\n  /** Whether the control is focused. */\n  focused = false;\n\n  /** Whether the control's label should float. */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  /** Name of the form control. */\n  controlType = 'mat-date-range-input';\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`, but not used.\n   * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n   * @docs-private\n   */\n  placeholder: string;\n\n  /** The range picker that this input is associated with. */\n  @Input()\n  get rangePicker() { return this._rangePicker; }\n  set rangePicker(rangePicker: MatDateRangePicker<D>) {\n    if (rangePicker) {\n      this._model = rangePicker._registerInput(this);\n      this._rangePicker = rangePicker;\n      this._registerModel(this._model!);\n    }\n  }\n  private _rangePicker: MatDateRangePicker<D>;\n\n  /** Whether the input is required. */\n  @Input()\n  get required(): boolean { return !!this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  private _required: boolean;\n\n  /** Function that can be used to filter out dates within the date range picker. */\n  @Input()\n  get dateFilter() { return this._dateFilter; }\n  set dateFilter(value: DateFilterFn<D>) {\n    this._dateFilter = value;\n    this._revalidate();\n  }\n  private _dateFilter: DateFilterFn<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._revalidate();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._revalidate();\n  }\n  private _max: D | null;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return (this._startInput && this._endInput) ?\n      (this._startInput.disabled && this._endInput.disabled) :\n      this._groupDisabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._groupDisabled) {\n      this._groupDisabled = newValue;\n      this._disabledChange.next(this.disabled);\n    }\n  }\n  _groupDisabled = false;\n\n  /** Whether the input is in an error state. */\n  get errorState(): boolean {\n    if (this._startInput && this._endInput) {\n      return this._startInput.errorState || this._endInput.errorState;\n    }\n\n    return false;\n  }\n\n  /** Whether the datepicker input is empty. */\n  get empty(): boolean {\n    const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n    const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n    return startEmpty && endEmpty;\n  }\n\n  /** Value for the `aria-describedby` attribute of the inputs. */\n  _ariaDescribedBy: string | null = null;\n\n  /** Value for the `aria-labelledby` attribute of the inputs. */\n  _ariaLabelledBy: string | null = null;\n\n  /** Date selection model currently registered with the input. */\n  private _model: MatDateSelectionModel<DateRange<D>> | undefined;\n\n  /** Separator text to be shown between the inputs. */\n  @Input() separator = 'â';\n\n  /** Start of the comparison range that should be shown in the calendar. */\n  @Input() comparisonStart: D | null = null;\n\n  /** End of the comparison range that should be shown in the calendar. */\n  @Input() comparisonEnd: D | null = null;\n\n  @ContentChild(MatStartDate) _startInput: MatStartDate<D>;\n  @ContentChild(MatEndDate) _endInput: MatEndDate<D>;\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n   * @docs-private\n   */\n  ngControl: NgControl | null;\n\n  /** Emits when the input's disabled state changes. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() @Self() control: ControlContainer,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() private _formField?: MatFormField) {\n\n    if (!_dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    // TODO(crisbeto): remove `as any` after #18206 lands.\n    this.ngControl = control as any;\n    this._ariaLabelledBy = _formField ? _formField._labelId : null;\n  }\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]): void {\n    this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n  }\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  onContainerClick(): void {\n    if (!this.focused && !this.disabled) {\n      if (!this._model || !this._model.selection.start) {\n        this._startInput.focus();\n      } else {\n        this._endInput.focus();\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    if (!this._startInput) {\n      throw Error('mat-date-range-input must contain a matStartDate input');\n    }\n\n    if (!this._endInput) {\n      throw Error('mat-date-range-input must contain a matEndDate input');\n    }\n\n    if (this._model) {\n      this._registerModel(this._model);\n    }\n\n    // We don't need to unsubscribe from this, because we\n    // know that the input streams will be completed on destroy.\n    merge(this._startInput._disabledChange, this._endInput._disabledChange).subscribe(() => {\n      this._disabledChange.next(this.disabled);\n    });\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._disabledChange.unsubscribe();\n  }\n\n  /** Gets the date at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value ? this.value.start : null;\n  }\n\n  /** Gets the input's theme palette. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the element to which the calendar overlay should be attached. */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Gets the value that is used to mirror the state input. */\n  _getInputMirrorValue() {\n    return this._startInput ? this._startInput.getMirrorValue() : '';\n  }\n\n  /** Whether the input placeholders should be hidden. */\n  _shouldHidePlaceholders() {\n    return this._startInput ? !this._startInput.isEmpty() : false;\n  }\n\n  /** Handles the value in one of the child inputs changing. */\n  _handleChildValueChange() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Opens the date range picker associated with the input. */\n  _openDatepicker() {\n    if (this._rangePicker) {\n      this._rangePicker.open();\n    }\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Re-runs the validators on the start/end inputs. */\n  private _revalidate() {\n    if (this._startInput) {\n      this._startInput._validatorOnChange();\n    }\n\n    if (this._endInput) {\n      this._endInput._validatorOnChange();\n    }\n  }\n\n  /** Registers the current date selection model with the start/end inputs. */\n  private _registerModel(model: MatDateSelectionModel<DateRange<D>>) {\n    if (this._startInput) {\n      this._startInput._registerModel(model);\n    }\n\n    if (this._endInput) {\n      this._endInput._registerModel(model);\n    }\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker} from './datepicker';\nimport {\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker-base';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatDateRangeInput} from './date-range-input';\nimport {MatStartDate, MatEndDate} from './date-range-input-parts';\nimport {MatDateRangePicker} from './date-range-picker';\nimport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  DefaultMatCalendarRangeStrategy\n} from './date-range-selection-strategy';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {\n      provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n      useClass: DefaultMatCalendarRangeStrategy\n    }\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_DATE_RANGE_INPUT_PARENT as Éµangular_material_src_material_datepicker_datepicker_c} from './date-range-input-parts';\nexport {MatDatepickerBase as Éµangular_material_src_material_datepicker_datepicker_a} from './datepicker-base';\nexport {MatDatepickerInputBase as Éµangular_material_src_material_datepicker_datepicker_b} from './datepicker-input-base';"]},"metadata":{},"sourceType":"module"}