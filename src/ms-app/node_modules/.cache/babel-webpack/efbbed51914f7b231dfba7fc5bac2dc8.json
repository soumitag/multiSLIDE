{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/divider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar MatDivider = /*#__PURE__*/function () {\n  function MatDivider() {\n    _classCallCheck(this, MatDivider);\n\n    this._vertical = false;\n    this._inset = false;\n  }\n  /**\n   * Whether the divider is vertically aligned.\n   * @return {?}\n   */\n\n\n  _createClass(MatDivider, [{\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the divider is an inset divider.\n     * @return {?}\n     */\n\n  }, {\n    key: \"inset\",\n    get: function get() {\n      return this._inset;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._inset = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatDivider;\n}();\n\nMatDivider.ɵfac = function MatDivider_Factory(t) {\n  return new (t || MatDivider)();\n};\n\nMatDivider.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatDivider,\n  selectors: [[\"mat-divider\"]],\n  hostAttrs: [\"role\", \"separator\", 1, \"mat-divider\"],\n  hostVars: 7,\n  hostBindings: function MatDivider_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n      ɵngcc0.ɵɵclassProp(\"mat-divider-vertical\", ctx.vertical)(\"mat-divider-horizontal\", !ctx.vertical)(\"mat-divider-inset\", ctx.inset);\n    }\n  },\n  inputs: {\n    vertical: \"vertical\",\n    inset: \"inset\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function MatDivider_Template(rf, ctx) {},\n  styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nMatDivider.propDecorators = {\n  vertical: [{\n    type: Input\n  }],\n  inset: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDivider, [{\n    type: Component,\n    args: [{\n      selector: 'mat-divider',\n      host: {\n        'role': 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mat-divider-vertical]': 'vertical',\n        '[class.mat-divider-horizontal]': '!vertical',\n        '[class.mat-divider-inset]': 'inset',\n        'class': 'mat-divider'\n      },\n      template: '',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n    }]\n  }], function () {\n    return [];\n  }, {\n    vertical: [{\n      type: Input\n    }],\n    inset: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatDivider.ngAcceptInputType_vertical;\n  /** @type {?} */\n\n  MatDivider.ngAcceptInputType_inset;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDivider.prototype._vertical;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatDivider.prototype._inset;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/divider-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatDividerModule = function MatDividerModule() {\n  _classCallCheck(this, MatDividerModule);\n};\n\nMatDividerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatDividerModule\n});\nMatDividerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatDividerModule_Factory(t) {\n    return new (t || MatDividerModule)();\n  },\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDividerModule, {\n    declarations: function declarations() {\n      return [MatDivider];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatDivider, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatDividerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatDivider, MatCommonModule],\n      declarations: [MatDivider]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatDivider, MatDividerModule };","map":{"version":3,"sources":["../../../../../material/divider/divider.ts","../../../../../material/divider/divider-module.ts","../../../../../material/divider/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;IA0Ba,U;AAfb,wBAAA;AAAA;;AAoBU,SAAA,SAAA,GAAqB,KAArB;AAMA,SAAA,MAAA,GAAkB,KAAlB;AAIT;AACD;;;;;;;;wBAbc;AAAc,aAAO,KAAK,SAAZ;AAAwB;AACpD;;;;;sBAAe,K,EAAc;AAAI,WAAK,SAAL,GAAiB,qBAAqB,CAAC,KAAD,CAAtC;AAAgD;AACjF;;;;;;;wBAIW;AAAc,aAAO,KAAK,MAAZ;AAAqB;AAC9C;;;;;sBAAY,K,EAAc;AAAI,WAAK,MAAL,GAAc,qBAAqB,CAAC,KAAD,CAAnC;AAA6C;;;;;;2BAzB1E,kB,CAAA,C,EAAS;AAAA,SAAC,KAAA,CAAA,IAAA,UAAA,GAAD;AACE,C;;WAAa,I,GAAA,MAAA,CAAA,iBAAA,CACjB;AAAA,EAAA,IAAA,EAAA,UAAA;AACE,EAAA,SAAE,EAAA,CAAA,CAAW,aAAX,CAAA,CADJ;AACe,EAAA,SACnB,EAAA,CAAA,MAAA,EAAA,WAAA,EAA2B,CAA3B,EAA2B,aAA3B,CAFI;AAEuB,EAAA,QAAA,EAAA,CAFvB;AAEuB,EAAA,YAAsC,EAAA,SAAA,uBAAA,CACjE,EADiE,EACjE,GADiE,EACjE;AAA8B,QAAE,EAAA,GAAA,CAAF,EAAY;aAC1C,W,CAAA,kB,EAAA,GAAA,CAAgC,QAAhC,GAAkC,UAAlC,GAA6C,Y;aAClB,W,CAAE,sB,EAAO,GACpC,CAAA,Q,EAAS,wB,EAAa,CAAA,GACvB,CAAA,Q,EAAA,mB,EACW,GAAA,CAAA,K;AAEZ;AAAA,GAVM;AAUN,EAAA,MAAA,EAAa;AAAE,IAAA,QAAA,EAAA,UAAF;AAAwB,IAAA,KAAA,EAAA;AAAxB,GAVP;AAWN,EAAA,KAAA,EAAA,CAXM;AAWN,EAAA,IAAe,EAAE,CAXX;AAWW,EAAA,QAAA,EAAA,SAAA,mBAAA,CAA8B,EAA9B,EAA8B,GAA9B,EAA8B,CAAA,CAXzC;AAWyC,EAAA,MAAA,EAAA,CAAA,+SAAA,CAXzC;AAWyC,EAAA,aAChD,EAAA,CAZO;AAYP,EAAA,eAAA,EAAA;AAZO,CADiB,C;AAcpB,UAAA,CAAA,cAAA,GAAA;AACI,EAAA,QAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EACN;AADM,GAAA,CADJ;AAGH,EAAA,KAAA,EAAA,CAAA;AAAA,IAAA,IAAA,EAKC;AALD,GAAA;AAHG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASF,C;;AAAC,IAAA,KAAA,EAAA;AAAa;AAIf,EAAA,UAAA,CAAA,0BAAA;AACF;;AAAE,EAAA,UAAA,CAAA,uBAAA;AACF;;;;;AAVE,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA;AACF;;;;;AAKE,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA;AACF;AACE;;;;;;;ICrBW,gB;;;;+BALZ,gB,CAAA;AAAA,EAAA,IAAQ,EAAA;AAAR,C;AACC,gBAAU,CAAA,IAAV,GAAU,MAAgB,CAAA,gBAAhB,CACV;AAAA,EAAA,OAAU,EAAA,SAAY,wBAAZ,CAA4B,CAA5B,EAA4B;AAAA,WACtC,KAAA,CAAA,IAAY,gBAAZ,GADsC;AACZ,GAD1B;AAC0B,EAAA,OAC3B,EAAA,CAAA,CAAA,eAAA,CAAA,E,eAAA;AAFC,CADU,CAAV;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIG,C;AAAE;;;;;;AClBP;;;;;AAIA,SAAA,UAAA,EAAA,gBAAA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_inset: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}