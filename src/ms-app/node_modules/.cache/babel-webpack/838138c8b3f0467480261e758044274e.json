{"ast":null,"code":"import _slicedToArray from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, merge, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nvar _c0 = [\"contentWrapper\"];\nvar _c1 = [\"*\"];\nvar VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * A strategy that dictates which items should be rendered in the viewport.\n * @record\n */\n\nfunction VirtualScrollStrategy() {}\n\nif (false) {\n  /**\n   * Emits when the index of the first element visible in the viewport changes.\n   * @type {?}\n   */\n  VirtualScrollStrategy.prototype.scrolledIndexChange;\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n\n  VirtualScrollStrategy.prototype.attach = function (viewport) {};\n  /**\n   * Detaches this scroll strategy from the currently attached viewport.\n   * @return {?}\n   */\n\n\n  VirtualScrollStrategy.prototype.detach = function () {};\n  /**\n   * Called when the viewport is scrolled (debounced using requestAnimationFrame).\n   * @return {?}\n   */\n\n\n  VirtualScrollStrategy.prototype.onContentScrolled = function () {};\n  /**\n   * Called when the length of the data changes.\n   * @return {?}\n   */\n\n\n  VirtualScrollStrategy.prototype.onDataLengthChanged = function () {};\n  /**\n   * Called when the range of items rendered in the DOM has changed.\n   * @return {?}\n   */\n\n\n  VirtualScrollStrategy.prototype.onContentRendered = function () {};\n  /**\n   * Called when the offset of the rendered items changed.\n   * @return {?}\n   */\n\n\n  VirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () {};\n  /**\n   * Scroll to the offset for the given index.\n   * @param {?} index The index of the element to scroll to.\n   * @param {?} behavior The ScrollBehavior to use when scrolling.\n   * @return {?}\n   */\n\n\n  VirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/fixed-size-virtual-scroll.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\n\n\nvar FixedSizeVirtualScrollStrategy = /*#__PURE__*/function () {\n  /**\n   * @param {?} itemSize The size of the items in the virtually scrolling list.\n   * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  function FixedSizeVirtualScrollStrategy(itemSize, minBufferPx, maxBufferPx) {\n    _classCallCheck(this, FixedSizeVirtualScrollStrategy);\n\n    this._scrolledIndexChange = new Subject();\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     */\n\n    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n    /**\n     * The attached viewport.\n     */\n\n    this._viewport = null;\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param {?} viewport The viewport to attach this strategy to.\n   * @return {?}\n   */\n\n\n  _createClass(FixedSizeVirtualScrollStrategy, [{\n    key: \"attach\",\n    value: function attach(viewport) {\n      this._viewport = viewport;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._scrolledIndexChange.complete();\n\n      this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n\n  }, {\n    key: \"updateItemAndBufferSize\",\n    value: function updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n      if (maxBufferPx < minBufferPx) {\n        throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n      }\n\n      this._itemSize = itemSize;\n      this._minBufferPx = minBufferPx;\n      this._maxBufferPx = maxBufferPx;\n\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContentScrolled\",\n    value: function onContentScrolled() {\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onDataLengthChanged\",\n    value: function onDataLengthChanged() {\n      this._updateTotalContentSize();\n\n      this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContentRendered\",\n    value: function onContentRendered() {}\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onRenderedOffsetChanged\",\n    value: function onRenderedOffsetChanged() {}\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index, behavior) {\n      if (this._viewport) {\n        this._viewport.scrollToOffset(index * this._itemSize, behavior);\n      }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTotalContentSize\",\n    value: function _updateTotalContentSize() {\n      if (!this._viewport) {\n        return;\n      }\n\n      this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateRenderedRange\",\n    value: function _updateRenderedRange() {\n      if (!this._viewport) {\n        return;\n      }\n      /** @type {?} */\n\n\n      var scrollOffset = this._viewport.measureScrollOffset();\n      /** @type {?} */\n\n\n      var firstVisibleIndex = scrollOffset / this._itemSize;\n      /** @type {?} */\n\n      var renderedRange = this._viewport.getRenderedRange();\n      /** @type {?} */\n\n\n      var newRange = {\n        start: renderedRange.start,\n        end: renderedRange.end\n      };\n      /** @type {?} */\n\n      var viewportSize = this._viewport.getViewportSize();\n      /** @type {?} */\n\n\n      var dataLength = this._viewport.getDataLength();\n      /** @type {?} */\n\n\n      var startBuffer = scrollOffset - newRange.start * this._itemSize;\n\n      if (startBuffer < this._minBufferPx && newRange.start != 0) {\n        /** @type {?} */\n        var expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n        newRange.start = Math.max(0, newRange.start - expandStart);\n        newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n      } else {\n        /** @type {?} */\n        var endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n\n        if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n          /** @type {?} */\n          var expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n\n          if (expandEnd > 0) {\n            newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n            newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n          }\n        }\n      }\n\n      this._viewport.setRenderedRange(newRange);\n\n      this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n\n      this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n  }]);\n\n  return FixedSizeVirtualScrollStrategy;\n}();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  FixedSizeVirtualScrollStrategy.prototype._scrolledIndexChange;\n  /**\n   * \\@docs-private Implemented as part of VirtualScrollStrategy.\n   * @type {?}\n   */\n\n  FixedSizeVirtualScrollStrategy.prototype.scrolledIndexChange;\n  /**\n   * The attached viewport.\n   * @type {?}\n   * @private\n   */\n\n  FixedSizeVirtualScrollStrategy.prototype._viewport;\n  /**\n   * The size of the items in the virtually scrolling list.\n   * @type {?}\n   * @private\n   */\n\n  FixedSizeVirtualScrollStrategy.prototype._itemSize;\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * @type {?}\n   * @private\n   */\n\n  FixedSizeVirtualScrollStrategy.prototype._minBufferPx;\n  /**\n   * The number of buffer items to render beyond the edge of the viewport (in pixels).\n   * @type {?}\n   * @private\n   */\n\n  FixedSizeVirtualScrollStrategy.prototype._maxBufferPx;\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\n\n\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n  return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\n\n\nvar CdkFixedSizeVirtualScroll = /*#__PURE__*/function () {\n  function CdkFixedSizeVirtualScroll() {\n    _classCallCheck(this, CdkFixedSizeVirtualScroll);\n\n    this._itemSize = 20;\n    this._minBufferPx = 100;\n    this._maxBufferPx = 200;\n    /**\n     * The scroll strategy used by this directive.\n     */\n\n    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n  /**\n   * The size of the items in the list (in pixels).\n   * @return {?}\n   */\n\n\n  _createClass(CdkFixedSizeVirtualScroll, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnChanges() {\n      this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n  }, {\n    key: \"itemSize\",\n    get: function get() {\n      return this._itemSize;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._itemSize = coerceNumberProperty(value);\n    }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n\n  }, {\n    key: \"minBufferPx\",\n    get: function get() {\n      return this._minBufferPx;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._minBufferPx = coerceNumberProperty(value);\n    }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n\n  }, {\n    key: \"maxBufferPx\",\n    get: function get() {\n      return this._maxBufferPx;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._maxBufferPx = coerceNumberProperty(value);\n    }\n  }]);\n\n  return CdkFixedSizeVirtualScroll;\n}();\n\nCdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t) {\n  return new (t || CdkFixedSizeVirtualScroll)();\n};\n\nCdkFixedSizeVirtualScroll.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkFixedSizeVirtualScroll,\n  selectors: [[\"cdk-virtual-scroll-viewport\", \"itemSize\", \"\"]],\n  inputs: {\n    itemSize: \"itemSize\",\n    minBufferPx: \"minBufferPx\",\n    maxBufferPx: \"maxBufferPx\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return CdkFixedSizeVirtualScroll;\n    })]\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkFixedSizeVirtualScroll.propDecorators = {\n  itemSize: [{\n    type: Input\n  }],\n  minBufferPx: [{\n    type: Input\n  }],\n  maxBufferPx: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkFixedSizeVirtualScroll, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport[itemSize]',\n      providers: [{\n        provide: VIRTUAL_SCROLL_STRATEGY,\n        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n        deps: [forwardRef(\n        /**\n        * @return {?}\n        */\n        function () {\n          return CdkFixedSizeVirtualScroll;\n        })]\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    itemSize: [{\n      type: Input\n    }],\n    minBufferPx: [{\n      type: Input\n    }],\n    maxBufferPx: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  CdkFixedSizeVirtualScroll.ngAcceptInputType_itemSize;\n  /** @type {?} */\n\n  CdkFixedSizeVirtualScroll.ngAcceptInputType_minBufferPx;\n  /** @type {?} */\n\n  CdkFixedSizeVirtualScroll.ngAcceptInputType_maxBufferPx;\n  /** @type {?} */\n\n  CdkFixedSizeVirtualScroll.prototype._itemSize;\n  /** @type {?} */\n\n  CdkFixedSizeVirtualScroll.prototype._minBufferPx;\n  /** @type {?} */\n\n  CdkFixedSizeVirtualScroll.prototype._maxBufferPx;\n  /**\n   * The scroll strategy used by this directive.\n   * @type {?}\n   */\n\n  CdkFixedSizeVirtualScroll.prototype._scrollStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scroll-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\n\n\nvar DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n\nvar ScrollDispatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   * @param {?=} document\n   */\n  function ScrollDispatcher(_ngZone, _platform,\n  /** @breaking-change 11.0.0 make document required */\n  document) {\n    _classCallCheck(this, ScrollDispatcher);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     */\n\n    this._scrolled = new Subject();\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     */\n\n    this._globalSubscription = null;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     */\n\n    this._scrolledCount = 0;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n\n    this.scrollContainers = new Map();\n    this._document = document;\n  }\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param {?} scrollable Scrollable instance to be registered.\n   * @return {?}\n   */\n\n\n  _createClass(ScrollDispatcher, [{\n    key: \"register\",\n    value: function register(scrollable) {\n      var _this = this;\n\n      if (!this.scrollContainers.has(scrollable)) {\n        this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this._scrolled.next(scrollable);\n        }));\n      }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(scrollable) {\n      /** @type {?} */\n      var scrollableReference = this.scrollContainers.get(scrollable);\n\n      if (scrollableReference) {\n        scrollableReference.unsubscribe();\n        this.scrollContainers.delete(scrollable);\n      }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrolled\",\n    value: function scrolled() {\n      var _this2 = this;\n\n      var auditTimeInMs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCROLL_TIME;\n\n      if (!this._platform.isBrowser) {\n        return of();\n      }\n\n      return new Observable(\n      /**\n      * @param {?} observer\n      * @return {?}\n      */\n      function (observer) {\n        if (!_this2._globalSubscription) {\n          _this2._addGlobalListener();\n        } // In the case of a 0ms delay, use an observable without auditTime\n        // since it does add a perceptible delay in processing overhead.\n\n        /** @type {?} */\n\n\n        var subscription = auditTimeInMs > 0 ? _this2._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : _this2._scrolled.subscribe(observer);\n        _this2._scrolledCount++;\n        return (\n          /**\n          * @return {?}\n          */\n          function () {\n            subscription.unsubscribe();\n            _this2._scrolledCount--;\n\n            if (!_this2._scrolledCount) {\n              _this2._removeGlobalListener();\n            }\n          }\n        );\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this3 = this;\n\n      this._removeGlobalListener();\n\n      this.scrollContainers.forEach(\n      /**\n      * @param {?} _\n      * @param {?} container\n      * @return {?}\n      */\n      function (_, container) {\n        return _this3.deregister(container);\n      });\n\n      this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ancestorScrolled\",\n    value: function ancestorScrolled(elementRef, auditTimeInMs) {\n      /** @type {?} */\n      var ancestors = this.getAncestorScrollContainers(elementRef);\n      return this.scrolled(auditTimeInMs).pipe(filter(\n      /**\n      * @param {?} target\n      * @return {?}\n      */\n      function (target) {\n        return !target || ancestors.indexOf(target) > -1;\n      }));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAncestorScrollContainers\",\n    value: function getAncestorScrollContainers(elementRef) {\n      var _this4 = this;\n\n      /** @type {?} */\n      var scrollingContainers = [];\n      this.scrollContainers.forEach(\n      /**\n      * @param {?} _subscription\n      * @param {?} scrollable\n      * @return {?}\n      */\n      function (_subscription, scrollable) {\n        if (_this4._scrollableContainsElement(scrollable, elementRef)) {\n          scrollingContainers.push(scrollable);\n        }\n      });\n      return scrollingContainers;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDocument\",\n    value: function _getDocument() {\n      return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      /** @type {?} */\n      var doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n\n  }, {\n    key: \"_scrollableContainsElement\",\n    value: function _scrollableContainsElement(scrollable, elementRef) {\n      /** @type {?} */\n      var element = elementRef.nativeElement;\n      /** @type {?} */\n\n      var scrollableElement = scrollable.getElementRef().nativeElement; // Traverse through the element parents until we reach null, checking if any of the elements\n      // are the scrollable's element.\n\n      do {\n        if (element == scrollableElement) {\n          return true;\n        }\n      } while (element =\n      /** @type {?} */\n      element.parentElement);\n\n      return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_addGlobalListener\",\n    value: function _addGlobalListener() {\n      var _this5 = this;\n\n      this._globalSubscription = this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        var window = _this5._getWindow();\n\n        return fromEvent(window.document, 'scroll').subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this5._scrolled.next();\n        });\n      });\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_removeGlobalListener\",\n    value: function _removeGlobalListener() {\n      if (this._globalSubscription) {\n        this._globalSubscription.unsubscribe();\n\n        this._globalSubscription = null;\n      }\n    }\n  }]);\n\n  return ScrollDispatcher;\n}();\n\nScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t) {\n  return new (t || ScrollDispatcher)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n/** @nocollapse */\n\n\nScrollDispatcher.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nScrollDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function ScrollDispatcher_Factory() {\n    return new ScrollDispatcher(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8));\n  },\n  token: ScrollDispatcher,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ScrollDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Used to reference correct document/window\n   * @type {?}\n   * @protected\n   */\n  ScrollDispatcher.prototype._document;\n  /**\n   * Subject for notifying that a registered scrollable reference element has been scrolled.\n   * @type {?}\n   * @private\n   */\n\n  ScrollDispatcher.prototype._scrolled;\n  /**\n   * Keeps track of the global `scroll` and `resize` subscriptions.\n   * @type {?}\n   */\n\n  ScrollDispatcher.prototype._globalSubscription;\n  /**\n   * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n   * @type {?}\n   * @private\n   */\n\n  ScrollDispatcher.prototype._scrolledCount;\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   * @type {?}\n   */\n\n  ScrollDispatcher.prototype.scrollContainers;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ScrollDispatcher.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ScrollDispatcher.prototype._platform;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrollable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n\n\nvar CdkScrollable = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} scrollDispatcher\n   * @param {?} ngZone\n   * @param {?=} dir\n   */\n  function CdkScrollable(elementRef, scrollDispatcher, ngZone, dir) {\n    var _this6 = this;\n\n    _classCallCheck(this, CdkScrollable);\n\n    this.elementRef = elementRef;\n    this.scrollDispatcher = scrollDispatcher;\n    this.ngZone = ngZone;\n    this.dir = dir;\n    this._destroyed = new Subject();\n    this._elementScrolled = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    function (observer) {\n      return _this6.ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return fromEvent(_this6.elementRef.nativeElement, 'scroll').pipe(takeUntil(_this6._destroyed)).subscribe(observer);\n      });\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CdkScrollable, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.scrollDispatcher.deregister(this);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"elementScrolled\",\n    value: function elementScrolled() {\n      return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getElementRef\",\n    value: function getElementRef() {\n      return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(options) {\n      /** @type {?} */\n      var el = this.elementRef.nativeElement;\n      /** @type {?} */\n\n      var isRtl = this.dir && this.dir.value == 'rtl'; // Rewrite start & end offsets as right or left offsets.\n\n      if (options.left == null) {\n        options.left = isRtl ? options.end : options.start;\n      }\n\n      if (options.right == null) {\n        options.right = isRtl ? options.start : options.end;\n      } // Rewrite the bottom offset as a top offset.\n\n\n      if (options.bottom != null) {\n        /** @type {?} */\n        options.top = el.scrollHeight - el.clientHeight - options.bottom;\n      } // Rewrite the right offset as a left offset.\n\n\n      if (isRtl && getRtlScrollAxisType() != 0\n      /* NORMAL */\n      ) {\n          if (options.left != null) {\n            /** @type {?} */\n            options.right = el.scrollWidth - el.clientWidth - options.left;\n          }\n\n          if (getRtlScrollAxisType() == 2\n          /* INVERTED */\n          ) {\n              options.left = options.right;\n            } else if (getRtlScrollAxisType() == 1\n          /* NEGATED */\n          ) {\n              options.left = options.right ? -options.right : options.right;\n            }\n        } else {\n        if (options.right != null) {\n          /** @type {?} */\n          options.left = el.scrollWidth - el.clientWidth - options.right;\n        }\n      }\n\n      this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyScrollToOptions\",\n    value: function _applyScrollToOptions(options) {\n      /** @type {?} */\n      var el = this.elementRef.nativeElement;\n\n      if (supportsScrollBehavior()) {\n        el.scrollTo(options);\n      } else {\n        if (options.top != null) {\n          el.scrollTop = options.top;\n        }\n\n        if (options.left != null) {\n          el.scrollLeft = options.left;\n        }\n      }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      /** @type {?} */\n      var LEFT = 'left';\n      /** @type {?} */\n\n      var RIGHT = 'right';\n      /** @type {?} */\n\n      var el = this.elementRef.nativeElement;\n\n      if (from == 'top') {\n        return el.scrollTop;\n      }\n\n      if (from == 'bottom') {\n        return el.scrollHeight - el.clientHeight - el.scrollTop;\n      } // Rewrite start & end as left or right offsets.\n\n      /** @type {?} */\n\n\n      var isRtl = this.dir && this.dir.value == 'rtl';\n\n      if (from == 'start') {\n        from = isRtl ? RIGHT : LEFT;\n      } else if (from == 'end') {\n        from = isRtl ? LEFT : RIGHT;\n      }\n\n      if (isRtl && getRtlScrollAxisType() == 2\n      /* INVERTED */\n      ) {\n          // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollWidth - el.clientWidth - el.scrollLeft;\n          } else {\n            return el.scrollLeft;\n          }\n        } else if (isRtl && getRtlScrollAxisType() == 1\n      /* NEGATED */\n      ) {\n          // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n          // 0 when scrolled all the way right.\n          if (from == LEFT) {\n            return el.scrollLeft + el.scrollWidth - el.clientWidth;\n          } else {\n            return -el.scrollLeft;\n          }\n        } else {\n        // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n        // (scrollWidth - clientWidth) when scrolled all the way right.\n        if (from == LEFT) {\n          return el.scrollLeft;\n        } else {\n          return el.scrollWidth - el.clientWidth - el.scrollLeft;\n        }\n      }\n    }\n  }]);\n\n  return CdkScrollable;\n}();\n\nCdkScrollable.ɵfac = function CdkScrollable_Factory(t) {\n  return new (t || CdkScrollable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8));\n};\n\nCdkScrollable.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkScrollable,\n  selectors: [[\"\", \"cdk-scrollable\", \"\"], [\"\", \"cdkScrollable\", \"\"]]\n});\n/** @nocollapse */\n\nCdkScrollable.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: NgZone\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkScrollable, [{\n    type: Directive,\n    args: [{\n      selector: '[cdk-scrollable], [cdkScrollable]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  CdkScrollable.prototype._destroyed;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkScrollable.prototype._elementScrolled;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  CdkScrollable.prototype.elementRef;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  CdkScrollable.prototype.scrollDispatcher;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  CdkScrollable.prototype.ngZone;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  CdkScrollable.prototype.dir;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/viewport-ruler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\n\n\nvar DEFAULT_RESIZE_TIME = 20;\n/**\n * Object that holds the scroll position of the viewport in each direction.\n * @record\n */\n\nfunction ViewportScrollPosition() {}\n\nif (false) {\n  /** @type {?} */\n  ViewportScrollPosition.prototype.top;\n  /** @type {?} */\n\n  ViewportScrollPosition.prototype.left;\n}\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\n\n\nvar ViewportRuler = /*#__PURE__*/function () {\n  /**\n   * @param {?} _platform\n   * @param {?} ngZone\n   * @param {?=} document\n   */\n  function ViewportRuler(_platform, ngZone,\n  /** @breaking-change 11.0.0 make document required */\n  document) {\n    var _this7 = this;\n\n    _classCallCheck(this, ViewportRuler);\n\n    this._platform = _platform;\n    this._document = document;\n    ngZone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      var window = _this7._getWindow();\n\n      _this7._change = _platform.isBrowser ? merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) : of(); // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n\n      _this7._invalidateCache = _this7.change().subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this7._updateViewportSize();\n      });\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ViewportRuler, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      if (!this._viewportSize) {\n        this._updateViewportSize();\n      }\n      /** @type {?} */\n\n\n      var output = {\n        width: this._viewportSize.width,\n        height: this._viewportSize.height\n      }; // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n\n      if (!this._platform.isBrowser) {\n        this._viewportSize =\n        /** @type {?} */\n        null;\n      }\n\n      return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportRect\",\n    value: function getViewportRect() {\n      // Use the document element's bounding rect rather than the window scroll properties\n      // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n      // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n      // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n      // can disagree when the page is pinch-zoomed (on devices that support touch).\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n      // We use the documentElement instead of the body because, by default (without a css reset)\n      // browsers typically give the document body an 8px margin, which is not included in\n      // getBoundingClientRect().\n\n      /** @type {?} */\n      var scrollPosition = this.getViewportScrollPosition();\n\n      var _this$getViewportSize = this.getViewportSize(),\n          width = _this$getViewportSize.width,\n          height = _this$getViewportSize.height;\n\n      return {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        bottom: scrollPosition.top + height,\n        right: scrollPosition.left + width,\n        height: height,\n        width: width\n      };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportScrollPosition\",\n    value: function getViewportScrollPosition() {\n      // While we can get a reference to the fake document\n      // during SSR, it doesn't have getBoundingClientRect.\n      if (!this._platform.isBrowser) {\n        return {\n          top: 0,\n          left: 0\n        };\n      } // The top-left-corner of the viewport is determined by the scroll position of the document\n      // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n      // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n      // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n      // `document.documentElement` works consistently, where the `top` and `left` values will\n      // equal negative the scroll position.\n\n      /** @type {?} */\n\n\n      var document = this._getDocument();\n      /** @type {?} */\n\n\n      var window = this._getWindow();\n      /** @type {?} */\n\n\n      var documentElement =\n      /** @type {?} */\n      document.documentElement;\n      /** @type {?} */\n\n      var documentRect = documentElement.getBoundingClientRect();\n      /** @type {?} */\n\n      var top = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n      /** @type {?} */\n\n      var left = -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n      return {\n        top: top,\n        left: left\n      };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n\n  }, {\n    key: \"change\",\n    value: function change() {\n      var throttleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_RESIZE_TIME;\n      return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getDocument\",\n    value: function _getDocument() {\n      return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      /** @type {?} */\n      var doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateViewportSize\",\n    value: function _updateViewportSize() {\n      /** @type {?} */\n      var window = this._getWindow();\n\n      this._viewportSize = this._platform.isBrowser ? {\n        width: window.innerWidth,\n        height: window.innerHeight\n      } : {\n        width: 0,\n        height: 0\n      };\n    }\n  }]);\n\n  return ViewportRuler;\n}();\n\nViewportRuler.ɵfac = function ViewportRuler_Factory(t) {\n  return new (t || ViewportRuler)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT, 8));\n};\n/** @nocollapse */\n\n\nViewportRuler.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nViewportRuler.ɵprov = ɵɵdefineInjectable({\n  factory: function ViewportRuler_Factory() {\n    return new ViewportRuler(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8));\n  },\n  token: ViewportRuler,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ViewportRuler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Cached viewport dimensions.\n   * @type {?}\n   * @private\n   */\n  ViewportRuler.prototype._viewportSize;\n  /**\n   * Stream of viewport change events.\n   * @type {?}\n   * @private\n   */\n\n  ViewportRuler.prototype._change;\n  /**\n   * Subscription to streams that invalidate the cached viewport dimensions.\n   * @type {?}\n   * @private\n   */\n\n  ViewportRuler.prototype._invalidateCache;\n  /**\n   * Used to reference correct document/window\n   * @type {?}\n   * @protected\n   */\n\n  ViewportRuler.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  ViewportRuler.prototype._platform;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-viewport.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\n\n\nfunction rangesEqual(r1, r2) {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\n\n\nvar SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\n\nvar CdkVirtualScrollViewport = /*#__PURE__*/function (_CdkScrollable) {\n  _inherits(CdkVirtualScrollViewport, _CdkScrollable);\n\n  var _super = _createSuper(CdkVirtualScrollViewport);\n\n  /**\n   * @param {?} elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} ngZone\n   * @param {?} _scrollStrategy\n   * @param {?} dir\n   * @param {?} scrollDispatcher\n   * @param {?=} viewportRuler\n   */\n  function CdkVirtualScrollViewport(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher,\n  /**\n   * @deprecated `viewportRuler` parameter to become required.\n   * @breaking-change 11.0.0\n   */\n  viewportRuler) {\n    var _this8;\n\n    _classCallCheck(this, CdkVirtualScrollViewport);\n\n    _this8 = _super.call(this, elementRef, scrollDispatcher, ngZone, dir);\n    _this8.elementRef = elementRef;\n    _this8._changeDetectorRef = _changeDetectorRef;\n    _this8._scrollStrategy = _scrollStrategy;\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     */\n\n    _this8._detachedSubject = new Subject();\n    /**\n     * Emits when the rendered range changes.\n     */\n\n    _this8._renderedRangeSubject = new Subject();\n    _this8._orientation = 'vertical'; // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n    // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n    // depending on how the strategy calculates the scrolled index, it may come at a cost to\n    // performance.\n\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     */\n\n    _this8.scrolledIndexChange = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    function (observer) {\n      return _this8._scrollStrategy.scrolledIndexChange.subscribe(\n      /**\n      * @param {?} index\n      * @return {?}\n      */\n      function (index) {\n        return Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this8.ngZone.run(\n          /**\n          * @return {?}\n          */\n          function () {\n            return observer.next(index);\n          });\n        });\n      });\n    });\n    /**\n     * A stream that emits whenever the rendered range changes.\n     */\n\n    _this8.renderedRangeStream = _this8._renderedRangeSubject.asObservable();\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     */\n\n    _this8._totalContentSize = 0;\n    /**\n     * A string representing the `style.width` property value to be used for the spacer element.\n     */\n\n    _this8._totalContentWidth = '';\n    /**\n     * A string representing the `style.height` property value to be used for the spacer element.\n     */\n\n    _this8._totalContentHeight = '';\n    /**\n     * The currently rendered range of indices.\n     */\n\n    _this8._renderedRange = {\n      start: 0,\n      end: 0\n    };\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     */\n\n    _this8._dataLength = 0;\n    /**\n     * The size of the viewport (in pixels).\n     */\n\n    _this8._viewportSize = 0;\n    /**\n     * The last rendered content offset that was set.\n     */\n\n    _this8._renderedContentOffset = 0;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     */\n\n    _this8._renderedContentOffsetNeedsRewrite = false;\n    /**\n     * Whether there is a pending change detection cycle.\n     */\n\n    _this8._isChangeDetectionPending = false;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     */\n\n    _this8._runAfterChangeDetection = [];\n    /**\n     * Subscription to changes in the viewport size.\n     */\n\n    _this8._viewportChanges = Subscription.EMPTY;\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    } // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n\n\n    if (viewportRuler) {\n      _this8._viewportChanges = viewportRuler.change().subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this8.checkViewportSize();\n      });\n    }\n\n    return _this8;\n  }\n  /**\n   * The direction the viewport scrolls.\n   * @return {?}\n   */\n\n\n  _createClass(CdkVirtualScrollViewport, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnInit\", this).call(this); // It's still too early to measure the viewport at this point. Deferring with a promise allows\n      // the Viewport to be rendered with the correct size before we measure. We run this outside the\n      // zone to avoid causing more change detection cycles. We handle the change detection loop\n      // ourselves instead.\n\n\n      this.ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this9._measureViewportSize();\n\n          _this9._scrollStrategy.attach(_this9);\n\n          _this9.elementScrolled().pipe( // Start off with a fake scroll event so we properly detect our initial position.\n          startWith(\n          /** @type {?} */\n          null), // Collect multiple events into one until the next animation frame. This way if\n          // there are multiple scroll events in the same frame we only need to recheck\n          // our layout once.\n          auditTime(0, SCROLL_SCHEDULER)).subscribe(\n          /**\n          * @return {?}\n          */\n          function () {\n            return _this9._scrollStrategy.onContentScrolled();\n          });\n\n          _this9._markChangeDetectionNeeded();\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.detach();\n\n      this._scrollStrategy.detach(); // Complete all subjects\n\n\n      this._renderedRangeSubject.complete();\n\n      this._detachedSubject.complete();\n\n      this._viewportChanges.unsubscribe();\n\n      _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"ngOnDestroy\", this).call(this);\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n\n  }, {\n    key: \"attach\",\n    value: function attach(forOf) {\n      var _this10 = this;\n\n      if (this._forOf) {\n        throw Error('CdkVirtualScrollViewport is already attached.');\n      } // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n      // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n      // change detection loop ourselves.\n\n\n      this.ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this10._forOf = forOf;\n\n        _this10._forOf.dataStream.pipe(takeUntil(_this10._detachedSubject)).subscribe(\n        /**\n        * @param {?} data\n        * @return {?}\n        */\n        function (data) {\n          /** @type {?} */\n          var newLength = data.length;\n\n          if (newLength !== _this10._dataLength) {\n            _this10._dataLength = newLength;\n\n            _this10._scrollStrategy.onDataLengthChanged();\n          }\n\n          _this10._doChangeDetection();\n        });\n      });\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this._forOf = null;\n\n      this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDataLength\",\n    value: function getDataLength() {\n      return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n\n  }, {\n    key: \"getViewportSize\",\n    value: function getViewportSize() {\n      return this._viewportSize;\n    } // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n\n  }, {\n    key: \"getRenderedRange\",\n    value: function getRenderedRange() {\n      return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n\n  }, {\n    key: \"setTotalContentSize\",\n    value: function setTotalContentSize(size) {\n      if (this._totalContentSize !== size) {\n        this._totalContentSize = size;\n\n        this._calculateSpacerSize();\n\n        this._markChangeDetectionNeeded();\n      }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRenderedRange\",\n    value: function setRenderedRange(range) {\n      var _this11 = this;\n\n      if (!rangesEqual(this._renderedRange, range)) {\n        this._renderedRangeSubject.next(this._renderedRange = range);\n\n        this._markChangeDetectionNeeded(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this11._scrollStrategy.onContentRendered();\n        });\n      }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n\n  }, {\n    key: \"getOffsetToRenderedContentStart\",\n    value: function getOffsetToRenderedContentStart() {\n      return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n\n  }, {\n    key: \"setRenderedContentOffset\",\n    value: function setRenderedContentOffset(offset) {\n      var _this12 = this;\n\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'to-start';\n      // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n      // in the negative direction.\n\n      /** @type {?} */\n      var isRtl = this.dir && this.dir.value == 'rtl';\n      /** @type {?} */\n\n      var isHorizontal = this.orientation == 'horizontal';\n      /** @type {?} */\n\n      var axis = isHorizontal ? 'X' : 'Y';\n      /** @type {?} */\n\n      var axisDirection = isHorizontal && isRtl ? -1 : 1;\n      /** @type {?} */\n\n      var transform = \"translate\".concat(axis, \"(\").concat(Number(axisDirection * offset), \"px)\");\n      this._renderedContentOffset = offset;\n\n      if (to === 'to-end') {\n        transform += \" translate\".concat(axis, \"(-100%)\"); // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n        // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n        // expand upward).\n\n        this._renderedContentOffsetNeedsRewrite = true;\n      }\n\n      if (this._renderedContentTransform != transform) {\n        // We know this value is safe because we parse `offset` with `Number()` before passing it\n        // into the string.\n        this._renderedContentTransform = transform;\n\n        this._markChangeDetectionNeeded(\n        /**\n        * @return {?}\n        */\n        function () {\n          if (_this12._renderedContentOffsetNeedsRewrite) {\n            _this12._renderedContentOffset -= _this12.measureRenderedContentSize();\n            _this12._renderedContentOffsetNeedsRewrite = false;\n\n            _this12.setRenderedContentOffset(_this12._renderedContentOffset);\n          } else {\n            _this12._scrollStrategy.onRenderedOffsetChanged();\n          }\n        });\n      }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(offset) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      /** @type {?} */\n      var options = {\n        behavior: behavior\n      };\n\n      if (this.orientation === 'horizontal') {\n        options.start = offset;\n      } else {\n        options.top = offset;\n      }\n\n      this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      var behavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'auto';\n\n      this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureScrollOffset\",\n    value: function measureScrollOffset(from) {\n      return from ? _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, from) : _get(_getPrototypeOf(CdkVirtualScrollViewport.prototype), \"measureScrollOffset\", this).call(this, this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureRenderedContentSize\",\n    value: function measureRenderedContentSize() {\n      /** @type {?} */\n      var contentEl = this._contentWrapper.nativeElement;\n      return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n\n  }, {\n    key: \"measureRangeSize\",\n    value: function measureRangeSize(range) {\n      if (!this._forOf) {\n        return 0;\n      }\n\n      return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n\n  }, {\n    key: \"checkViewportSize\",\n    value: function checkViewportSize() {\n      // TODO: Cleanup later when add logic for handling content resize\n      this._measureViewportSize();\n\n      this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_measureViewportSize\",\n    value: function _measureViewportSize() {\n      /** @type {?} */\n      var viewportEl = this.elementRef.nativeElement;\n      this._viewportSize = this.orientation === 'horizontal' ? viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markChangeDetectionNeeded\",\n    value: function _markChangeDetectionNeeded(runAfter) {\n      var _this13 = this;\n\n      if (runAfter) {\n        this._runAfterChangeDetection.push(runAfter);\n      } // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n      // properties sequentially we only have to run `_doChangeDetection` once at the end.\n\n\n      if (!this._isChangeDetectionPending) {\n        this._isChangeDetectionPending = true;\n        this.ngZone.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          return Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          function () {\n            _this13._doChangeDetection();\n          });\n        });\n      }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_doChangeDetection\",\n    value: function _doChangeDetection() {\n      var _this14 = this;\n\n      this._isChangeDetectionPending = false; // Apply the content transform. The transform can't be set via an Angular binding because\n      // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n      // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n      // the `Number` function first to coerce it to a numeric value.\n\n      this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform; // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n      // from the root, since the repeated items are content projected in. Calling `detectChanges`\n      // instead does not properly check the projected content.\n\n      this.ngZone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this14._changeDetectorRef.markForCheck();\n      });\n      /** @type {?} */\n\n      var runAfterChangeDetection = this._runAfterChangeDetection;\n      this._runAfterChangeDetection = [];\n\n      var _iterator = _createForOfIteratorHelper(runAfterChangeDetection),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var fn = _step.value;\n          fn();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_calculateSpacerSize\",\n    value: function _calculateSpacerSize() {\n      this._totalContentHeight = this.orientation === 'horizontal' ? '' : \"\".concat(this._totalContentSize, \"px\");\n      this._totalContentWidth = this.orientation === 'horizontal' ? \"\".concat(this._totalContentSize, \"px\") : '';\n    }\n  }, {\n    key: \"orientation\",\n    get: function get() {\n      return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    ,\n    set: function set(orientation) {\n      if (this._orientation !== orientation) {\n        this._orientation = orientation;\n\n        this._calculateSpacerSize();\n      }\n    }\n  }]);\n\n  return CdkVirtualScrollViewport;\n}(CdkScrollable);\n\nCdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t) {\n  return new (t || CdkVirtualScrollViewport)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ViewportRuler, 8));\n};\n\nCdkVirtualScrollViewport.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CdkVirtualScrollViewport,\n  selectors: [[\"cdk-virtual-scroll-viewport\"]],\n  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-virtual-scroll-viewport\"],\n  hostVars: 4,\n  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"cdk-virtual-scroll-orientation-horizontal\", ctx.orientation === \"horizontal\")(\"cdk-virtual-scroll-orientation-vertical\", ctx.orientation !== \"horizontal\");\n    }\n  },\n  inputs: {\n    orientation: \"orientation\"\n  },\n  outputs: {\n    scrolledIndexChange: \"scrolledIndexChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 4,\n  consts: [[1, \"cdk-virtual-scroll-content-wrapper\"], [\"contentWrapper\", \"\"], [1, \"cdk-virtual-scroll-spacer\"]],\n  template: function CdkVirtualScrollViewport_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵstyleProp(\"width\", ctx._totalContentWidth)(\"height\", ctx._totalContentHeight);\n    }\n  },\n  styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkVirtualScrollViewport.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [VIRTUAL_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewportRuler,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nCdkVirtualScrollViewport.propDecorators = {\n  orientation: [{\n    type: Input\n  }],\n  scrolledIndexChange: [{\n    type: Output\n  }],\n  _contentWrapper: [{\n    type: ViewChild,\n    args: ['contentWrapper', {\n      static: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkVirtualScrollViewport, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-virtual-scroll-viewport',\n      template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n      host: {\n        'class': 'cdk-virtual-scroll-viewport',\n        '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n        '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [{\n        provide: CdkScrollable,\n        useExisting: CdkVirtualScrollViewport\n      }],\n      styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [VIRTUAL_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ScrollDispatcher\n    }, {\n      type: ViewportRuler,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    scrolledIndexChange: [{\n      type: Output\n    }],\n    orientation: [{\n      type: Input\n    }],\n    _contentWrapper: [{\n      type: ViewChild,\n      args: ['contentWrapper', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Emits when the viewport is detached from a CdkVirtualForOf.\n   * @type {?}\n   * @private\n   */\n  CdkVirtualScrollViewport.prototype._detachedSubject;\n  /**\n   * Emits when the rendered range changes.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._renderedRangeSubject;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._orientation;\n  /**\n   * Emits when the index of the first element visible in the viewport changes.\n   * @type {?}\n   */\n\n  CdkVirtualScrollViewport.prototype.scrolledIndexChange;\n  /**\n   * The element that wraps the rendered content.\n   * @type {?}\n   */\n\n  CdkVirtualScrollViewport.prototype._contentWrapper;\n  /**\n   * A stream that emits whenever the rendered range changes.\n   * @type {?}\n   */\n\n  CdkVirtualScrollViewport.prototype.renderedRangeStream;\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._totalContentSize;\n  /**\n   * A string representing the `style.width` property value to be used for the spacer element.\n   * @type {?}\n   */\n\n  CdkVirtualScrollViewport.prototype._totalContentWidth;\n  /**\n   * A string representing the `style.height` property value to be used for the spacer element.\n   * @type {?}\n   */\n\n  CdkVirtualScrollViewport.prototype._totalContentHeight;\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._renderedContentTransform;\n  /**\n   * The currently rendered range of indices.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._renderedRange;\n  /**\n   * The length of the data bound to this viewport (in number of items).\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._dataLength;\n  /**\n   * The size of the viewport (in pixels).\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._viewportSize;\n  /**\n   * the currently attached CdkVirtualForOf.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._forOf;\n  /**\n   * The last rendered content offset that was set.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._renderedContentOffset;\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._renderedContentOffsetNeedsRewrite;\n  /**\n   * Whether there is a pending change detection cycle.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._isChangeDetectionPending;\n  /**\n   * A list of functions to run after the next change detection cycle.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._runAfterChangeDetection;\n  /**\n   * Subscription to changes in the viewport size.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._viewportChanges;\n  /** @type {?} */\n\n  CdkVirtualScrollViewport.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualScrollViewport.prototype._scrollStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-for-of.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\n\n\nfunction getSize(orientation, node) {\n  /** @type {?} */\n  var el =\n  /** @type {?} */\n  node;\n\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  /** @type {?} */\n\n\n  var rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\n\n\nvar CdkVirtualForOf = /*#__PURE__*/function () {\n  /**\n   * @param {?} _viewContainerRef\n   * @param {?} _template\n   * @param {?} _differs\n   * @param {?} _viewport\n   * @param {?} ngZone\n   */\n  function CdkVirtualForOf(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n    var _this15 = this;\n\n    _classCallCheck(this, CdkVirtualForOf);\n\n    this._viewContainerRef = _viewContainerRef;\n    this._template = _template;\n    this._differs = _differs;\n    this._viewport = _viewport;\n    /**\n     * Emits when the rendered view of the data changes.\n     */\n\n    this.viewChange = new Subject();\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     */\n\n    this._dataSourceChanges = new Subject();\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n\n    this.cdkVirtualForTemplateCacheSize = 20;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     */\n\n    this.dataStream = this._dataSourceChanges.pipe( // Start off with null `DataSource`.\n    startWith(\n    /** @type {?} */\n    null), // Bundle up the previous and current data sources so we can work with both.\n    pairwise(), // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n    // new one, passing back a stream of data changes which we run through `switchMap` to give\n    // us a data stream that emits the latest data from whatever the current `DataSource` is.\n    switchMap(\n    /**\n    * @param {?} __0\n    * @return {?}\n    */\n    function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          prev = _ref2[0],\n          cur = _ref2[1];\n\n      return _this15._changeDataSource(prev, cur);\n    }), // Replay the last emitted data when someone subscribes.\n    shareReplay(1));\n    /**\n     * The differ used to calculate changes to the data.\n     */\n\n    this._differ = null;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     */\n\n    this._templateCache = [];\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     */\n\n    this._needsUpdate = false;\n    this._destroyed = new Subject();\n    this.dataStream.subscribe(\n    /**\n    * @param {?} data\n    * @return {?}\n    */\n    function (data) {\n      _this15._data = data;\n\n      _this15._onRenderedDataChange();\n    });\n\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(\n    /**\n    * @param {?} range\n    * @return {?}\n    */\n    function (range) {\n      _this15._renderedRange = range;\n      ngZone.run(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this15.viewChange.next(_this15._renderedRange);\n      });\n\n      _this15._onRenderedDataChange();\n    });\n\n    this._viewport.attach(this);\n  }\n  /**\n   * The DataSource to display.\n   * @return {?}\n   */\n\n\n  _createClass(CdkVirtualForOf, [{\n    key: \"measureRangeSize\",\n\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    value: function measureRangeSize(range, orientation) {\n      if (range.start >= range.end) {\n        return 0;\n      }\n\n      if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n        throw Error(\"Error: attempted to measure an item that isn't rendered.\");\n      } // The index into the list of rendered views for the first item in the range.\n\n      /** @type {?} */\n\n\n      var renderedStartIndex = range.start - this._renderedRange.start; // The length of the range we're measuring.\n\n      /** @type {?} */\n\n      var rangeLen = range.end - range.start; // Loop over all root nodes for all items in the range and sum up their size.\n\n      /** @type {?} */\n\n      var totalSize = 0;\n      /** @type {?} */\n\n      var i = rangeLen;\n\n      while (i--) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        this._viewContainerRef.get(i + renderedStartIndex);\n        /** @type {?} */\n\n\n        var j = view ? view.rootNodes.length : 0;\n\n        while (j--) {\n          totalSize += getSize(orientation,\n          /** @type {?} */\n          view.rootNodes[j]);\n        }\n      }\n\n      return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._differ && this._needsUpdate) {\n        // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n        // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n        // changing (need to do this diff).\n\n        /** @type {?} */\n        var changes = this._differ.diff(this._renderedItems);\n\n        if (!changes) {\n          this._updateContext();\n        } else {\n          this._applyChanges(changes);\n        }\n\n        this._needsUpdate = false;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._viewport.detach();\n\n      this._dataSourceChanges.next();\n\n      this._dataSourceChanges.complete();\n\n      this.viewChange.complete();\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      var _iterator2 = _createForOfIteratorHelper(this._templateCache),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.destroy();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onRenderedDataChange\",\n    value: function _onRenderedDataChange() {\n      if (!this._renderedRange) {\n        return;\n      }\n\n      this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n\n      if (!this._differ) {\n        this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n      }\n\n      this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n\n  }, {\n    key: \"_changeDataSource\",\n    value: function _changeDataSource(oldDs, newDs) {\n      if (oldDs) {\n        oldDs.disconnect(this);\n      }\n\n      this._needsUpdate = true;\n      return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateContext\",\n    value: function _updateContext() {\n      /** @type {?} */\n      var count = this._data.length;\n      /** @type {?} */\n\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n\n        view.detectChanges();\n      }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applyChanges\",\n    value: function _applyChanges(changes) {\n      var _this16 = this;\n\n      // Rearrange the views to put them in the right location.\n      changes.forEachOperation(\n      /**\n      * @param {?} record\n      * @param {?} adjustedPreviousIndex\n      * @param {?} currentIndex\n      * @return {?}\n      */\n      function (record, adjustedPreviousIndex, currentIndex) {\n        if (record.previousIndex == null) {\n          // Item added.\n          // Item added.\n\n          /** @type {?} */\n          var view = _this16._insertViewForNewItem(\n          /** @type {?} */\n          currentIndex);\n\n          view.context.$implicit = record.item;\n        } else if (currentIndex == null) {\n          // Item removed.\n          _this16._cacheView(_this16._detachView(\n          /** @type {?} */\n          adjustedPreviousIndex));\n        } else {\n          // Item moved.\n          // Item moved.\n\n          /** @type {?} */\n          var _view =\n          /** @type {?} */\n          _this16._viewContainerRef.get(\n          /** @type {?} */\n          adjustedPreviousIndex);\n\n          _this16._viewContainerRef.move(_view, currentIndex);\n\n          _view.context.$implicit = record.item;\n        }\n      }); // Update $implicit for any items that had an identity change.\n\n      changes.forEachIdentityChange(\n      /**\n      * @param {?} record\n      * @return {?}\n      */\n      function (record) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        _this16._viewContainerRef.get(\n        /** @type {?} */\n        record.currentIndex);\n\n        view.context.$implicit = record.item;\n      }); // Update the context variables on all items.\n\n      /** @type {?} */\n\n      var count = this._data.length;\n      /** @type {?} */\n\n      var i = this._viewContainerRef.length;\n\n      while (i--) {\n        /** @type {?} */\n        var view =\n        /** @type {?} */\n        this._viewContainerRef.get(i);\n\n        view.context.index = this._renderedRange.start + i;\n        view.context.count = count;\n\n        this._updateComputedContextProperties(view.context);\n      }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n\n  }, {\n    key: \"_cacheView\",\n    value: function _cacheView(view) {\n      if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n        this._templateCache.push(view);\n      } else {\n        /** @type {?} */\n        var index = this._viewContainerRef.indexOf(view); // It's very unlikely that the index will ever be -1, but just in case,\n        // destroy the view on its own, otherwise destroy it through the\n        // container to ensure that all the references are removed.\n\n\n        if (index === -1) {\n          view.destroy();\n        } else {\n          this._viewContainerRef.remove(index);\n        }\n      }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_insertViewForNewItem\",\n    value: function _insertViewForNewItem(index) {\n      return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateComputedContextProperties\",\n    value: function _updateComputedContextProperties(context) {\n      context.first = context.index === 0;\n      context.last = context.index === context.count - 1;\n      context.even = context.index % 2 === 0;\n      context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createEmbeddedViewAt\",\n    value: function _createEmbeddedViewAt(index) {\n      // Note that it's important that we insert the item directly at the proper index,\n      // rather than inserting it and the moving it in place, because if there's a directive\n      // on the same node that injects the `ViewContainerRef`, Angular will insert another\n      // comment node which can throw off the move when it's being repeated for all items.\n      return this._viewContainerRef.createEmbeddedView(this._template, {\n        $implicit:\n        /** @type {?} */\n        null,\n        // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n        // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n        cdkVirtualForOf:\n        /** @type {?} */\n        this._cdkVirtualForOf,\n        index: -1,\n        count: -1,\n        first: false,\n        last: false,\n        odd: false,\n        even: false\n      }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_insertViewFromCache\",\n    value: function _insertViewFromCache(index) {\n      /** @type {?} */\n      var cachedView = this._templateCache.pop();\n\n      if (cachedView) {\n        this._viewContainerRef.insert(cachedView, index);\n      }\n\n      return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n\n  }, {\n    key: \"_detachView\",\n    value: function _detachView(index) {\n      return (\n        /** @type {?} */\n        this._viewContainerRef.detach(index)\n      );\n    }\n  }, {\n    key: \"cdkVirtualForOf\",\n    get: function get() {\n      return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._cdkVirtualForOf = value;\n\n      if (isDataSource(value)) {\n        this._dataSourceChanges.next(value);\n      } else {\n        // Slice the value if its an NgIterable to ensure we're working with an array.\n        this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n      }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n\n  }, {\n    key: \"cdkVirtualForTrackBy\",\n    get: function get() {\n      return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      var _this17 = this;\n\n      this._needsUpdate = true;\n      this._cdkVirtualForTrackBy = fn ?\n      /**\n      * @param {?} index\n      * @param {?} item\n      * @return {?}\n      */\n      function (index, item) {\n        return fn(index + (_this17._renderedRange ? _this17._renderedRange.start : 0), item);\n      } : undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"cdkVirtualForTemplate\",\n    set: function set(value) {\n      if (value) {\n        this._needsUpdate = true;\n        this._template = value;\n      }\n    }\n  }]);\n\n  return CdkVirtualForOf;\n}();\n\nCdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t) {\n  return new (t || CdkVirtualForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkVirtualForOf.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: CdkVirtualForOf,\n  selectors: [[\"\", \"cdkVirtualFor\", \"\", \"cdkVirtualForOf\", \"\"]],\n  inputs: {\n    cdkVirtualForTemplateCacheSize: \"cdkVirtualForTemplateCacheSize\",\n    cdkVirtualForOf: \"cdkVirtualForOf\",\n    cdkVirtualForTrackBy: \"cdkVirtualForTrackBy\",\n    cdkVirtualForTemplate: \"cdkVirtualForTemplate\"\n  }\n});\n/** @nocollapse */\n\nCdkVirtualForOf.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: TemplateRef\n  }, {\n    type: IterableDiffers\n  }, {\n    type: CdkVirtualScrollViewport,\n    decorators: [{\n      type: SkipSelf\n    }]\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkVirtualForOf.propDecorators = {\n  cdkVirtualForOf: [{\n    type: Input\n  }],\n  cdkVirtualForTrackBy: [{\n    type: Input\n  }],\n  cdkVirtualForTemplate: [{\n    type: Input\n  }],\n  cdkVirtualForTemplateCacheSize: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkVirtualForOf, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkVirtualFor][cdkVirtualForOf]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: CdkVirtualScrollViewport,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    cdkVirtualForTemplateCacheSize: [{\n      type: Input\n    }],\n    cdkVirtualForOf: [{\n      type: Input\n    }],\n    cdkVirtualForTrackBy: [{\n      type: Input\n    }],\n    cdkVirtualForTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Emits when the rendered view of the data changes.\n   * @type {?}\n   */\n  CdkVirtualForOf.prototype.viewChange;\n  /**\n   * Subject that emits when a new DataSource instance is given.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._dataSourceChanges;\n  /** @type {?} */\n\n  CdkVirtualForOf.prototype._cdkVirtualForOf;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._cdkVirtualForTrackBy;\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   * @type {?}\n   */\n\n  CdkVirtualForOf.prototype.cdkVirtualForTemplateCacheSize;\n  /**\n   * Emits whenever the data in the current DataSource changes.\n   * @type {?}\n   */\n\n  CdkVirtualForOf.prototype.dataStream;\n  /**\n   * The differ used to calculate changes to the data.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._differ;\n  /**\n   * The most recent data emitted from the DataSource.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._data;\n  /**\n   * The currently rendered items.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._renderedItems;\n  /**\n   * The currently rendered range of indices.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._renderedRange;\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._templateCache;\n  /**\n   * Whether the rendered data should be updated during the next ngDoCheck cycle.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._needsUpdate;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._destroyed;\n  /**\n   * The view container to add items to.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._viewContainerRef;\n  /**\n   * The template to use when stamping out new items.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._template;\n  /**\n   * The set of available differs.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._differs;\n  /**\n   * The virtual scrolling viewport that these items are being rendered in.\n   * @type {?}\n   * @private\n   */\n\n  CdkVirtualForOf.prototype._viewport;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrolling-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar CdkScrollableModule = function CdkScrollableModule() {\n  _classCallCheck(this, CdkScrollableModule);\n};\n\nCdkScrollableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CdkScrollableModule\n});\nCdkScrollableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CdkScrollableModule_Factory(t) {\n    return new (t || CdkScrollableModule)();\n  }\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkScrollableModule, {\n    declarations: [CdkScrollable],\n    exports: [CdkScrollable]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CdkScrollableModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkScrollable],\n      declarations: [CdkScrollable]\n    }]\n  }], null, null);\n})();\n\nvar ScrollingModule = function ScrollingModule() {\n  _classCallCheck(this, ScrollingModule);\n};\n\nScrollingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ScrollingModule\n});\nScrollingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ScrollingModule_Factory(t) {\n    return new (t || ScrollingModule)();\n  },\n  imports: [[BidiModule, PlatformModule, CdkScrollableModule], BidiModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ScrollingModule, {\n    declarations: function declarations() {\n      return [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    },\n    imports: function imports() {\n      return [BidiModule, PlatformModule, CdkScrollableModule];\n    },\n    exports: function exports() {\n      return [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ScrollingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [BidiModule, PlatformModule, CdkScrollableModule],\n      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport],\n      declarations: [CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };","map":{"version":3,"sources":["../../../../../cdk/scrolling/virtual-scroll-strategy.ts","../../../../../cdk/scrolling/fixed-size-virtual-scroll.ts","../../../../../cdk/scrolling/scroll-dispatcher.ts","../../../../../cdk/scrolling/scrollable.ts","../../../../../cdk/scrolling/viewport-ruler.ts","../../../../../cdk/scrolling/virtual-scroll-viewport.ts","../../../../../cdk/scrolling/virtual-for-of.ts","../../../../../cdk/scrolling/scrolling-module.ts","../../../../../cdk/scrolling/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The injection token used to specify the virtual scrolling strategy. */\nexport const VIRTUAL_SCROLL_STRATEGY =\n    new InjectionToken<VirtualScrollStrategy>('VIRTUAL_SCROLL_STRATEGY');\n\n\n/** A strategy that dictates which items should be rendered in the viewport. */\nexport interface VirtualScrollStrategy {\n  /** Emits when the index of the first element visible in the viewport changes. */\n  scrolledIndexChange: Observable<number>;\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport): void;\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach(): void;\n\n  /** Called when the viewport is scrolled (debounced using requestAnimationFrame). */\n  onContentScrolled(): void;\n\n  /** Called when the length of the data changes. */\n  onDataLengthChanged(): void;\n\n  /** Called when the range of items rendered in the DOM has changed. */\n  onContentRendered(): void;\n\n  /** Called when the offset of the rendered items changed. */\n  onRenderedOffsetChanged(): void;\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {Directive, forwardRef, Input, OnChanges} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {distinctUntilChanged} from 'rxjs/operators';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n  private _scrolledIndexChange = new Subject<number>();\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  scrolledIndexChange: Observable<number> = this._scrolledIndexChange.pipe(distinctUntilChanged());\n\n  /** The attached viewport. */\n  private _viewport: CdkVirtualScrollViewport | null = null;\n\n  /** The size of the items in the virtually scrolling list. */\n  private _itemSize: number;\n\n  /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n  private _minBufferPx: number;\n\n  /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n  private _maxBufferPx: number;\n\n  /**\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  constructor(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n  }\n\n  /**\n   * Attaches this scroll strategy to a viewport.\n   * @param viewport The viewport to attach this strategy to.\n   */\n  attach(viewport: CdkVirtualScrollViewport) {\n    this._viewport = viewport;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** Detaches this scroll strategy from the currently attached viewport. */\n  detach() {\n    this._scrolledIndexChange.complete();\n    this._viewport = null;\n  }\n\n  /**\n   * Update the item size and buffer size.\n   * @param itemSize The size of the items in the virtually scrolling list.\n   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n   */\n  updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number) {\n    if (maxBufferPx < minBufferPx) {\n      throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n    }\n    this._itemSize = itemSize;\n    this._minBufferPx = minBufferPx;\n    this._maxBufferPx = maxBufferPx;\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentScrolled() {\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onDataLengthChanged() {\n    this._updateTotalContentSize();\n    this._updateRenderedRange();\n  }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onContentRendered() { /* no-op */ }\n\n  /** @docs-private Implemented as part of VirtualScrollStrategy. */\n  onRenderedOffsetChanged() { /* no-op */ }\n\n  /**\n   * Scroll to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling.\n   */\n  scrollToIndex(index: number, behavior: ScrollBehavior): void {\n    if (this._viewport) {\n      this._viewport.scrollToOffset(index * this._itemSize, behavior);\n    }\n  }\n\n  /** Update the viewport's total content size. */\n  private _updateTotalContentSize() {\n    if (!this._viewport) {\n      return;\n    }\n\n    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n  }\n\n  /** Update the viewport's rendered range. */\n  private _updateRenderedRange() {\n    if (!this._viewport) {\n      return;\n    }\n\n    const scrollOffset = this._viewport.measureScrollOffset();\n    const firstVisibleIndex = scrollOffset / this._itemSize;\n    const renderedRange = this._viewport.getRenderedRange();\n    const newRange = {start: renderedRange.start, end: renderedRange.end};\n    const viewportSize = this._viewport.getViewportSize();\n    const dataLength = this._viewport.getDataLength();\n\n    const startBuffer = scrollOffset - newRange.start * this._itemSize;\n    if (startBuffer < this._minBufferPx && newRange.start != 0) {\n      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n      newRange.start = Math.max(0, newRange.start - expandStart);\n      newRange.end = Math.min(dataLength,\n          Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n    } else {\n      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n        if (expandEnd > 0) {\n          newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n          newRange.start = Math.max(0,\n              Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n        }\n      }\n    }\n\n    this._viewport.setRenderedRange(newRange);\n    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n  }\n}\n\n\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll) {\n  return fixedSizeDir._scrollStrategy;\n}\n\n\n/** A virtual scroll strategy that supports fixed-size items. */\n@Directive({\n  selector: 'cdk-virtual-scroll-viewport[itemSize]',\n  providers: [{\n    provide: VIRTUAL_SCROLL_STRATEGY,\n    useFactory: _fixedSizeVirtualScrollStrategyFactory,\n    deps: [forwardRef(() => CdkFixedSizeVirtualScroll)],\n  }],\n})\nexport class CdkFixedSizeVirtualScroll implements OnChanges {\n  /** The size of the items in the list (in pixels). */\n  @Input()\n  get itemSize(): number { return this._itemSize; }\n  set itemSize(value: number) { this._itemSize = coerceNumberProperty(value); }\n  _itemSize = 20;\n\n  /**\n   * The minimum amount of buffer rendered beyond the viewport (in pixels).\n   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n   */\n  @Input()\n  get minBufferPx(): number { return this._minBufferPx; }\n  set minBufferPx(value: number) { this._minBufferPx = coerceNumberProperty(value); }\n  _minBufferPx = 100;\n\n  /**\n   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n   */\n  @Input()\n  get maxBufferPx(): number { return this._maxBufferPx; }\n  set maxBufferPx(value: number) { this._maxBufferPx = coerceNumberProperty(value); }\n  _maxBufferPx = 200;\n\n  /** The scroll strategy used by this directive. */\n  _scrollStrategy =\n      new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n\n  ngOnChanges() {\n    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n  }\n\n  static ngAcceptInputType_itemSize: NumberInput;\n  static ngAcceptInputType_minBufferPx: NumberInput;\n  static ngAcceptInputType_maxBufferPx: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ElementRef, Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {fromEvent, of as observableOf, Subject, Subscription, Observable, Observer} from 'rxjs';\nimport {auditTime, filter} from 'rxjs/operators';\nimport {CdkScrollable} from './scrollable';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the scrolling events by default. */\nexport const DEFAULT_SCROLL_TIME = 20;\n\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollDispatcher implements OnDestroy {\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(private _ngZone: NgZone,\n              private _platform: Platform,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n  }\n\n  /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n  private _scrolled = new Subject<CdkScrollable|void>();\n\n  /** Keeps track of the global `scroll` and `resize` subscriptions. */\n  _globalSubscription: Subscription | null = null;\n\n  /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n  private _scrolledCount = 0;\n\n  /**\n   * Map of all the scrollable references that are registered with the service and their\n   * scroll event subscriptions.\n   */\n  scrollContainers: Map<CdkScrollable, Subscription> = new Map();\n\n  /**\n   * Registers a scrollable instance with the service and listens for its scrolled events. When the\n   * scrollable is scrolled, the service emits the event to its scrolled observable.\n   * @param scrollable Scrollable instance to be registered.\n   */\n  register(scrollable: CdkScrollable): void {\n    if (!this.scrollContainers.has(scrollable)) {\n      this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n          .subscribe(() => this._scrolled.next(scrollable)));\n    }\n  }\n\n  /**\n   * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n   * @param scrollable Scrollable instance to be deregistered.\n   */\n  deregister(scrollable: CdkScrollable): void {\n    const scrollableReference = this.scrollContainers.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollContainers.delete(scrollable);\n    }\n  }\n\n  /**\n   * Returns an observable that emits an event whenever any of the registered Scrollable\n   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n   * to override the default \"throttle\" time.\n   *\n   * **Note:** in order to avoid hitting change detection for every scroll event,\n   * all of the events emitted from this stream will be run outside the Angular zone.\n   * If you need to update any data bindings as a result of a scroll event, you have\n   * to run the callback using `NgZone.run`.\n   */\n  scrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME): Observable<CdkScrollable|void> {\n    if (!this._platform.isBrowser) {\n      return observableOf<void>();\n    }\n\n    return new Observable((observer: Observer<CdkScrollable|void>) => {\n      if (!this._globalSubscription) {\n        this._addGlobalListener();\n      }\n\n      // In the case of a 0ms delay, use an observable without auditTime\n      // since it does add a perceptible delay in processing overhead.\n      const subscription = auditTimeInMs > 0 ?\n        this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n        this._scrolled.subscribe(observer);\n\n      this._scrolledCount++;\n\n      return () => {\n        subscription.unsubscribe();\n        this._scrolledCount--;\n\n        if (!this._scrolledCount) {\n          this._removeGlobalListener();\n        }\n      };\n    });\n  }\n\n  ngOnDestroy() {\n    this._removeGlobalListener();\n    this.scrollContainers.forEach((_, container) => this.deregister(container));\n    this._scrolled.complete();\n  }\n\n  /**\n   * Returns an observable that emits whenever any of the\n   * scrollable ancestors of an element are scrolled.\n   * @param elementRef Element whose ancestors to listen for.\n   * @param auditTimeInMs Time to throttle the scroll events.\n   */\n  ancestorScrolled(elementRef: ElementRef, auditTimeInMs?: number): Observable<CdkScrollable|void> {\n    const ancestors = this.getAncestorScrollContainers(elementRef);\n\n    return this.scrolled(auditTimeInMs).pipe(filter(target => {\n      return !target || ancestors.indexOf(target) > -1;\n    }));\n  }\n\n  /** Returns all registered Scrollables that contain the provided element. */\n  getAncestorScrollContainers(elementRef: ElementRef): CdkScrollable[] {\n    const scrollingContainers: CdkScrollable[] = [];\n\n    this.scrollContainers.forEach((_subscription: Subscription, scrollable: CdkScrollable) => {\n      if (this._scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /** Returns true if the element is contained within the provided Scrollable. */\n  private _scrollableContainsElement(scrollable: CdkScrollable, elementRef: ElementRef): boolean {\n    let element: HTMLElement | null = elementRef.nativeElement;\n    let scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element!.parentElement);\n\n    return false;\n  }\n\n  /** Sets up the global scroll listeners. */\n  private _addGlobalListener() {\n    this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n      return fromEvent(window.document, 'scroll').subscribe(() => this._scrolled.next());\n    });\n  }\n\n  /** Cleans up the global scroll listener. */\n  private _removeGlobalListener() {\n    if (this._globalSubscription) {\n      this._globalSubscription.unsubscribe();\n      this._globalSubscription = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  getRtlScrollAxisType,\n  RtlScrollAxisType,\n  supportsScrollBehavior\n} from '@angular/cdk/platform';\nimport {Directive, ElementRef, NgZone, OnDestroy, OnInit, Optional} from '@angular/core';\nimport {fromEvent, Observable, Subject, Observer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n\nexport type _Without<T> = {[P in keyof T]?: never};\nexport type _XOR<T, U> = (_Without<T> & U) | (_Without<U> & T);\nexport type _Top = {top?: number};\nexport type _Bottom = {bottom?: number};\nexport type _Left = {left?: number};\nexport type _Right = {right?: number};\nexport type _Start = {start?: number};\nexport type _End = {end?: number};\nexport type _XAxis = _XOR<_XOR<_Left, _Right>, _XOR<_Start, _End>>;\nexport type _YAxis = _XOR<_Top, _Bottom>;\n\n/**\n * An extended version of ScrollToOptions that allows expressing scroll offsets relative to the\n * top, bottom, left, right, start, or end of the viewport rather than just the top and left.\n * Please note: the top and bottom properties are mutually exclusive, as are the left, right,\n * start, and end properties.\n */\nexport type ExtendedScrollToOptions = _XAxis & _YAxis & ScrollOptions;\n\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\n@Directive({\n  selector: '[cdk-scrollable], [cdkScrollable]'\n})\nexport class CdkScrollable implements OnInit, OnDestroy {\n  private _destroyed = new Subject();\n\n  private _elementScrolled: Observable<Event> = new Observable((observer: Observer<Event>) =>\n      this.ngZone.runOutsideAngular(() =>\n          fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n              .subscribe(observer)));\n\n  constructor(protected elementRef: ElementRef<HTMLElement>,\n              protected scrollDispatcher: ScrollDispatcher,\n              protected ngZone: NgZone,\n              @Optional() protected dir?: Directionality) {}\n\n  ngOnInit() {\n    this.scrollDispatcher.register(this);\n  }\n\n  ngOnDestroy() {\n    this.scrollDispatcher.deregister(this);\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Returns observable that emits when a scroll event is fired on the host element. */\n  elementScrolled(): Observable<Event> {\n    return this._elementScrolled;\n  }\n\n  /** Gets the ElementRef for the viewport. */\n  getElementRef(): ElementRef<HTMLElement> {\n    return this.elementRef;\n  }\n\n  /**\n   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param options specified the offsets to scroll to.\n   */\n  scrollTo(options: ExtendedScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n    const isRtl = this.dir && this.dir.value == 'rtl';\n\n    // Rewrite start & end offsets as right or left offsets.\n    if (options.left == null) {\n      options.left = isRtl ? options.end : options.start;\n    }\n\n    if (options.right == null) {\n      options.right = isRtl ? options.start : options.end;\n    }\n\n    // Rewrite the bottom offset as a top offset.\n    if (options.bottom != null) {\n      (options as _Without<_Bottom> & _Top).top =\n          el.scrollHeight - el.clientHeight - options.bottom;\n    }\n\n    // Rewrite the right offset as a left offset.\n    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {\n      if (options.left != null) {\n        (options as _Without<_Left> & _Right).right =\n            el.scrollWidth - el.clientWidth - options.left;\n      }\n\n      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n        options.left = options.right;\n      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n        options.left = options.right ? -options.right : options.right;\n      }\n    } else {\n      if (options.right != null) {\n        (options as _Without<_Right> & _Left).left =\n            el.scrollWidth - el.clientWidth - options.right;\n      }\n    }\n\n    this._applyScrollToOptions(options);\n  }\n\n  private _applyScrollToOptions(options: ScrollToOptions): void {\n    const el = this.elementRef.nativeElement;\n\n    if (supportsScrollBehavior()) {\n      el.scrollTo(options);\n    } else {\n      if (options.top != null) {\n        el.scrollTop = options.top;\n      }\n      if (options.left != null) {\n        el.scrollLeft = options.left;\n      }\n    }\n  }\n\n  /**\n   * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n   * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n   * left and right always refer to the left and right side of the scrolling container irrespective\n   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n   * in an RTL context.\n   * @param from The edge to measure from.\n   */\n  measureScrollOffset(from: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    const LEFT = 'left';\n    const RIGHT = 'right';\n    const el = this.elementRef.nativeElement;\n    if (from == 'top') {\n      return el.scrollTop;\n    }\n    if (from == 'bottom') {\n      return el.scrollHeight - el.clientHeight - el.scrollTop;\n    }\n\n    // Rewrite start & end as left or right offsets.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    if (from == 'start') {\n      from = isRtl ? RIGHT : LEFT;\n    } else if (from == 'end') {\n      from = isRtl ? LEFT : RIGHT;\n    }\n\n    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {\n      // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      } else {\n        return el.scrollLeft;\n      }\n    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {\n      // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n      // 0 when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft + el.scrollWidth - el.clientWidth;\n      } else {\n        return -el.scrollLeft;\n      }\n    } else {\n      // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n      // (scrollWidth - clientWidth) when scrolled all the way right.\n      if (from == LEFT) {\n        return el.scrollLeft;\n      } else {\n        return el.scrollWidth - el.clientWidth - el.scrollLeft;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Injectable, NgZone, OnDestroy, Optional, Inject} from '@angular/core';\nimport {merge, of as observableOf, fromEvent, Observable, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n/** Time in ms to throttle the resize events by default. */\nexport const DEFAULT_RESIZE_TIME = 20;\n\n/** Object that holds the scroll position of the viewport in each direction. */\nexport interface ViewportScrollPosition {\n  top: number;\n  left: number;\n}\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class ViewportRuler implements OnDestroy {\n  /** Cached viewport dimensions. */\n  private _viewportSize: {width: number; height: number};\n\n  /** Stream of viewport change events. */\n  private _change: Observable<Event>;\n\n  /** Subscription to streams that invalidate the cached viewport dimensions. */\n  private _invalidateCache: Subscription;\n\n  /** Used to reference correct document/window */\n  protected _document?: Document;\n\n  constructor(private _platform: Platform,\n              ngZone: NgZone,\n              /** @breaking-change 11.0.0 make document required */\n              @Optional() @Inject(DOCUMENT) document?: any) {\n    this._document = document;\n\n    ngZone.runOutsideAngular(() => {\n      const window = this._getWindow();\n\n      this._change = _platform.isBrowser ?\n          merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n          observableOf();\n\n      // Note that we need to do the subscription inside `runOutsideAngular`\n      // since subscribing is what causes the event listener to be added.\n      this._invalidateCache = this.change().subscribe(() => this._updateViewportSize());\n    });\n  }\n\n  ngOnDestroy() {\n    this._invalidateCache.unsubscribe();\n  }\n\n  /** Returns the viewport's width and height. */\n  getViewportSize(): Readonly<{width: number, height: number}> {\n    if (!this._viewportSize) {\n      this._updateViewportSize();\n    }\n\n    const output = {width: this._viewportSize.width, height: this._viewportSize.height};\n\n    // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n    if (!this._platform.isBrowser) {\n      this._viewportSize = null!;\n    }\n\n    return output;\n  }\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const scrollPosition = this.getViewportScrollPosition();\n    const {width, height} = this.getViewportSize();\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n  /** Gets the (top, left) scroll position of the viewport. */\n  getViewportScrollPosition(): ViewportScrollPosition {\n    // While we can get a reference to the fake document\n    // during SSR, it doesn't have getBoundingClientRect.\n    if (!this._platform.isBrowser) {\n      return {top: 0, left: 0};\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const document = this._getDocument();\n    const window = this._getWindow();\n    const documentElement = document.documentElement!;\n    const documentRect = documentElement.getBoundingClientRect();\n\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n                 documentElement.scrollTop || 0;\n\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n                  documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n\n  /**\n   * Returns a stream that emits whenever the size of the viewport changes.\n   * @param throttleTime Time in milliseconds to throttle the stream.\n   */\n  change(throttleTime: number = DEFAULT_RESIZE_TIME): Observable<Event> {\n    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n  }\n\n  /** Access injected document if available or fallback to global document reference */\n  private _getDocument(): Document {\n    return this._document || document;\n  }\n\n  /** Use defaultView of injected document if available or fallback to global window reference */\n  private _getWindow(): Window {\n    const doc = this._getDocument();\n    return doc.defaultView || window;\n  }\n\n  /** Updates the cached viewport size. */\n  private _updateViewportSize() {\n    const window = this._getWindow();\n    this._viewportSize = this._platform.isBrowser ?\n        {width: window.innerWidth, height: window.innerHeight} :\n        {width: 0, height: 0};\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ListRange} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  animationFrameScheduler,\n  asapScheduler,\n  Observable,\n  Subject,\n  Observer,\n  Subscription,\n} from 'rxjs';\nimport {auditTime, startWith, takeUntil} from 'rxjs/operators';\nimport {ScrollDispatcher} from './scroll-dispatcher';\nimport {CdkScrollable, ExtendedScrollToOptions} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {VIRTUAL_SCROLL_STRATEGY, VirtualScrollStrategy} from './virtual-scroll-strategy';\nimport {ViewportRuler} from './viewport-ruler';\n\n/** Checks if the given ranges are equal. */\nfunction rangesEqual(r1: ListRange, r2: ListRange): boolean {\n  return r1.start == r2.start && r1.end == r2.end;\n}\n\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n */\nconst SCROLL_SCHEDULER =\n    typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n\n\n/** A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`. */\n@Component({\n  selector: 'cdk-virtual-scroll-viewport',\n  templateUrl: 'virtual-scroll-viewport.html',\n  styleUrls: ['virtual-scroll-viewport.css'],\n  host: {\n    'class': 'cdk-virtual-scroll-viewport',\n    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{\n    provide: CdkScrollable,\n    useExisting: CdkVirtualScrollViewport,\n  }]\n})\nexport class CdkVirtualScrollViewport extends CdkScrollable implements OnInit, OnDestroy {\n  /** Emits when the viewport is detached from a CdkVirtualForOf. */\n  private _detachedSubject = new Subject<void>();\n\n  /** Emits when the rendered range changes. */\n  private _renderedRangeSubject = new Subject<ListRange>();\n\n  /** The direction the viewport scrolls. */\n  @Input()\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(orientation: 'horizontal' | 'vertical') {\n    if (this._orientation !== orientation) {\n      this._orientation = orientation;\n      this._calculateSpacerSize();\n    }\n  }\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n  // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n  // depending on how the strategy calculates the scrolled index, it may come at a cost to\n  // performance.\n  /** Emits when the index of the first element visible in the viewport changes. */\n  @Output() scrolledIndexChange: Observable<number> =\n      new Observable((observer: Observer<number>) =>\n        this._scrollStrategy.scrolledIndexChange.subscribe(index =>\n            Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));\n\n  /** The element that wraps the rendered content. */\n  @ViewChild('contentWrapper', {static: true}) _contentWrapper: ElementRef<HTMLElement>;\n\n  /** A stream that emits whenever the rendered range changes. */\n  renderedRangeStream: Observable<ListRange> = this._renderedRangeSubject.asObservable();\n\n  /**\n   * The total size of all content (in pixels), including content that is not currently rendered.\n   */\n  private _totalContentSize = 0;\n\n  /** A string representing the `style.width` property value to be used for the spacer element. */\n  _totalContentWidth = '';\n\n  /** A string representing the `style.height` property value to be used for the spacer element. */\n  _totalContentHeight = '';\n\n  /**\n   * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n   * of the visible viewport.\n   */\n  private _renderedContentTransform: string;\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange = {start: 0, end: 0};\n\n  /** The length of the data bound to this viewport (in number of items). */\n  private _dataLength = 0;\n\n  /** The size of the viewport (in pixels). */\n  private _viewportSize = 0;\n\n  /** the currently attached CdkVirtualForOf. */\n  private _forOf: CdkVirtualForOf<any> | null;\n\n  /** The last rendered content offset that was set. */\n  private _renderedContentOffset = 0;\n\n  /**\n   * Whether the last rendered content offset was to the end of the content (and therefore needs to\n   * be rewritten as an offset to the start of the content).\n   */\n  private _renderedContentOffsetNeedsRewrite = false;\n\n  /** Whether there is a pending change detection cycle. */\n  private _isChangeDetectionPending = false;\n\n  /** A list of functions to run after the next change detection cycle. */\n  private _runAfterChangeDetection: Function[] = [];\n\n  /** Subscription to changes in the viewport size. */\n  private _viewportChanges = Subscription.EMPTY;\n\n  constructor(public elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              ngZone: NgZone,\n              @Optional() @Inject(VIRTUAL_SCROLL_STRATEGY)\n                  private _scrollStrategy: VirtualScrollStrategy,\n              @Optional() dir: Directionality,\n              scrollDispatcher: ScrollDispatcher,\n              /**\n               * @deprecated `viewportRuler` parameter to become required.\n               * @breaking-change 11.0.0\n               */\n              @Optional() viewportRuler?: ViewportRuler) {\n    super(elementRef, scrollDispatcher, ngZone, dir);\n\n    if (!_scrollStrategy) {\n      throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n    }\n\n    // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n    if (viewportRuler) {\n      this._viewportChanges = viewportRuler.change().subscribe(() => {\n        this.checkViewportSize();\n      });\n    }\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    // It's still too early to measure the viewport at this point. Deferring with a promise allows\n    // the Viewport to be rendered with the correct size before we measure. We run this outside the\n    // zone to avoid causing more change detection cycles. We handle the change detection loop\n    // ourselves instead.\n    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n      this._measureViewportSize();\n      this._scrollStrategy.attach(this);\n\n      this.elementScrolled()\n          .pipe(\n              // Start off with a fake scroll event so we properly detect our initial position.\n              startWith(null!),\n              // Collect multiple events into one until the next animation frame. This way if\n              // there are multiple scroll events in the same frame we only need to recheck\n              // our layout once.\n              auditTime(0, SCROLL_SCHEDULER))\n          .subscribe(() => this._scrollStrategy.onContentScrolled());\n\n      this._markChangeDetectionNeeded();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.detach();\n    this._scrollStrategy.detach();\n\n    // Complete all subjects\n    this._renderedRangeSubject.complete();\n    this._detachedSubject.complete();\n    this._viewportChanges.unsubscribe();\n\n    super.ngOnDestroy();\n  }\n\n  /** Attaches a `CdkVirtualForOf` to this viewport. */\n  attach(forOf: CdkVirtualForOf<any>) {\n    if (this._forOf) {\n      throw Error('CdkVirtualScrollViewport is already attached.');\n    }\n\n    // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n    // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n    // change detection loop ourselves.\n    this.ngZone.runOutsideAngular(() => {\n      this._forOf = forOf;\n      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe(data => {\n        const newLength = data.length;\n        if (newLength !== this._dataLength) {\n          this._dataLength = newLength;\n          this._scrollStrategy.onDataLengthChanged();\n        }\n        this._doChangeDetection();\n      });\n    });\n  }\n\n  /** Detaches the current `CdkVirtualForOf`. */\n  detach() {\n    this._forOf = null;\n    this._detachedSubject.next();\n  }\n\n  /** Gets the length of the data bound to this viewport (in number of items). */\n  getDataLength(): number {\n    return this._dataLength;\n  }\n\n  /** Gets the size of the viewport (in pixels). */\n  getViewportSize(): number {\n    return this._viewportSize;\n  }\n\n  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n  // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n  // setting it to something else, but its error prone and should probably be split into\n  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n\n  /** Get the current rendered range of items. */\n  getRenderedRange(): ListRange {\n    return this._renderedRange;\n  }\n\n  /**\n   * Sets the total size of all content (in pixels), including content that is not currently\n   * rendered.\n   */\n  setTotalContentSize(size: number) {\n    if (this._totalContentSize !== size) {\n      this._totalContentSize = size;\n      this._calculateSpacerSize();\n      this._markChangeDetectionNeeded();\n    }\n  }\n\n  /** Sets the currently rendered range of indices. */\n  setRenderedRange(range: ListRange) {\n    if (!rangesEqual(this._renderedRange, range)) {\n      this._renderedRangeSubject.next(this._renderedRange = range);\n      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());\n    }\n  }\n\n  /**\n   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n   */\n  getOffsetToRenderedContentStart(): number | null {\n    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n  }\n\n  /**\n   * Sets the offset from the start of the viewport to either the start or end of the rendered data\n   * (in pixels).\n   */\n  setRenderedContentOffset(offset: number, to: 'to-start' | 'to-end' = 'to-start') {\n    // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n    // in the negative direction.\n    const isRtl = this.dir && this.dir.value == 'rtl';\n    const isHorizontal = this.orientation == 'horizontal';\n    const axis = isHorizontal ? 'X' : 'Y';\n    const axisDirection = isHorizontal && isRtl ? -1 : 1;\n    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n    this._renderedContentOffset = offset;\n    if (to === 'to-end') {\n      transform += ` translate${axis}(-100%)`;\n      // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n      // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n      // expand upward).\n      this._renderedContentOffsetNeedsRewrite = true;\n    }\n    if (this._renderedContentTransform != transform) {\n      // We know this value is safe because we parse `offset` with `Number()` before passing it\n      // into the string.\n      this._renderedContentTransform = transform;\n      this._markChangeDetectionNeeded(() => {\n        if (this._renderedContentOffsetNeedsRewrite) {\n          this._renderedContentOffset -= this.measureRenderedContentSize();\n          this._renderedContentOffsetNeedsRewrite = false;\n          this.setRenderedContentOffset(this._renderedContentOffset);\n        } else {\n          this._scrollStrategy.onRenderedOffsetChanged();\n        }\n      });\n    }\n  }\n\n  /**\n   * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n   * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n   * @param offset The offset to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToOffset(offset: number, behavior: ScrollBehavior = 'auto') {\n    const options: ExtendedScrollToOptions = {behavior};\n    if (this.orientation === 'horizontal') {\n      options.start = offset;\n    } else {\n      options.top = offset;\n    }\n    this.scrollTo(options);\n  }\n\n  /**\n   * Scrolls to the offset for the given index.\n   * @param index The index of the element to scroll to.\n   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n   */\n  scrollToIndex(index: number,  behavior: ScrollBehavior = 'auto') {\n    this._scrollStrategy.scrollToIndex(index, behavior);\n  }\n\n  /**\n   * Gets the current scroll offset from the start of the viewport (in pixels).\n   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n   *     in horizontal mode.\n   */\n  measureScrollOffset(from?: 'top' | 'left' | 'right' | 'bottom' | 'start' | 'end'): number {\n    return from ?\n      super.measureScrollOffset(from) :\n      super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n  }\n\n  /** Measure the combined size of all of the rendered items. */\n  measureRenderedContentSize(): number {\n    const contentEl = this._contentWrapper.nativeElement;\n    return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n  }\n\n  /**\n   * Measure the total combined size of the given range. Throws if the range includes items that are\n   * not rendered.\n   */\n  measureRangeSize(range: ListRange): number {\n    if (!this._forOf) {\n      return 0;\n    }\n    return this._forOf.measureRangeSize(range, this.orientation);\n  }\n\n  /** Update the viewport dimensions and re-render. */\n  checkViewportSize() {\n    // TODO: Cleanup later when add logic for handling content resize\n    this._measureViewportSize();\n    this._scrollStrategy.onDataLengthChanged();\n  }\n\n  /** Measure the viewport size. */\n  private _measureViewportSize() {\n    const viewportEl = this.elementRef.nativeElement;\n    this._viewportSize = this.orientation === 'horizontal' ?\n        viewportEl.clientWidth : viewportEl.clientHeight;\n  }\n\n  /** Queue up change detection to run. */\n  private _markChangeDetectionNeeded(runAfter?: Function) {\n    if (runAfter) {\n      this._runAfterChangeDetection.push(runAfter);\n    }\n\n    // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n    // properties sequentially we only have to run `_doChangeDetection` once at the end.\n    if (!this._isChangeDetectionPending) {\n      this._isChangeDetectionPending = true;\n      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {\n        this._doChangeDetection();\n      }));\n    }\n  }\n\n  /** Run change detection. */\n  private _doChangeDetection() {\n    this._isChangeDetectionPending = false;\n\n    // Apply the content transform. The transform can't be set via an Angular binding because\n    // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n    // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n    // the `Number` function first to coerce it to a numeric value.\n    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n    // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n    // from the root, since the repeated items are content projected in. Calling `detectChanges`\n    // instead does not properly check the projected content.\n    this.ngZone.run(() => this._changeDetectorRef.markForCheck());\n\n    const runAfterChangeDetection = this._runAfterChangeDetection;\n    this._runAfterChangeDetection = [];\n    for (const fn of runAfterChangeDetection) {\n      fn();\n    }\n  }\n\n  /** Calculates the `style.width` and `style.height` for the spacer element. */\n  private _calculateSpacerSize() {\n    this._totalContentHeight =\n        this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n    this._totalContentWidth =\n        this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ArrayDataSource,\n  CollectionViewer,\n  DataSource,\n  ListRange,\n  isDataSource,\n} from '@angular/cdk/collections';\nimport {\n  Directive,\n  DoCheck,\n  EmbeddedViewRef,\n  Input,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  NgZone,\n  OnDestroy,\n  SkipSelf,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Observable, Subject, of as observableOf, isObservable} from 'rxjs';\nimport {pairwise, shareReplay, startWith, switchMap, takeUntil} from 'rxjs/operators';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport type CdkVirtualForOfContext<T> = {\n  /** The item value. */\n  $implicit: T;\n  /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n  cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n  /** The index of the item in the DataSource. */\n  index: number;\n  /** The number of items in the DataSource. */\n  count: number;\n  /** Whether this is the first item in the DataSource. */\n  first: boolean;\n  /** Whether this is the last item in the DataSource. */\n  last: boolean;\n  /** Whether the index is even. */\n  even: boolean;\n  /** Whether the index is odd. */\n  odd: boolean;\n};\n\n\n/** Helper to extract size from a DOM Node. */\nfunction getSize(orientation: 'horizontal' | 'vertical', node: Node): number {\n  const el = node as Element;\n  if (!el.getBoundingClientRect) {\n    return 0;\n  }\n  const rect = el.getBoundingClientRect();\n  return orientation == 'horizontal' ? rect.width : rect.height;\n}\n\n\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\n@Directive({\n  selector: '[cdkVirtualFor][cdkVirtualForOf]',\n})\nexport class CdkVirtualForOf<T> implements CollectionViewer, DoCheck, OnDestroy {\n  /** Emits when the rendered view of the data changes. */\n  viewChange = new Subject<ListRange>();\n\n  /** Subject that emits when a new DataSource instance is given. */\n  private _dataSourceChanges = new Subject<DataSource<T>>();\n\n  /** The DataSource to display. */\n  @Input()\n  get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined {\n    return this._cdkVirtualForOf;\n  }\n  set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined) {\n    this._cdkVirtualForOf = value;\n    if (isDataSource(value)) {\n      this._dataSourceChanges.next(value);\n    } else {\n      // Slice the value if its an NgIterable to ensure we're working with an array.\n      this._dataSourceChanges.next(new ArrayDataSource<T>(\n          isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n    }\n  }\n  _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n\n  /**\n   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n   * the item and produces a value to be used as the item's identity when tracking changes.\n   */\n  @Input()\n  get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined {\n    return this._cdkVirtualForTrackBy;\n  }\n  set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined) {\n    this._needsUpdate = true;\n    this._cdkVirtualForTrackBy = fn ?\n        (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) :\n        undefined;\n  }\n  private _cdkVirtualForTrackBy: TrackByFunction<T> | undefined;\n\n  /** The template used to stamp out new elements. */\n  @Input()\n  set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>) {\n    if (value) {\n      this._needsUpdate = true;\n      this._template = value;\n    }\n  }\n\n  /**\n   * The size of the cache used to store templates that are not being used for re-use later.\n   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n   */\n  @Input() cdkVirtualForTemplateCacheSize: number = 20;\n\n  /** Emits whenever the data in the current DataSource changes. */\n  dataStream: Observable<T[] | ReadonlyArray<T>> = this._dataSourceChanges\n      .pipe(\n          // Start off with null `DataSource`.\n          startWith(null!),\n          // Bundle up the previous and current data sources so we can work with both.\n          pairwise(),\n          // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n          // new one, passing back a stream of data changes which we run through `switchMap` to give\n          // us a data stream that emits the latest data from whatever the current `DataSource` is.\n          switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),\n          // Replay the last emitted data when someone subscribes.\n          shareReplay(1));\n\n  /** The differ used to calculate changes to the data. */\n  private _differ: IterableDiffer<T> | null = null;\n\n  /** The most recent data emitted from the DataSource. */\n  private _data: T[] | ReadonlyArray<T>;\n\n  /** The currently rendered items. */\n  private _renderedItems: T[];\n\n  /** The currently rendered range of indices. */\n  private _renderedRange: ListRange;\n\n  /**\n   * The template cache used to hold on ot template instancess that have been stamped out, but don't\n   * currently need to be rendered. These instances will be reused in the future rather than\n   * stamping out brand new ones.\n   */\n  private _templateCache: EmbeddedViewRef<CdkVirtualForOfContext<T>>[] = [];\n\n  /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n  private _needsUpdate = false;\n\n  private _destroyed = new Subject<void>();\n\n  constructor(\n      /** The view container to add items to. */\n      private _viewContainerRef: ViewContainerRef,\n      /** The template to use when stamping out new items. */\n      private _template: TemplateRef<CdkVirtualForOfContext<T>>,\n      /** The set of available differs. */\n      private _differs: IterableDiffers,\n      /** The virtual scrolling viewport that these items are being rendered in. */\n      @SkipSelf() private _viewport: CdkVirtualScrollViewport,\n      ngZone: NgZone) {\n    this.dataStream.subscribe(data => {\n      this._data = data;\n      this._onRenderedDataChange();\n    });\n    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe(range => {\n      this._renderedRange = range;\n      ngZone.run(() => this.viewChange.next(this._renderedRange));\n      this._onRenderedDataChange();\n    });\n    this._viewport.attach(this);\n  }\n\n  /**\n   * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n   * in the specified range. Throws an error if the range includes items that are not currently\n   * rendered.\n   */\n  measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number {\n    if (range.start >= range.end) {\n      return 0;\n    }\n    if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n      throw Error(`Error: attempted to measure an item that isn't rendered.`);\n    }\n\n    // The index into the list of rendered views for the first item in the range.\n    const renderedStartIndex = range.start - this._renderedRange.start;\n    // The length of the range we're measuring.\n    const rangeLen = range.end - range.start;\n\n    // Loop over all root nodes for all items in the range and sum up their size.\n    let totalSize = 0;\n    let i = rangeLen;\n    while (i--) {\n      const view = this._viewContainerRef.get(i + renderedStartIndex) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>> | null;\n      let j = view ? view.rootNodes.length : 0;\n      while (j--) {\n        totalSize += getSize(orientation, view!.rootNodes[j]);\n      }\n    }\n\n    return totalSize;\n  }\n\n  ngDoCheck() {\n    if (this._differ && this._needsUpdate) {\n      // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n      // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n      // changing (need to do this diff).\n      const changes = this._differ.diff(this._renderedItems);\n      if (!changes) {\n        this._updateContext();\n      } else {\n        this._applyChanges(changes);\n      }\n      this._needsUpdate = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._viewport.detach();\n\n    this._dataSourceChanges.next();\n    this._dataSourceChanges.complete();\n    this.viewChange.complete();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    for (let view of this._templateCache) {\n      view.destroy();\n    }\n  }\n\n  /** React to scroll state changes in the viewport. */\n  private _onRenderedDataChange() {\n    if (!this._renderedRange) {\n      return;\n    }\n    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n    if (!this._differ) {\n      this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n    }\n    this._needsUpdate = true;\n  }\n\n  /** Swap out one `DataSource` for another. */\n  private _changeDataSource(oldDs: DataSource<T> | null, newDs: DataSource<T> | null):\n    Observable<T[] | ReadonlyArray<T>> {\n\n    if (oldDs) {\n      oldDs.disconnect(this);\n    }\n\n    this._needsUpdate = true;\n    return newDs ? newDs.connect(this) : observableOf();\n  }\n\n  /** Update the `CdkVirtualForOfContext` for all views. */\n  private _updateContext() {\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      let view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n      view.detectChanges();\n    }\n  }\n\n  /** Apply changes to the DOM. */\n  private _applyChanges(changes: IterableChanges<T>) {\n    // Rearrange the views to put them in the right location.\n    changes.forEachOperation((record: IterableChangeRecord<T>,\n                              adjustedPreviousIndex: number | null,\n                              currentIndex: number | null) => {\n      if (record.previousIndex == null) {  // Item added.\n        const view = this._insertViewForNewItem(currentIndex!);\n        view.context.$implicit = record.item;\n      } else if (currentIndex == null) {  // Item removed.\n        this._cacheView(this._detachView(adjustedPreviousIndex !));\n      } else {  // Item moved.\n        const view = this._viewContainerRef.get(adjustedPreviousIndex!) as\n            EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n        this._viewContainerRef.move(view, currentIndex);\n        view.context.$implicit = record.item;\n      }\n    });\n\n    // Update $implicit for any items that had an identity change.\n    changes.forEachIdentityChange((record: IterableChangeRecord<T>) => {\n      const view = this._viewContainerRef.get(record.currentIndex!) as\n          EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.$implicit = record.item;\n    });\n\n    // Update the context variables on all items.\n    const count = this._data.length;\n    let i = this._viewContainerRef.length;\n    while (i--) {\n      const view = this._viewContainerRef.get(i) as EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n      view.context.index = this._renderedRange.start + i;\n      view.context.count = count;\n      this._updateComputedContextProperties(view.context);\n    }\n  }\n\n  /** Cache the given detached view. */\n  private _cacheView(view: EmbeddedViewRef<CdkVirtualForOfContext<T>>) {\n    if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n      this._templateCache.push(view);\n    } else {\n      const index = this._viewContainerRef.indexOf(view);\n\n      // It's very unlikely that the index will ever be -1, but just in case,\n      // destroy the view on its own, otherwise destroy it through the\n      // container to ensure that all the references are removed.\n      if (index === -1) {\n        view.destroy();\n      } else {\n        this._viewContainerRef.remove(index);\n      }\n    }\n  }\n\n  /** Inserts a view for a new item, either from the cache or by creating a new one. */\n  private _insertViewForNewItem(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n  }\n\n  /** Update the computed properties on the `CdkVirtualForOfContext`. */\n  private _updateComputedContextProperties(context: CdkVirtualForOfContext<any>) {\n    context.first = context.index === 0;\n    context.last = context.index === context.count - 1;\n    context.even = context.index % 2 === 0;\n    context.odd = !context.even;\n  }\n\n  /** Creates a new embedded view and moves it to the given index */\n  private _createEmbeddedViewAt(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    // Note that it's important that we insert the item directly at the proper index,\n    // rather than inserting it and the moving it in place, because if there's a directive\n    // on the same node that injects the `ViewContainerRef`, Angular will insert another\n    // comment node which can throw off the move when it's being repeated for all items.\n    return this._viewContainerRef.createEmbeddedView(this._template, {\n      $implicit: null!,\n      // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n      // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n      cdkVirtualForOf: this._cdkVirtualForOf!,\n      index: -1,\n      count: -1,\n      first: false,\n      last: false,\n      odd: false,\n      even: false\n    }, index);\n  }\n\n  /** Inserts a recycled view from the cache at the given index. */\n  private _insertViewFromCache(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>>|null {\n    const cachedView = this._templateCache.pop();\n    if (cachedView) {\n      this._viewContainerRef.insert(cachedView, index);\n    }\n    return cachedView || null;\n  }\n\n  /** Detaches the embedded view at the given index. */\n  private _detachView(index: number): EmbeddedViewRef<CdkVirtualForOfContext<T>> {\n    return this._viewContainerRef.detach(index) as\n        EmbeddedViewRef<CdkVirtualForOfContext<T>>;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {CdkFixedSizeVirtualScroll} from './fixed-size-virtual-scroll';\nimport {CdkScrollable} from './scrollable';\nimport {CdkVirtualForOf} from './virtual-for-of';\nimport {CdkVirtualScrollViewport} from './virtual-scroll-viewport';\n\n@NgModule({\n  exports: [CdkScrollable],\n  declarations: [CdkScrollable]\n})\nexport class CdkScrollableModule {}\n\n@NgModule({\n  imports: [\n    BidiModule,\n    PlatformModule,\n    CdkScrollableModule\n  ],\n  exports: [\n    BidiModule,\n    CdkScrollableModule,\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n  declarations: [\n    CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n  ],\n})\nexport class ScrollingModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}