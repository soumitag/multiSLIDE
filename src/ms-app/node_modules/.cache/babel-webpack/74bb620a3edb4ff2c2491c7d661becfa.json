{"ast":null,"code":"import _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, hasModifierKey, SPACE, HOME, END } from '@angular/cdk/keycodes';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/accordion-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Base interface for a `MatAccordion`.\n * \\@docs-private\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\nvar _c0 = [\"body\"];\n\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) {}\n\nvar _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nvar _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\n\nvar _c3 = function _c3(a0, a1) {\n  return {\n    collapsedHeight: a0,\n    expandedHeight: a1\n  };\n};\n\nvar _c4 = function _c4(a0, a1) {\n  return {\n    value: a0,\n    params: a1\n  };\n};\n\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r0._getExpandedState());\n  }\n}\n\nvar _c5 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nvar _c6 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\n\nfunction MatAccordionBase() {}\n\nif (false) {\n  /**\n   * Whether the expansion indicator should be hidden.\n   * @type {?}\n   */\n  MatAccordionBase.prototype.hideToggle;\n  /**\n   * Display mode used for all expansion panels in the accordion.\n   * @type {?}\n   */\n\n  MatAccordionBase.prototype.displayMode;\n  /**\n   * The position of the expansion indicator.\n   * @type {?}\n   */\n\n  MatAccordionBase.prototype.togglePosition;\n  /**\n   * Handles keyboard events coming in from the panel headers.\n   * @type {?}\n   */\n\n  MatAccordionBase.prototype._handleHeaderKeydown;\n  /**\n   * Handles focus events on the panel headers.\n   * @type {?}\n   */\n\n  MatAccordionBase.prototype._handleHeaderFocus;\n}\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n * @type {?}\n */\n\n\nvar MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Time and timing curve for expansion panel animations.\n * @type {?}\n */\n\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n * @type {?}\n */\n\nvar matExpansionAnimations = {\n  /**\n   * Animation that rotates the indicator arrow.\n   */\n  indicatorRotate: trigger('indicatorRotate', [state('collapsed, void', style({\n    transform: 'rotate(0deg)'\n  })), state('expanded', style({\n    transform: 'rotate(180deg)'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))]),\n\n  /**\n   * Animation that expands and collapses the panel header height.\n   */\n  expansionHeaderHeight: trigger('expansionHeight', [state('collapsed, void', style({\n    height: '{{collapsedHeight}}'\n  }), {\n    params: {\n      collapsedHeight: '48px'\n    }\n  }), state('expanded', style({\n    height: '{{expandedHeight}}'\n  }), {\n    params: {\n      expandedHeight: '64px'\n    }\n  }), transition('expanded <=> collapsed, void => collapsed', group([query('@indicatorRotate', animateChild(), {\n    optional: true\n  }), animate(EXPANSION_PANEL_ANIMATION_TIMING)]))]),\n\n  /**\n   * Animation that expands and collapses the panel content.\n   */\n  bodyExpansion: trigger('bodyExpansion', [state('collapsed, void', style({\n    height: '0px',\n    visibility: 'hidden'\n  })), state('expanded', style({\n    height: '*',\n    visibility: 'visible'\n  })), transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING))])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-panel-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n\nvar MatExpansionPanelContent =\n/**\n * @param {?} _template\n */\nfunction MatExpansionPanelContent(_template) {\n  _classCallCheck(this, MatExpansionPanelContent);\n\n  this._template = _template;\n};\n\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) {\n  return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelContent,\n  selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]]\n});\n/** @nocollapse */\n\nMatExpansionPanelContent.ctorParameters = function () {\n  return [{\n    type: TemplateRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matExpansionPanelContent]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  MatExpansionPanelContent.prototype._template;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-panel.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Counter for generating unique element ids.\n * @type {?}\n */\n\n\nvar uniqueId = 0;\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n * @record\n */\n\nfunction MatExpansionPanelDefaultOptions() {}\n\nif (false) {\n  /**\n   * Height of the header while the panel is expanded.\n   * @type {?}\n   */\n  MatExpansionPanelDefaultOptions.prototype.expandedHeight;\n  /**\n   * Height of the header while the panel is collapsed.\n   * @type {?}\n   */\n\n  MatExpansionPanelDefaultOptions.prototype.collapsedHeight;\n  /**\n   * Whether the toggle indicator should be hidden.\n   * @type {?}\n   */\n\n  MatExpansionPanelDefaultOptions.prototype.hideToggle;\n}\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n * @type {?}\n */\n\n\nvar MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nvar ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n\nvar MatExpansionPanel = /*#__PURE__*/function (_CdkAccordionItem) {\n  _inherits(MatExpansionPanel, _CdkAccordionItem);\n\n  var _super = _createSuper(MatExpansionPanel);\n\n  /**\n   * @param {?} accordion\n   * @param {?} _changeDetectorRef\n   * @param {?} _uniqueSelectionDispatcher\n   * @param {?} _viewContainerRef\n   * @param {?} _document\n   * @param {?} _animationMode\n   * @param {?=} defaultOptions\n   */\n  function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n    var _this;\n\n    _classCallCheck(this, MatExpansionPanel);\n\n    _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    _this._viewContainerRef = _viewContainerRef;\n    _this._animationMode = _animationMode;\n    _this._hideToggle = false;\n    /**\n     * An event emitted after the body's expansion animation happens.\n     */\n\n    _this.afterExpand = new EventEmitter();\n    /**\n     * An event emitted after the body's collapse animation happens.\n     */\n\n    _this.afterCollapse = new EventEmitter();\n    /**\n     * Stream that emits for changes in `\\@Input` properties.\n     */\n\n    _this._inputChanges = new Subject();\n    /**\n     * ID for the associated header element. Used for a11y labelling.\n     */\n\n    _this._headerId = \"mat-expansion-panel-header-\".concat(uniqueId++);\n    /**\n     * Stream of body animation done events.\n     */\n\n    _this._bodyAnimationDone = new Subject();\n    _this.accordion = accordion;\n    _this._document = _document; // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n\n    _this._bodyAnimationDone.pipe(distinctUntilChanged(\n    /**\n    * @param {?} x\n    * @param {?} y\n    * @return {?}\n    */\n    function (x, y) {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    function (event) {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          _this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          _this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      _this.hideToggle = defaultOptions.hideToggle;\n    }\n\n    return _this;\n  }\n  /**\n   * Whether the toggle indicator should be hidden.\n   * @return {?}\n   */\n\n\n  _createClass(MatExpansionPanel, [{\n    key: \"_hasSpacing\",\n\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    value: function _hasSpacing() {\n      if (this.accordion) {\n        return this.expanded && this.accordion.displayMode === 'default';\n      }\n\n      return false;\n    }\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /**\n     * Toggles the expanded state of the expansion panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.expanded = !this.expanded;\n    }\n    /**\n     * Sets the expanded state of the expansion panel to false.\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.expanded = false;\n    }\n    /**\n     * Sets the expanded state of the expansion panel to true.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.expanded = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this2 = this;\n\n      if (this._lazyContent) {\n        // Render the content as soon as the panel becomes open.\n        this.opened.pipe(startWith(\n        /** @type {?} */\n        null), filter(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this2.expanded && !_this2._portal;\n        }), take(1)).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2._portal = new TemplatePortal(_this2._lazyContent._template, _this2._viewContainerRef);\n        });\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._inputChanges.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatExpansionPanel.prototype), \"ngOnDestroy\", this).call(this);\n\n      this._bodyAnimationDone.complete();\n\n      this._inputChanges.complete();\n    }\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_containsFocus\",\n    value: function _containsFocus() {\n      if (this._body) {\n        /** @type {?} */\n        var focusedElement = this._document.activeElement;\n        /** @type {?} */\n\n        var bodyElement = this._body.nativeElement;\n        return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle || this.accordion && this.accordion.hideToggle;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._hideToggle = coerceBooleanProperty(value);\n    }\n    /**\n     * The position of the expansion indicator.\n     * @return {?}\n     */\n\n  }, {\n    key: \"togglePosition\",\n    get: function get() {\n      return this._togglePosition || this.accordion && this.accordion.togglePosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._togglePosition = value;\n    }\n  }]);\n\n  return MatExpansionPanel;\n}(CdkAccordionItem);\n\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) {\n  return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\n\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatExpansionPanel,\n  selectors: [[\"mat-expansion-panel\"]],\n  contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    }\n  },\n  viewQuery: function MatExpansionPanel_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-expansion-panel\"],\n  hostVars: 6,\n  hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    expanded: \"expanded\",\n    hideToggle: \"hideToggle\",\n    togglePosition: \"togglePosition\"\n  },\n  outputs: {\n    opened: \"opened\",\n    closed: \"closed\",\n    expandedChange: \"expandedChange\",\n    afterExpand: \"afterExpand\",\n    afterCollapse: \"afterCollapse\"\n  },\n  exportAs: [\"matExpansionPanel\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n  // to the same accordion.\n  {\n    provide: MAT_ACCORDION,\n    useValue: ɵ0\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]],\n  template: function MatExpansionPanel_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) {\n        return ctx._bodyAnimationDone.next($event);\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵprojection(4, 1);\n      ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(6, 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    }\n  },\n  directives: [ɵngcc2.CdkPortalOutlet],\n  styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.bodyExpansion]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatExpansionPanel.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }, {\n      type: Inject,\n      args: [MAT_ACCORDION]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: UniqueSelectionDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatExpansionPanel.propDecorators = {\n  hideToggle: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }],\n  afterExpand: [{\n    type: Output\n  }],\n  afterCollapse: [{\n    type: Output\n  }],\n  _lazyContent: [{\n    type: ContentChild,\n    args: [MatExpansionPanelContent]\n  }],\n  _body: [{\n    type: ViewChild,\n    args: ['body']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel',\n      exportAs: 'matExpansionPanel',\n      template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled', 'expanded'],\n      outputs: ['opened', 'closed', 'expandedChange'],\n      animations: [matExpansionAnimations.bodyExpansion],\n      providers: [// Provide MatAccordion as undefined to prevent nested expansion panels from registering\n      // to the same accordion.\n      {\n        provide: MAT_ACCORDION,\n        useValue: ɵ0\n      }],\n      host: {\n        'class': 'mat-expansion-panel',\n        '[class.mat-expanded]': 'expanded',\n        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n        '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n      },\n      styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [MAT_ACCORDION]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.UniqueSelectionDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    afterExpand: [{\n      type: Output\n    }],\n    afterCollapse: [{\n      type: Output\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }],\n    _lazyContent: [{\n      type: ContentChild,\n      args: [MatExpansionPanelContent]\n    }],\n    _body: [{\n      type: ViewChild,\n      args: ['body']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatExpansionPanel.ngAcceptInputType_hideToggle;\n  /** @type {?} */\n\n  MatExpansionPanel.ngAcceptInputType_expanded;\n  /** @type {?} */\n\n  MatExpansionPanel.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanel.prototype._document;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanel.prototype._hideToggle;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanel.prototype._togglePosition;\n  /**\n   * An event emitted after the body's expansion animation happens.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype.afterExpand;\n  /**\n   * An event emitted after the body's collapse animation happens.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype.afterCollapse;\n  /**\n   * Stream that emits for changes in `\\@Input` properties.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype._inputChanges;\n  /**\n   * Optionally defined accordion the expansion panel belongs to.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype.accordion;\n  /**\n   * Content that will be rendered lazily.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype._lazyContent;\n  /**\n   * Element containing the panel's user-provided content.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype._body;\n  /**\n   * Portal holding the user's content.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype._portal;\n  /**\n   * ID for the associated header element. Used for a11y labelling.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype._headerId;\n  /**\n   * Stream of body animation done events.\n   * @type {?}\n   */\n\n  MatExpansionPanel.prototype._bodyAnimationDone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanel.prototype._viewContainerRef;\n  /** @type {?} */\n\n  MatExpansionPanel.prototype._animationMode;\n}\n\nvar MatExpansionPanelActionRow = function MatExpansionPanelActionRow() {\n  _classCallCheck(this, MatExpansionPanelActionRow);\n};\n\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) {\n  return new (t || MatExpansionPanelActionRow)();\n};\n\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelActionRow,\n  selectors: [[\"mat-action-row\"]],\n  hostAttrs: [1, \"mat-action-row\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-action-row',\n      host: {\n        class: 'mat-action-row'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-panel-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n\n\nvar MatExpansionPanelHeader = /*#__PURE__*/function () {\n  /**\n   * @param {?} panel\n   * @param {?} _element\n   * @param {?} _focusMonitor\n   * @param {?} _changeDetectorRef\n   * @param {?=} defaultOptions\n   */\n  function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatExpansionPanelHeader);\n\n    this.panel = panel;\n    this._element = _element;\n    this._focusMonitor = _focusMonitor;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._parentChangeSubscription = Subscription.EMPTY;\n    /**\n     * Whether Angular animations in the panel header should be disabled.\n     */\n\n    this._animationsDisabled = true;\n    /** @type {?} */\n\n    var accordionHideToggleChange = panel.accordion ? panel.accordion._stateChanges.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    function (changes) {\n      return !!(changes['hideToggle'] || changes['togglePosition']);\n    })) : EMPTY; // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n\n    this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(\n    /**\n    * @param {?} changes\n    * @return {?}\n    */\n    function (changes) {\n      return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n    }))).subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this3._changeDetectorRef.markForCheck();\n    }); // Avoids focus being lost if the panel contained the focused element and was closed.\n\n    panel.closed.pipe(filter(\n    /**\n    * @return {?}\n    */\n    function () {\n      return panel._containsFocus();\n    })).subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      return _focusMonitor.focusVia(_element, 'program');\n    });\n\n    _focusMonitor.monitor(_element).subscribe(\n    /**\n    * @param {?} origin\n    * @return {?}\n    */\n    function (origin) {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(_this3);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatExpansionPanelHeader, [{\n    key: \"_animationStarted\",\n    value: function _animationStarted() {\n      // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n      // there to work around a bug in Angular (see #13088), however this introduces a different\n      // issue. The new transition will cause the header to animate in on init (see #16067), if the\n      // consumer has set a header height that is different from the default one. We work around it\n      // by disabling animations on the header and re-enabling them after the first animation has run.\n      // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n      // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n      // for https://github.com/angular/angular/issues/18847 to be resolved.\n      this._animationsDisabled = false;\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggle\",\n\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    value: function _toggle() {\n      if (!this.disabled) {\n        this.panel.toggle();\n      }\n    }\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isExpanded\",\n    value: function _isExpanded() {\n      return this.panel.expanded;\n    }\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getExpandedState\",\n    value: function _getExpandedState() {\n      return this.panel._getExpandedState();\n    }\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getPanelId\",\n    value: function _getPanelId() {\n      return this.panel.id;\n    }\n    /**\n     * Gets the toggle position for the header.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getTogglePosition\",\n    value: function _getTogglePosition() {\n      return this.panel.togglePosition;\n    }\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_showToggle\",\n    value: function _showToggle() {\n      return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      switch (event.keyCode) {\n        // Toggle for space and enter keys.\n        case SPACE:\n        case ENTER:\n          if (!hasModifierKey(event)) {\n            event.preventDefault();\n\n            this._toggle();\n          }\n\n          break;\n\n        default:\n          if (this.panel.accordion) {\n            this.panel.accordion._handleHeaderKeydown(event);\n          }\n\n          return;\n      }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'program';\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n\n      this._focusMonitor.focusVia(this._element, origin, options);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._parentChangeSubscription.unsubscribe();\n\n      this._focusMonitor.stopMonitoring(this._element);\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.panel.disabled;\n    }\n  }]);\n\n  return MatExpansionPanelHeader;\n}();\n\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) {\n  return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8));\n};\n\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatExpansionPanelHeader,\n  selectors: [[\"mat-expansion-panel-header\"]],\n  hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\", \"mat-focus-indicator\"],\n  hostVars: 19,\n  hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@expansionHeight.start\", function MatExpansionPanelHeader_animation_expansionHeight_start_HostBindingHandler() {\n        return ctx._animationStarted();\n      });\n      ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler() {\n        return ctx._toggle();\n      })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? 0 - 1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n      ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@.disabled\", ctx._animationsDisabled)(\"@expansionHeight\", ɵngcc0.ɵɵpureFunction2(16, _c4, ctx._getExpandedState(), ɵngcc0.ɵɵpureFunction2(13, _c3, ctx.collapsedHeight, ctx.expandedHeight)));\n      ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\");\n    }\n  },\n  inputs: {\n    expandedHeight: \"expandedHeight\",\n    collapsedHeight: \"collapsedHeight\"\n  },\n  ngContentSelectors: _c6,\n  decls: 5,\n  vars: 1,\n  consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]],\n  template: function MatExpansionPanelHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c5);\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵprojection(2, 1);\n      ɵngcc0.ɵɵprojection(3, 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(4);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    }\n  },\n  directives: [ɵngcc4.NgIf],\n  styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;position:relative}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matExpansionAnimations.indicatorRotate, matExpansionAnimations.expansionHeaderHeight]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatExpansionPanelHeader.ctorParameters = function () {\n  return [{\n    type: MatExpansionPanel,\n    decorators: [{\n      type: Host\n    }]\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\nMatExpansionPanelHeader.propDecorators = {\n  expandedHeight: [{\n    type: Input\n  }],\n  collapsedHeight: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n    type: Component,\n    args: [{\n      selector: 'mat-expansion-panel-header',\n      template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matExpansionAnimations.indicatorRotate, matExpansionAnimations.expansionHeaderHeight],\n      host: {\n        'class': 'mat-expansion-panel-header mat-focus-indicator',\n        'role': 'button',\n        '[attr.id]': 'panel._headerId',\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.aria-controls]': '_getPanelId()',\n        '[attr.aria-expanded]': '_isExpanded()',\n        '[attr.aria-disabled]': 'panel.disabled',\n        '[class.mat-expanded]': '_isExpanded()',\n        '[class.mat-expansion-toggle-indicator-after]': \"_getTogglePosition() === 'after'\",\n        '[class.mat-expansion-toggle-indicator-before]': \"_getTogglePosition() === 'before'\",\n        '(click)': '_toggle()',\n        '(keydown)': '_keydown($event)',\n        '[@.disabled]': '_animationsDisabled',\n        '(@expansionHeight.start)': '_animationStarted()',\n        '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\"\n      },\n      styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;position:relative}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatExpansionPanel,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.FocusMonitor\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    expandedHeight: [{\n      type: Input\n    }],\n    collapsedHeight: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  MatExpansionPanelHeader.prototype._parentChangeSubscription;\n  /**\n   * Whether Angular animations in the panel header should be disabled.\n   * @type {?}\n   */\n\n  MatExpansionPanelHeader.prototype._animationsDisabled;\n  /**\n   * Height of the header while the panel is expanded.\n   * @type {?}\n   */\n\n  MatExpansionPanelHeader.prototype.expandedHeight;\n  /**\n   * Height of the header while the panel is collapsed.\n   * @type {?}\n   */\n\n  MatExpansionPanelHeader.prototype.collapsedHeight;\n  /** @type {?} */\n\n  MatExpansionPanelHeader.prototype.panel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanelHeader.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanelHeader.prototype._focusMonitor;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatExpansionPanelHeader.prototype._changeDetectorRef;\n}\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n\n\nvar MatExpansionPanelDescription = function MatExpansionPanelDescription() {\n  _classCallCheck(this, MatExpansionPanelDescription);\n};\n\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) {\n  return new (t || MatExpansionPanelDescription)();\n};\n\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelDescription,\n  selectors: [[\"mat-panel-description\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-description\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-description',\n      host: {\n        class: 'mat-expansion-panel-header-description'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n\n\nvar MatExpansionPanelTitle = function MatExpansionPanelTitle() {\n  _classCallCheck(this, MatExpansionPanelTitle);\n};\n\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) {\n  return new (t || MatExpansionPanelTitle)();\n};\n\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatExpansionPanelTitle,\n  selectors: [[\"mat-panel-title\"]],\n  hostAttrs: [1, \"mat-expansion-panel-header-title\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-panel-title',\n      host: {\n        class: 'mat-expansion-panel-header-title'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/accordion.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Directive for a Material Design Accordion.\n */\n\n\nvar MatAccordion = /*#__PURE__*/function (_CdkAccordion) {\n  _inherits(MatAccordion, _CdkAccordion);\n\n  var _super2 = _createSuper(MatAccordion);\n\n  function MatAccordion() {\n    var _this4;\n\n    _classCallCheck(this, MatAccordion);\n\n    _this4 = _super2.apply(this, arguments);\n    /**\n     * Headers belonging to this accordion.\n     */\n\n    _this4._ownHeaders = new QueryList();\n    _this4._hideToggle = false;\n    /**\n     * Display mode used for all expansion panels in the accordion. Currently two display\n     * modes exist:\n     *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n     *     panel at a different elevation from the rest of the accordion.\n     *  flat - no spacing is placed around expanded panels, showing all panels at the same\n     *     elevation.\n     */\n\n    _this4.displayMode = 'default';\n    /**\n     * The position of the expansion indicator.\n     */\n\n    _this4.togglePosition = 'after';\n    return _this4;\n  }\n  /**\n   * Whether the expansion indicator should be hidden.\n   * @return {?}\n   */\n\n\n  _createClass(MatAccordion, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this5 = this;\n\n      this._headers.changes.pipe(startWith(this._headers)).subscribe(\n      /**\n      * @param {?} headers\n      * @return {?}\n      */\n      function (headers) {\n        _this5._ownHeaders.reset(headers.filter(\n        /**\n        * @param {?} header\n        * @return {?}\n        */\n        function (header) {\n          return header.panel.accordion === _this5;\n        }));\n\n        _this5._ownHeaders.notifyOnChanges();\n      });\n\n      this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n    }\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleHeaderKeydown\",\n    value: function _handleHeaderKeydown(event) {\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n\n      if (keyCode === HOME) {\n        if (!hasModifierKey(event)) {\n          manager.setFirstItemActive();\n          event.preventDefault();\n        }\n      } else if (keyCode === END) {\n        if (!hasModifierKey(event)) {\n          manager.setLastItemActive();\n          event.preventDefault();\n        }\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleHeaderFocus\",\n    value: function _handleHeaderFocus(header) {\n      this._keyManager.updateActiveItem(header);\n    }\n  }, {\n    key: \"hideToggle\",\n    get: function get() {\n      return this._hideToggle;\n    }\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    ,\n    set: function set(show) {\n      this._hideToggle = coerceBooleanProperty(show);\n    }\n  }]);\n\n  return MatAccordion;\n}(CdkAccordion);\n\nMatAccordion.ɵfac = function MatAccordion_Factory(t) {\n  return ɵMatAccordion_BaseFactory(t || MatAccordion);\n};\n\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatAccordion,\n  selectors: [[\"mat-accordion\"]],\n  contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-accordion\"],\n  hostVars: 2,\n  hostBindings: function MatAccordion_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    }\n  },\n  inputs: {\n    multi: \"multi\",\n    displayMode: \"displayMode\",\n    togglePosition: \"togglePosition\",\n    hideToggle: \"hideToggle\"\n  },\n  exportAs: [\"matAccordion\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatAccordion.propDecorators = {\n  _headers: [{\n    type: ContentChildren,\n    args: [MatExpansionPanelHeader, {\n      descendants: true\n    }]\n  }],\n  hideToggle: [{\n    type: Input\n  }],\n  displayMode: [{\n    type: Input\n  }],\n  togglePosition: [{\n    type: Input\n  }]\n};\nvar ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-accordion',\n      exportAs: 'matAccordion',\n      inputs: ['multi'],\n      providers: [{\n        provide: MAT_ACCORDION,\n        useExisting: MatAccordion\n      }],\n      host: {\n        class: 'mat-accordion',\n        // Class binding which is only used by the test harness as there is no other\n        // way for the harness to detect if multiple panel support is enabled.\n        '[class.mat-accordion-multi]': 'this.multi'\n      }\n    }]\n  }], null, {\n    displayMode: [{\n      type: Input\n    }],\n    togglePosition: [{\n      type: Input\n    }],\n    hideToggle: [{\n      type: Input\n    }],\n    _headers: [{\n      type: ContentChildren,\n      args: [MatExpansionPanelHeader, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatAccordion.ngAcceptInputType_hideToggle;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatAccordion.prototype._keyManager;\n  /**\n   * Headers belonging to this accordion.\n   * @type {?}\n   * @private\n   */\n\n  MatAccordion.prototype._ownHeaders;\n  /**\n   * All headers inside the accordion. Includes headers inside nested accordions.\n   * @type {?}\n   */\n\n  MatAccordion.prototype._headers;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatAccordion.prototype._hideToggle;\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   * @type {?}\n   */\n\n  MatAccordion.prototype.displayMode;\n  /**\n   * The position of the expansion indicator.\n   * @type {?}\n   */\n\n  MatAccordion.prototype.togglePosition;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/expansion-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatExpansionModule = function MatExpansionModule() {\n  _classCallCheck(this, MatExpansionModule);\n};\n\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatExpansionModule\n});\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatExpansionModule_Factory(t) {\n    return new (t || MatExpansionModule)();\n  },\n  imports: [[CommonModule, CdkAccordionModule, PortalModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, {\n    declarations: function declarations() {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    },\n    imports: function imports() {\n      return [CommonModule, CdkAccordionModule, PortalModule];\n    },\n    exports: function exports() {\n      return [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, CdkAccordionModule, PortalModule],\n      exports: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent],\n      declarations: [MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelTitle, MatExpansionPanelDescription, MatExpansionPanelContent]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/expansion/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };","map":{"version":3,"sources":["../../../../../material/expansion/accordion-base.ts","../../../../../material/expansion/expansion-animations.ts","../../../../../material/expansion/expansion-panel-content.ts","../../../../../material/expansion/expansion-panel.ts","../../../../../material/expansion/expansion-panel-header.ts","../../../../../material/expansion/accordion.ts","../../../../../material/expansion/expansion-module.ts","../../../../../material/expansion/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionTogglePosition} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\nimport {MatAccordionTogglePosition} from './accordion-base';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@.disabled]': '_animationsDisabled',\n    '(@expansionHeight.start)': '_animationStarted()',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  /** Whether Angular animations in the panel header should be disabled. */\n  _animationsDisabled = true;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  _animationStarted() {\n    // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n    // there to work around a bug in Angular (see #13088), however this introduces a different\n    // issue. The new transition will cause the header to animate in on init (see #16067), if the\n    // consumer has set a header height that is different from the default one. We work around it\n    // by disabling animations on the header and re-enabling them after the first animation has run.\n    // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n    // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n    // for https://github.com/angular/angular/issues/18847 to be resolved.\n    this._animationsDisabled = false;\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program', options?: FocusOptions) {\n    this._focusMonitor.focusVia(this._element, origin, options);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END, hasModifierKey} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      if (!hasModifierKey(event)) {\n        manager.setFirstItemActive();\n        event.preventDefault();\n      }\n    } else if (keyCode === END) {\n      if (!hasModifierKey(event)) {\n        manager.setLastItemActive();\n        event.preventDefault();\n      }\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}