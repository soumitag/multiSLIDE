{"ast":null,"code":"import _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/progress-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Last animation end data.\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"primaryValueBar\"];\n\nfunction ProgressAnimationEnd() {}\n\nif (false) {\n  /** @type {?} */\n  ProgressAnimationEnd.prototype.value;\n} // Boilerplate for applying mixins to MatProgressBar.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatProgressBarBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatProgressBarBase(_elementRef) {\n  _classCallCheck(this, MatProgressBarBase);\n\n  this._elementRef = _elementRef;\n};\n\nif (false) {\n  /** @type {?} */\n  MatProgressBarBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nvar _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', {\n  providedIn: 'root',\n  factory: MAT_PROGRESS_BAR_LOCATION_FACTORY\n});\n/**\n * Stubbed out location for `MatProgressBar`.\n * \\@docs-private\n * @record\n */\n\nfunction MatProgressBarLocation() {}\n\nif (false) {\n  /** @type {?} */\n  MatProgressBarLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n  /** @type {?} */\n  var _document = inject(DOCUMENT);\n  /** @type {?} */\n\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname:\n    /**\n    * @return {?}\n    */\n    function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\n\n\nvar progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\n\nvar MatProgressBar = /*#__PURE__*/function (_MatProgressBarMixinB) {\n  _inherits(MatProgressBar, _MatProgressBarMixinB);\n\n  var _super = _createSuper(MatProgressBar);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?=} _animationMode\n   * @param {?=} location\n   */\n  function MatProgressBar(_elementRef, _ngZone, _animationMode,\n  /**\n   * @deprecated `location` parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  location) {\n    var _this;\n\n    _classCallCheck(this, MatProgressBar);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._ngZone = _ngZone;\n    _this._animationMode = _animationMode;\n    /**\n     * Flag that indicates whether NoopAnimations mode is set to true.\n     */\n\n    _this._isNoopAnimation = false;\n    _this._value = 0;\n    _this._bufferValue = 0;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     */\n\n    _this.animationEnd = new EventEmitter();\n    /**\n     * Reference to animation end subscription to be unsubscribed on destroy.\n     */\n\n    _this._animationEndSubscription = Subscription.EMPTY;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     */\n\n    _this.mode = 'determinate';\n    /**\n     * ID of the progress bar.\n     */\n\n    _this.progressbarId = \"mat-progress-bar-\".concat(progressbarId++); // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n\n    /** @type {?} */\n\n    var path = location ? location.getPathname().split('#')[0] : '';\n    _this._rectangleFillValue = \"url('\".concat(path, \"#\").concat(_this.progressbarId, \"')\");\n    _this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    return _this;\n  }\n  /**\n   * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n   * @return {?}\n   */\n\n\n  _createClass(MatProgressBar, [{\n    key: \"_primaryTransform\",\n\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    value: function _primaryTransform() {\n      /** @type {?} */\n      var scale = this.value / 100;\n      return {\n        transform: \"scaleX(\".concat(scale, \")\")\n      };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_bufferTransform\",\n    value: function _bufferTransform() {\n      if (this.mode === 'buffer') {\n        /** @type {?} */\n        var scale = this.bufferValue / 100;\n        return {\n          transform: \"scaleX(\".concat(scale, \")\")\n        };\n      }\n\n      return null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        /** @type {?} */\n        var element = _this2._primaryValueBar.nativeElement;\n        _this2._animationEndSubscription =\n        /** @type {?} */\n        fromEvent(element, 'transitionend').pipe(filter(\n        /**\n        * @param {?} e\n        * @return {?}\n        */\n        function (e) {\n          return e.target === element;\n        })).subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          if (_this2.mode === 'determinate' || _this2.mode === 'buffer') {\n            _this2._ngZone.run(\n            /**\n            * @return {?}\n            */\n            function () {\n              return _this2.animationEnd.next({\n                value: _this2.value\n              });\n            });\n          }\n        });\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._animationEndSubscription.unsubscribe();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._value = clamp(coerceNumberProperty(v) || 0);\n    }\n    /**\n     * Buffer value of the progress bar. Defaults to zero.\n     * @return {?}\n     */\n\n  }, {\n    key: \"bufferValue\",\n    get: function get() {\n      return this._bufferValue;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    ,\n    set: function set(v) {\n      this._bufferValue = clamp(v || 0);\n    }\n  }]);\n\n  return MatProgressBar;\n}(_MatProgressBarMixinBase);\n\nMatProgressBar.ɵfac = function MatProgressBar_Factory(t) {\n  return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8));\n};\n\nMatProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatProgressBar,\n  selectors: [[\"mat-progress-bar\"]],\n  viewQuery: function MatProgressBar_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"],\n  hostVars: 4,\n  hostBindings: function MatProgressBar_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n      ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    mode: \"mode\",\n    value: \"value\",\n    bufferValue: \"bufferValue\"\n  },\n  outputs: {\n    animationEnd: \"animationEnd\"\n  },\n  exportAs: [\"matProgressBar\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 9,\n  vars: 4,\n  consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]],\n  template: function MatProgressBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵnamespaceSVG();\n      ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n      ɵngcc0.ɵɵelementStart(1, \"defs\");\n      ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n      ɵngcc0.ɵɵelement(3, \"circle\", 2);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"rect\", 3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵnamespaceHTML();\n      ɵngcc0.ɵɵelement(5, \"div\", 4);\n      ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n      ɵngcc0.ɵɵelement(8, \"div\", 7);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n    }\n  },\n  directives: [ɵngcc1.NgStyle],\n  styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatProgressBar.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_PROGRESS_BAR_LOCATION]\n    }]\n  }];\n};\n\nMatProgressBar.propDecorators = {\n  value: [{\n    type: Input\n  }],\n  bufferValue: [{\n    type: Input\n  }],\n  _primaryValueBar: [{\n    type: ViewChild,\n    args: ['primaryValueBar']\n  }],\n  animationEnd: [{\n    type: Output\n  }],\n  mode: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatProgressBar, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-bar',\n      exportAs: 'matProgressBar',\n      host: {\n        'role': 'progressbar',\n        'aria-valuemin': '0',\n        'aria-valuemax': '100',\n        '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n        '[attr.mode]': 'mode',\n        'class': 'mat-progress-bar',\n        '[class._mat-animation-noopable]': '_isNoopAnimation'\n      },\n      inputs: ['color'],\n      template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_PROGRESS_BAR_LOCATION]\n      }]\n    }];\n  }, {\n    animationEnd: [{\n      type: Output\n    }],\n    mode: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    bufferValue: [{\n      type: Input\n    }],\n    _primaryValueBar: [{\n      type: ViewChild,\n      args: ['primaryValueBar']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatProgressBar.ngAcceptInputType_value;\n  /**\n   * Flag that indicates whether NoopAnimations mode is set to true.\n   * @type {?}\n   */\n\n  MatProgressBar.prototype._isNoopAnimation;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatProgressBar.prototype._value;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatProgressBar.prototype._bufferValue;\n  /** @type {?} */\n\n  MatProgressBar.prototype._primaryValueBar;\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   * @type {?}\n   */\n\n  MatProgressBar.prototype.animationEnd;\n  /**\n   * Reference to animation end subscription to be unsubscribed on destroy.\n   * @type {?}\n   * @private\n   */\n\n  MatProgressBar.prototype._animationEndSubscription;\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   * @type {?}\n   */\n\n  MatProgressBar.prototype.mode;\n  /**\n   * ID of the progress bar.\n   * @type {?}\n   */\n\n  MatProgressBar.prototype.progressbarId;\n  /**\n   * Attribute to be used for the `fill` attribute on the internal `rect` element.\n   * @type {?}\n   */\n\n  MatProgressBar.prototype._rectangleFillValue;\n  /** @type {?} */\n\n  MatProgressBar.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatProgressBar.prototype._ngZone;\n  /** @type {?} */\n\n  MatProgressBar.prototype._animationMode;\n}\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\n\n\nfunction clamp(v) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  return Math.max(min, Math.min(max, v));\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/progress-bar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatProgressBarModule = function MatProgressBarModule() {\n  _classCallCheck(this, MatProgressBarModule);\n};\n\nMatProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatProgressBarModule\n});\nMatProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatProgressBarModule_Factory(t) {\n    return new (t || MatProgressBarModule)();\n  },\n  imports: [[CommonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, {\n    declarations: function declarations() {\n      return [MatProgressBar];\n    },\n    imports: function imports() {\n      return [CommonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatProgressBar, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatProgressBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatProgressBar, MatCommonModule],\n      declarations: [MatProgressBar]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };","map":{"version":3,"sources":["../../../../../material/progress-bar/progress-bar.ts","../../../../../material/progress-bar/progress-bar-module.ts","../../../../../material/progress-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {coerceNumberProperty, NumberInput} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {fromEvent, Observable, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\n\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nclass MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nconst _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate' | 'buffer' | 'query';\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': '_isNoopAnimation',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(coerceNumberProperty(v) || 0);\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: ProgressBarMode = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n    return null;\n  }\n\n  ngAfterViewInit() {\n    // Run outside angular so change detection didn't get triggered on every transition end\n    // instead only on the animation that we care about (primary value bar's transitionend)\n    this._ngZone.runOutsideAngular((() => {\n      const element = this._primaryValueBar.nativeElement;\n\n      this._animationEndSubscription =\n        (fromEvent(element, 'transitionend') as Observable<TransitionEvent>)\n          .pipe(filter(((e: TransitionEvent) => e.target === element)))\n          .subscribe(() => {\n            if (this.mode === 'determinate' || this.mode === 'buffer') {\n              this._ngZone.run(() => this.animationEnd.next({value: this.value}));\n            }\n          });\n    }));\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_value: NumberInput;\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}