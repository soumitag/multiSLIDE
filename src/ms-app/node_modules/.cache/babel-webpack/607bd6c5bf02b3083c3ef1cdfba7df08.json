{"ast":null,"code":"import _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, PortalInjector, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, TemplateRef, Injectable, Injector, Optional, SkipSelf, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Event that is emitted when a snack bar is dismissed.\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.action();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n  }\n}\n\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) {}\n\nfunction MatSnackBarDismiss() {}\n\nif (false) {\n  /**\n   * Whether the snack bar was dismissed using the action button.\n   * @type {?}\n   */\n  MatSnackBarDismiss.prototype.dismissedByAction;\n}\n/**\n * Maximum amount of milliseconds that can be passed into setTimeout.\n * @type {?}\n */\n\n\nvar MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\n\nvar MatSnackBarRef = /*#__PURE__*/function () {\n  /**\n   * @param {?} containerInstance\n   * @param {?} _overlayRef\n   */\n  function MatSnackBarRef(containerInstance, _overlayRef) {\n    var _this = this;\n\n    _classCallCheck(this, MatSnackBarRef);\n\n    this._overlayRef = _overlayRef;\n    /**\n     * Subject for notifying the user that the snack bar has been dismissed.\n     */\n\n    this._afterDismissed = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar has opened and appeared.\n     */\n\n    this._afterOpened = new Subject();\n    /**\n     * Subject for notifying the user that the snack bar action was called.\n     */\n\n    this._onAction = new Subject();\n    /**\n     * Whether the snack bar was dismissed using the action button.\n     */\n\n    this._dismissedByAction = false;\n    this.containerInstance = containerInstance; // Dismiss snackbar on action.\n\n    this.onAction().subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this.dismiss();\n    });\n\n    containerInstance._onExit.subscribe(\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this._finishDismiss();\n    });\n  }\n  /**\n   * Dismisses the snack bar.\n   * @return {?}\n   */\n\n\n  _createClass(MatSnackBarRef, [{\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (!this._afterDismissed.closed) {\n        this.containerInstance.exit();\n      }\n\n      clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dismissWithAction\",\n    value: function dismissWithAction() {\n      if (!this._onAction.closed) {\n        this._dismissedByAction = true;\n\n        this._onAction.next();\n\n        this._onAction.complete();\n      }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeWithAction\",\n    value: function closeWithAction() {\n      this.dismissWithAction();\n    }\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dismissAfter\",\n    value: function _dismissAfter(duration) {\n      var _this2 = this;\n\n      // Note that we need to cap the duration to the maximum value for setTimeout, because\n      // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n      this._durationTimeoutId = setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this2.dismiss();\n      }, Math.min(duration, MAX_TIMEOUT));\n    }\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      if (!this._afterOpened.closed) {\n        this._afterOpened.next();\n\n        this._afterOpened.complete();\n      }\n    }\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_finishDismiss\",\n    value: function _finishDismiss() {\n      this._overlayRef.dispose();\n\n      if (!this._onAction.closed) {\n        this._onAction.complete();\n      }\n\n      this._afterDismissed.next({\n        dismissedByAction: this._dismissedByAction\n      });\n\n      this._afterDismissed.complete();\n\n      this._dismissedByAction = false;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterDismissed\",\n    value: function afterDismissed() {\n      return this._afterDismissed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this.containerInstance._onEnter;\n    }\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n\n  }, {\n    key: \"onAction\",\n    value: function onAction() {\n      return this._onAction.asObservable();\n    }\n  }]);\n\n  return MatSnackBarRef;\n}();\n\nif (false) {\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @type {?}\n   */\n  MatSnackBarRef.prototype.instance;\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatSnackBarRef.prototype.containerInstance;\n  /**\n   * Subject for notifying the user that the snack bar has been dismissed.\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarRef.prototype._afterDismissed;\n  /**\n   * Subject for notifying the user that the snack bar has opened and appeared.\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarRef.prototype._afterOpened;\n  /**\n   * Subject for notifying the user that the snack bar action was called.\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarRef.prototype._onAction;\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarRef.prototype._durationTimeoutId;\n  /**\n   * Whether the snack bar was dismissed using the action button.\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarRef.prototype._dismissedByAction;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarRef.prototype._overlayRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\n\n\nvar MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\n\nvar MatSnackBarConfig = function MatSnackBarConfig() {\n  _classCallCheck(this, MatSnackBarConfig);\n\n  /**\n   * The politeness level for the MatAriaLiveAnnouncer announcement.\n   */\n  this.politeness = 'assertive';\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n\n  this.announcementMessage = '';\n  /**\n   * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n   */\n\n  this.duration = 0;\n  /**\n   * Data being injected into the child component.\n   */\n\n  this.data = null;\n  /**\n   * The horizontal position to place the snack bar.\n   */\n\n  this.horizontalPosition = 'center';\n  /**\n   * The vertical position to place the snack bar.\n   */\n\n  this.verticalPosition = 'bottom';\n};\n\nif (false) {\n  /**\n   * The politeness level for the MatAriaLiveAnnouncer announcement.\n   * @type {?}\n   */\n  MatSnackBarConfig.prototype.politeness;\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.announcementMessage;\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.viewContainerRef;\n  /**\n   * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.duration;\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.panelClass;\n  /**\n   * Text layout direction for the snack bar.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.direction;\n  /**\n   * Data being injected into the child component.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.data;\n  /**\n   * The horizontal position to place the snack bar.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.horizontalPosition;\n  /**\n   * The vertical position to place the snack bar.\n   * @type {?}\n   */\n\n  MatSnackBarConfig.prototype.verticalPosition;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/simple-snack-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n\n\nvar SimpleSnackBar = /*#__PURE__*/function () {\n  /**\n   * @param {?} snackBarRef\n   * @param {?} data\n   */\n  function SimpleSnackBar(snackBarRef, data) {\n    _classCallCheck(this, SimpleSnackBar);\n\n    this.snackBarRef = snackBarRef;\n    this.data = data;\n  }\n  /**\n   * Performs the action on the snack bar.\n   * @return {?}\n   */\n\n\n  _createClass(SimpleSnackBar, [{\n    key: \"action\",\n    value: function action() {\n      this.snackBarRef.dismissWithAction();\n    }\n    /**\n     * If the action button should be shown.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasAction\",\n    get: function get() {\n      return !!this.data.action;\n    }\n  }]);\n\n  return SimpleSnackBar;\n}();\n\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) {\n  return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA));\n};\n\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: SimpleSnackBar,\n  selectors: [[\"simple-snack-bar\"]],\n  hostAttrs: [1, \"mat-simple-snackbar\"],\n  decls: 3,\n  vars: 2,\n  consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]],\n  template: function SimpleSnackBar_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\");\n      ɵngcc0.ɵɵtext(1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc2.MatButton],\n  styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nSimpleSnackBar.ctorParameters = function () {\n  return [{\n    type: MatSnackBarRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DATA]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n    type: Component,\n    args: [{\n      selector: 'simple-snack-bar',\n      template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'class': 'mat-simple-snackbar'\n      },\n      styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSnackBarRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DATA]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Data that was injected into the snack bar.\n   * @type {?}\n   */\n  SimpleSnackBar.prototype.data;\n  /** @type {?} */\n\n  SimpleSnackBar.prototype.snackBarRef;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\n\n\nvar matSnackBarAnimations = {\n  /**\n   * Animation that shows and hides a snack bar.\n   */\n  snackBarState: trigger('state', [state('void, hidden', style({\n    transform: 'scale(0.8)',\n    opacity: 0\n  })), state('visible', style({\n    transform: 'scale(1)',\n    opacity: 1\n  })), transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\n\nvar MatSnackBarContainer = /*#__PURE__*/function (_BasePortalOutlet) {\n  _inherits(MatSnackBarContainer, _BasePortalOutlet);\n\n  var _super = _createSuper(MatSnackBarContainer);\n\n  /**\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} snackBarConfig\n   */\n  function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n    var _this3;\n\n    _classCallCheck(this, MatSnackBarContainer);\n\n    _this3 = _super.call(this);\n    _this3._ngZone = _ngZone;\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3.snackBarConfig = snackBarConfig;\n    /**\n     * Whether the component has been destroyed.\n     */\n\n    _this3._destroyed = false;\n    /**\n     * Subject for notifying that the snack bar has exited from view.\n     */\n\n    _this3._onExit = new Subject();\n    /**\n     * Subject for notifying that the snack bar has finished entering the view.\n     */\n\n    _this3._onEnter = new Subject();\n    /**\n     * The state of the snack bar animations.\n     */\n\n    _this3._animationState = 'void';\n    /**\n     * Attaches a DOM portal to the snack bar container.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     */\n\n    _this3.attachDomPortal =\n    /**\n    * @param {?} portal\n    * @return {?}\n    */\n    function (portal) {\n      _this3._assertNotAttached();\n\n      _this3._applySnackBarClasses();\n\n      return _this3._portalOutlet.attachDomPortal(portal);\n    }; // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n\n\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      _this3._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      _this3._role = null;\n    } else {\n      _this3._role = 'status';\n    }\n\n    return _this3;\n  }\n  /**\n   * Attach a component portal as content to this snack bar container.\n   * @template T\n   * @param {?} portal\n   * @return {?}\n   */\n\n\n  _createClass(MatSnackBarContainer, [{\n    key: \"attachComponentPortal\",\n    value: function attachComponentPortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n\n  }, {\n    key: \"attachTemplatePortal\",\n    value: function attachTemplatePortal(portal) {\n      this._assertNotAttached();\n\n      this._applySnackBarClasses();\n\n      return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onAnimationEnd\",\n    value: function onAnimationEnd(event) {\n      var fromState = event.fromState,\n          toState = event.toState;\n\n      if (toState === 'void' && fromState !== 'void' || toState === 'hidden') {\n        this._completeExit();\n      }\n\n      if (toState === 'visible') {\n        // Note: we shouldn't use `this` inside the zone callback,\n        // because it can cause a memory leak.\n\n        /** @type {?} */\n        var onEnter = this._onEnter;\n\n        this._ngZone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          onEnter.next();\n          onEnter.complete();\n        });\n      }\n    }\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      if (!this._destroyed) {\n        this._animationState = 'visible';\n\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n      // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n      // `MatSnackBar.open`).\n      this._animationState = 'hidden'; // Mark this element with an 'exit' attribute to indicate that the snackbar has\n      // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n      // test harness.\n\n      this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n      return this._onExit;\n    }\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed = true;\n\n      this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_completeExit\",\n    value: function _completeExit() {\n      var _this4 = this;\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this4._onExit.next();\n\n        _this4._onExit.complete();\n      });\n    }\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_applySnackBarClasses\",\n    value: function _applySnackBarClasses() {\n      /** @type {?} */\n      var element = this._elementRef.nativeElement;\n      /** @type {?} */\n\n      var panelClasses = this.snackBarConfig.panelClass;\n\n      if (panelClasses) {\n        if (Array.isArray(panelClasses)) {\n          // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n          panelClasses.forEach(\n          /**\n          * @param {?} cssClass\n          * @return {?}\n          */\n          function (cssClass) {\n            return element.classList.add(cssClass);\n          });\n        } else {\n          element.classList.add(panelClasses);\n        }\n      }\n\n      if (this.snackBarConfig.horizontalPosition === 'center') {\n        element.classList.add('mat-snack-bar-center');\n      }\n\n      if (this.snackBarConfig.verticalPosition === 'top') {\n        element.classList.add('mat-snack-bar-top');\n      }\n    }\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_assertNotAttached\",\n    value: function _assertNotAttached() {\n      if (this._portalOutlet.hasAttached()) {\n        throw Error('Attempting to attach snack bar content after content is already attached');\n      }\n    }\n  }]);\n\n  return MatSnackBarContainer;\n}(BasePortalOutlet);\n\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) {\n  return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig));\n};\n\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSnackBarContainer,\n  selectors: [[\"snack-bar-container\"]],\n  viewQuery: function MatSnackBarContainer_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-snack-bar-container\"],\n  hostVars: 2,\n  hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) {\n        return ctx.onAnimationEnd($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n      ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@state\", ctx._animationState);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatSnackBarContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  directives: [ɵngcc3.CdkPortalOutlet],\n  styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSnackBarAnimations.snackBarState]\n  }\n});\n/** @nocollapse */\n\nMatSnackBarContainer.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatSnackBarConfig\n  }];\n};\n\nMatSnackBarContainer.propDecorators = {\n  _portalOutlet: [{\n    type: ViewChild,\n    args: [CdkPortalOutlet, {\n      static: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n    type: Component,\n    args: [{\n      selector: 'snack-bar-container',\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      // In Ivy embedded views will be change detected from their declaration place, rather than\n      // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n      // because it might cause snack bars that were opened from a template not to be out of date.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      animations: [matSnackBarAnimations.snackBarState],\n      host: {\n        '[attr.role]': '_role',\n        'class': 'mat-snack-bar-container',\n        '[@state]': '_animationState',\n        '(@state.done)': 'onAnimationEnd($event)'\n      },\n      styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSnackBarConfig\n    }];\n  }, {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /**\n   * Whether the component has been destroyed.\n   * @type {?}\n   * @private\n   */\n  MatSnackBarContainer.prototype._destroyed;\n  /**\n   * The portal outlet inside of this container into which the snack bar content will be loaded.\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype._portalOutlet;\n  /**\n   * Subject for notifying that the snack bar has exited from view.\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype._onExit;\n  /**\n   * Subject for notifying that the snack bar has finished entering the view.\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype._onEnter;\n  /**\n   * The state of the snack bar animations.\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype._animationState;\n  /**\n   * ARIA role for the snack bar container.\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype._role;\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * \\@breaking-change 10.0.0\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype.attachDomPortal;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarContainer.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarContainer.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBarContainer.prototype._changeDetectorRef;\n  /**\n   * The snack bar configuration.\n   * @type {?}\n   */\n\n  MatSnackBarContainer.prototype.snackBarConfig;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSnackBarModule = function MatSnackBarModule() {\n  _classCallCheck(this, MatSnackBarModule);\n};\n\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatSnackBarModule\n});\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatSnackBarModule_Factory(t) {\n    return new (t || MatSnackBarModule)();\n  },\n  imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, {\n    declarations: function declarations() {\n      return [MatSnackBarContainer, SimpleSnackBar];\n    },\n    imports: function imports() {\n      return [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatSnackBarContainer, MatCommonModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n      exports: [MatSnackBarContainer, MatCommonModule],\n      declarations: [MatSnackBarContainer, SimpleSnackBar],\n      entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/snack-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\n\n\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n  providedIn: 'root',\n  factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n  return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n\n\nvar MatSnackBar = /*#__PURE__*/function () {\n  /**\n   * @param {?} _overlay\n   * @param {?} _live\n   * @param {?} _injector\n   * @param {?} _breakpointObserver\n   * @param {?} _parentSnackBar\n   * @param {?} _defaultConfig\n   */\n  function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n    _classCallCheck(this, MatSnackBar);\n\n    this._overlay = _overlay;\n    this._live = _live;\n    this._injector = _injector;\n    this._breakpointObserver = _breakpointObserver;\n    this._parentSnackBar = _parentSnackBar;\n    this._defaultConfig = _defaultConfig;\n    /**\n     * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n     * If there is a parent snack-bar service, all operations should delegate to that parent\n     * via `_openedSnackBarRef`.\n     */\n\n    this._snackBarRefAtThisLevel = null;\n  }\n  /**\n   * Reference to the currently opened snackbar at *any* level.\n   * @return {?}\n   */\n\n\n  _createClass(MatSnackBar, [{\n    key: \"openFromComponent\",\n\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    value: function openFromComponent(component, config) {\n      return (\n        /** @type {?} */\n        this._attach(component, config)\n      );\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"openFromTemplate\",\n    value: function openFromTemplate(template, config) {\n      return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(message) {\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var config = arguments.length > 2 ? arguments[2] : undefined;\n\n      /** @type {?} */\n      var _config = Object.assign(Object.assign({}, this._defaultConfig), config); // Since the user doesn't have access to the component, we can\n      // override the data to pass in our own message and action.\n\n\n      _config.data = {\n        message: message,\n        action: action\n      };\n\n      if (!_config.announcementMessage) {\n        _config.announcementMessage = message;\n      }\n\n      return this.openFromComponent(SimpleSnackBar, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      if (this._openedSnackBarRef) {\n        this._openedSnackBarRef.dismiss();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // Only dismiss the snack bar at the current level on destroy.\n      if (this._snackBarRefAtThisLevel) {\n        this._snackBarRefAtThisLevel.dismiss();\n      }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attachSnackBarContainer\",\n    value: function _attachSnackBarContainer(overlayRef, config) {\n      /** @type {?} */\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      /** @type {?} */\n\n      var injector = new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarConfig, config]]));\n      /** @type {?} */\n\n      var containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n      /** @type {?} */\n\n      var containerRef = overlayRef.attach(containerPortal);\n      containerRef.instance.snackBarConfig = config;\n      return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n\n  }, {\n    key: \"_attach\",\n    value: function _attach(content, userConfig) {\n      /** @type {?} */\n      var config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n      /** @type {?} */\n\n      var overlayRef = this._createOverlay(config);\n      /** @type {?} */\n\n\n      var container = this._attachSnackBarContainer(overlayRef, config);\n      /** @type {?} */\n\n\n      var snackBarRef = new MatSnackBarRef(container, overlayRef);\n\n      if (content instanceof TemplateRef) {\n        /** @type {?} */\n        var portal = new TemplatePortal(content,\n        /** @type {?} */\n        null,\n        /** @type {?} */\n        {\n          $implicit: config.data,\n          snackBarRef: snackBarRef\n        });\n        snackBarRef.instance = container.attachTemplatePortal(portal);\n      } else {\n        /** @type {?} */\n        var injector = this._createInjector(config, snackBarRef);\n        /** @type {?} */\n\n\n        var _portal = new ComponentPortal(content, undefined, injector);\n        /** @type {?} */\n\n\n        var contentRef = container.attachComponentPortal(_portal); // We can't pass this via the injector, because the injector is created earlier.\n\n        snackBarRef.instance = contentRef.instance;\n      } // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n      // appropriate. This class is applied to the overlay element because the overlay must expand to\n      // fill the width of the screen for full width snackbars.\n\n\n      this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(\n      /**\n      * @param {?} state\n      * @return {?}\n      */\n      function (state) {\n        /** @type {?} */\n        var classList = overlayRef.overlayElement.classList;\n        /** @type {?} */\n\n        var className = 'mat-snack-bar-handset';\n        state.matches ? classList.add(className) : classList.remove(className);\n      });\n\n      this._animateSnackBar(snackBarRef, config);\n\n      this._openedSnackBarRef = snackBarRef;\n      return this._openedSnackBarRef;\n    }\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n\n  }, {\n    key: \"_animateSnackBar\",\n    value: function _animateSnackBar(snackBarRef, config) {\n      var _this5 = this;\n\n      // When the snackbar is dismissed, clear the reference to it.\n      snackBarRef.afterDismissed().subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n        if (_this5._openedSnackBarRef == snackBarRef) {\n          _this5._openedSnackBarRef = null;\n        }\n\n        if (config.announcementMessage) {\n          _this5._live.clear();\n        }\n      });\n\n      if (this._openedSnackBarRef) {\n        // If a snack bar is already in view, dismiss it and enter the\n        // new snack bar after exit animation is complete.\n        this._openedSnackBarRef.afterDismissed().subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          snackBarRef.containerInstance.enter();\n        });\n\n        this._openedSnackBarRef.dismiss();\n      } else {\n        // If no snack bar is in view, enter the new snack bar.\n        snackBarRef.containerInstance.enter();\n      } // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n\n\n      if (config.duration && config.duration > 0) {\n        snackBarRef.afterOpened().subscribe(\n        /**\n        * @return {?}\n        */\n        function () {\n          return snackBarRef._dismissAfter(\n          /** @type {?} */\n          config.duration);\n        });\n      }\n\n      if (config.announcementMessage) {\n        this._live.announce(config.announcementMessage, config.politeness);\n      }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay(config) {\n      /** @type {?} */\n      var overlayConfig = new OverlayConfig();\n      overlayConfig.direction = config.direction;\n      /** @type {?} */\n\n      var positionStrategy = this._overlay.position().global(); // Set horizontal position.\n\n      /** @type {?} */\n\n\n      var isRtl = config.direction === 'rtl';\n      /** @type {?} */\n\n      var isLeft = config.horizontalPosition === 'left' || config.horizontalPosition === 'start' && !isRtl || config.horizontalPosition === 'end' && isRtl;\n      /** @type {?} */\n\n      var isRight = !isLeft && config.horizontalPosition !== 'center';\n\n      if (isLeft) {\n        positionStrategy.left('0');\n      } else if (isRight) {\n        positionStrategy.right('0');\n      } else {\n        positionStrategy.centerHorizontally();\n      } // Set horizontal position.\n\n\n      if (config.verticalPosition === 'top') {\n        positionStrategy.top('0');\n      } else {\n        positionStrategy.bottom('0');\n      }\n\n      overlayConfig.positionStrategy = positionStrategy;\n      return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createInjector\",\n    value: function _createInjector(config, snackBarRef) {\n      /** @type {?} */\n      var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n      return new PortalInjector(userInjector || this._injector, new WeakMap([[MatSnackBarRef, snackBarRef], [MAT_SNACK_BAR_DATA, config.data]]));\n    }\n  }, {\n    key: \"_openedSnackBarRef\",\n    get: function get() {\n      /** @type {?} */\n      var parent = this._parentSnackBar;\n      return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      if (this._parentSnackBar) {\n        this._parentSnackBar._openedSnackBarRef = value;\n      } else {\n        this._snackBarRefAtThisLevel = value;\n      }\n    }\n  }]);\n\n  return MatSnackBar;\n}();\n\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) {\n  return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n};\n/** @nocollapse */\n\n\nMatSnackBar.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: Injector\n  }, {\n    type: BreakpointObserver\n  }, {\n    type: MatSnackBar,\n    decorators: [{\n      type: Optional\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: MatSnackBarConfig,\n    decorators: [{\n      type: Inject,\n      args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n/** @nocollapse */\n\n\nMatSnackBar.ɵprov = ɵɵdefineInjectable({\n  factory: function MatSnackBar_Factory() {\n    return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS));\n  },\n  token: MatSnackBar,\n  providedIn: MatSnackBarModule\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n    type: Injectable,\n    args: [{\n      providedIn: MatSnackBarModule\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc4.Overlay\n    }, {\n      type: ɵngcc5.LiveAnnouncer\n    }, {\n      type: ɵngcc0.Injector\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }, {\n      type: MatSnackBar,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: MatSnackBarConfig,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   * @type {?}\n   * @private\n   */\n  MatSnackBar.prototype._snackBarRefAtThisLevel;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBar.prototype._overlay;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBar.prototype._live;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBar.prototype._injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBar.prototype._breakpointObserver;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBar.prototype._parentSnackBar;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSnackBar.prototype._defaultConfig;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/snack-bar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };","map":{"version":3,"sources":["../../../../../material/snack-bar/snack-bar-ref.ts","../../../../../material/snack-bar/snack-bar-config.ts","../../../../../material/snack-bar/simple-snack-bar.ts","../../../../../material/snack-bar/snack-bar-animations.ts","../../../../../material/snack-bar/snack-bar-container.ts","../../../../../material/snack-bar/snack-bar-module.ts","../../../../../material/snack-bar/snack-bar.ts","../../../../../material/snack-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  DomPortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n\n    // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n      takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      const className = 'mat-snack-bar-handset';\n      state.matches ? classList.add(className) : classList.remove(className);\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}