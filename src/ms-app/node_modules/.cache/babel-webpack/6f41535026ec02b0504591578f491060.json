{"ast":null,"code":"import _toConsumableArray from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/material/core';\nvar _c0 = [\"*\"];\n\nfunction MatChipEvent() {}\n\nif (false) {\n  /**\n   * The chip the event was fired on.\n   * @type {?}\n   */\n  MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\n\n\nvar MatChipSelectionChange =\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nfunction MatChipSelectionChange(source, selected) {\n  var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  _classCallCheck(this, MatChipSelectionChange);\n\n  this.source = source;\n  this.selected = selected;\n  this.isUserInput = isUserInput;\n};\n\nif (false) {\n  /**\n   * Reference to the chip that emitted the event.\n   * @type {?}\n   */\n  MatChipSelectionChange.prototype.source;\n  /**\n   * Whether the chip that emitted the event is selected.\n   * @type {?}\n   */\n\n  MatChipSelectionChange.prototype.selected;\n  /**\n   * Whether the selection change was a result of a user interaction.\n   * @type {?}\n   */\n\n  MatChipSelectionChange.prototype.isUserInput;\n} // Boilerplate for applying mixins to MatChip.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatChipBase =\n/**\n * @param {?} _elementRef\n */\nfunction MatChipBase(_elementRef) {\n  _classCallCheck(this, MatChipBase);\n\n  this._elementRef = _elementRef;\n};\n\nif (false) {\n  /** @type {?} */\n  MatChipBase.prototype.disabled;\n  /** @type {?} */\n\n  MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\n\n\nvar _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\n\n\nvar MatChipAvatar = function MatChipAvatar() {\n  _classCallCheck(this, MatChipAvatar);\n};\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\n\n\nvar MatChipTrailingIcon = function MatChipTrailingIcon() {\n  _classCallCheck(this, MatChipTrailingIcon);\n};\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nvar MatChip = /*#__PURE__*/function (_MatChipMixinBase2) {\n  _inherits(MatChip, _MatChipMixinBase2);\n\n  var _super = _createSuper(MatChip);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   * @param {?} platform\n   * @param {?} globalRippleOptions\n   * @param {?=} animationMode\n   * @param {?=} _changeDetectorRef\n   * @param {?=} tabIndex\n   * @param {?=} _document\n   */\n  function MatChip(_elementRef, _ngZone, platform, globalRippleOptions, // @breaking-change 8.0.0 `animationMode` parameter to become required.\n  animationMode, _changeDetectorRef, tabIndex, // @breaking-change 11.0.0 `_document` parameter to become required.\n  _document) {\n    var _this;\n\n    _classCallCheck(this, MatChip);\n\n    _this = _super.call(this, _elementRef);\n    _this._elementRef = _elementRef;\n    _this._ngZone = _ngZone;\n    _this._changeDetectorRef = _changeDetectorRef;\n    /**\n     * Whether the chip has focus.\n     */\n\n    _this._hasFocus = false;\n    /**\n     * Whether the chip list is selectable\n     */\n\n    _this.chipListSelectable = true;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     */\n\n    _this._chipListMultiple = false;\n    /**\n     * Whether the chip list as a whole is disabled.\n     */\n\n    _this._chipListDisabled = false;\n    _this._selected = false;\n    _this._selectable = true;\n    _this._disabled = false;\n    _this._removable = true;\n    /**\n     * Emits when the chip is focused.\n     */\n\n    _this._onFocus = new Subject();\n    /**\n     * Emits when the chip is blured.\n     */\n\n    _this._onBlur = new Subject();\n    /**\n     * Emitted when the chip is selected or deselected.\n     */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Emitted when the chip is destroyed.\n     */\n\n    _this.destroyed = new EventEmitter();\n    /**\n     * Emitted when a chip is to be removed.\n     */\n\n    _this.removed = new EventEmitter();\n\n    _this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n\n\n    _this._chipRippleTarget = (_document || document).createElement('div');\n\n    _this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n    _this._elementRef.nativeElement.appendChild(_this._chipRippleTarget);\n\n    _this._chipRipple = new RippleRenderer(_assertThisInitialized(_this), _ngZone, _this._chipRippleTarget, platform);\n\n    _this._chipRipple.setupTriggerEvents(_elementRef);\n\n    _this.rippleConfig = globalRippleOptions || {};\n    _this._animationsDisabled = animationMode === 'NoopAnimations';\n    _this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    return _this;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * \\@docs-private\n   * @return {?}\n   */\n\n\n  _createClass(MatChip, [{\n    key: \"_addHostClassName\",\n\n    /**\n     * @return {?}\n     */\n    value: function _addHostClassName() {\n      /** @type {?} */\n      var basicChipAttrName = 'mat-basic-chip';\n      /** @type {?} */\n\n      var element =\n      /** @type {?} */\n      this._elementRef.nativeElement;\n\n      if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n        element.classList.add(basicChipAttrName);\n        return;\n      } else {\n        element.classList.add('mat-standard-chip');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyed.emit({\n        chip: this\n      });\n\n      this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange();\n\n        this._markForCheck();\n      }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      if (this._selected) {\n        this._selected = false;\n\n        this._dispatchSelectionChange();\n\n        this._markForCheck();\n      }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectViaInteraction\",\n    value: function selectViaInteraction() {\n      if (!this._selected) {\n        this._selected = true;\n\n        this._dispatchSelectionChange(true);\n\n        this._markForCheck();\n      }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggleSelected\",\n    value: function toggleSelected() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this._selected = !this.selected;\n\n      this._dispatchSelectionChange(isUserInput);\n\n      this._markForCheck();\n\n      return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!this._hasFocus) {\n        this._elementRef.nativeElement.focus();\n\n        this._onFocus.next({\n          chip: this\n        });\n      }\n\n      this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.removable) {\n        this.removed.emit({\n          chip: this\n        });\n      }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      if (this.disabled) {\n        event.preventDefault();\n      } else {\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case DELETE:\n        case BACKSPACE:\n          // If we are removable, remove the focused chip\n          this.remove(); // Always prevent so page navigation does not occur\n\n          event.preventDefault();\n          break;\n\n        case SPACE:\n          // If we are selectable, toggle the focused chip\n          if (this.selectable) {\n            this.toggleSelected(true);\n          } // Always prevent space from scrolling the page since the list has focus\n\n\n          event.preventDefault();\n          break;\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this2 = this;\n\n      // When animations are enabled, Angular may end up removing the chip from the DOM a little\n      // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n      // that moves focus not the next item. To work around the issue, we defer marking the chip\n      // as not focused until the next time the zone stabilizes.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this2._ngZone.run(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this2._hasFocus = false;\n\n          _this2._onBlur.next({\n            chip: _this2\n          });\n        });\n      });\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dispatchSelectionChange\",\n    value: function _dispatchSelectionChange() {\n      var isUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.selectionChange.emit({\n        source: this,\n        isUserInput: isUserInput,\n        selected: this._selected\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n      if (this._changeDetectorRef) {\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n  }, {\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selected;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var coercedValue = coerceBooleanProperty(value);\n\n      if (coercedValue !== this._selected) {\n        this._selected = coercedValue;\n\n        this._dispatchSelectionChange();\n      }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable && this.chipListSelectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the chip is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._chipListDisabled || this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"removable\",\n    get: function get() {\n      return this._removable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n\n  }, {\n    key: \"ariaSelected\",\n    get: function get() {\n      // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n      // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n      return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n    }\n  }]);\n\n  return MatChip;\n}(_MatChipMixinBase);\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nMatChip.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipAvatar, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipTrailingIcon, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChipRemove, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMatChip.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [ANIMATION_MODULE_TYPE]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nMatChip.propDecorators = {\n  avatar: [{\n    type: ContentChild,\n    args: [MatChipAvatar]\n  }],\n  trailingIcon: [{\n    type: ContentChild,\n    args: [MatChipTrailingIcon]\n  }],\n  removeIcon: [{\n    type: ContentChild,\n    args: [forwardRef(\n    /**\n    * @return {?}\n    */\n    function () {\n      return MatChipRemove;\n    })]\n  }],\n  selected: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  selectable: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  removable: [{\n    type: Input\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  removed: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    avatar: [{\n      type: ContentChild,\n      args: [MatChipAvatar]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MatChipTrailingIcon]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return MatChipRemove;\n      })]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatChip.ngAcceptInputType_selected;\n  /** @type {?} */\n\n  MatChip.ngAcceptInputType_selectable;\n  /** @type {?} */\n\n  MatChip.ngAcceptInputType_removable;\n  /** @type {?} */\n\n  MatChip.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatChip.ngAcceptInputType_disableRipple;\n  /**\n   * Reference to the RippleRenderer for the chip.\n   * @type {?}\n   * @private\n   */\n\n  MatChip.prototype._chipRipple;\n  /**\n   * Reference to the element that acts as the chip's ripple target. This element is\n   * dynamically added as a child node of the chip. The chip itself cannot be used as the\n   * ripple target because it must be the host of the focus indicator.\n   * @type {?}\n   * @private\n   */\n\n  MatChip.prototype._chipRippleTarget;\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatChip.prototype.rippleConfig;\n  /**\n   * Whether the chip has focus.\n   * @type {?}\n   */\n\n  MatChip.prototype._hasFocus;\n  /**\n   * Whether animations for the chip are enabled.\n   * @type {?}\n   */\n\n  MatChip.prototype._animationsDisabled;\n  /**\n   * Whether the chip list is selectable\n   * @type {?}\n   */\n\n  MatChip.prototype.chipListSelectable;\n  /**\n   * Whether the chip list is in multi-selection mode.\n   * @type {?}\n   */\n\n  MatChip.prototype._chipListMultiple;\n  /**\n   * Whether the chip list as a whole is disabled.\n   * @type {?}\n   */\n\n  MatChip.prototype._chipListDisabled;\n  /**\n   * The chip avatar\n   * @type {?}\n   */\n\n  MatChip.prototype.avatar;\n  /**\n   * The chip's trailing icon.\n   * @type {?}\n   */\n\n  MatChip.prototype.trailingIcon;\n  /**\n   * The chip's remove toggler.\n   * @type {?}\n   */\n\n  MatChip.prototype.removeIcon;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChip.prototype._selected;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChip.prototype._value;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChip.prototype._selectable;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChip.prototype._disabled;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChip.prototype._removable;\n  /**\n   * Emits when the chip is focused.\n   * @type {?}\n   */\n\n  MatChip.prototype._onFocus;\n  /**\n   * Emits when the chip is blured.\n   * @type {?}\n   */\n\n  MatChip.prototype._onBlur;\n  /**\n   * Emitted when the chip is selected or deselected.\n   * @type {?}\n   */\n\n  MatChip.prototype.selectionChange;\n  /**\n   * Emitted when the chip is destroyed.\n   * @type {?}\n   */\n\n  MatChip.prototype.destroyed;\n  /**\n   * Emitted when a chip is to be removed.\n   * @type {?}\n   */\n\n  MatChip.prototype.removed;\n  /** @type {?} */\n\n  MatChip.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChip.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nvar MatChipRemove = /*#__PURE__*/function () {\n  /**\n   * @param {?} _parentChip\n   * @param {?=} elementRef\n   */\n  function MatChipRemove(_parentChip, // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n  elementRef) {\n    _classCallCheck(this, MatChipRemove);\n\n    this._parentChip = _parentChip; // @breaking-change 11.0.0 Remove null check for `elementRef`.\n\n    if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /**\n   * Calls the parent chip's public `remove()` method if applicable.\n   * @param {?} event\n   * @return {?}\n   */\n\n\n  _createClass(MatChipRemove, [{\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      /** @type {?} */\n      var parentChip = this._parentChip;\n\n      if (parentChip.removable && !parentChip.disabled) {\n        parentChip.remove();\n      } // We need to stop event propagation because otherwise the event will bubble up to the\n      // form field and cause the `onContainerClick` method to be invoked. This method would then\n      // reset the focused chip that has been focused after chip removal. Usually the parent\n      // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n      // that the chip is being removed before the event bubbles up.\n\n\n      event.stopPropagation();\n    }\n  }]);\n\n  return MatChipRemove;\n}();\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(ɵngcc0.ɵɵdirectiveInject(MatChip), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatChipRemove.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  }\n});\n/** @nocollapse */\n\nMatChipRemove.ctorParameters = function () {\n  return [{\n    type: MatChip\n  }, {\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @protected\n   */\n  MatChipRemove.prototype._parentChip;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\n\n\nfunction MatChipsDefaultOptions() {}\n\nif (false) {\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   * @type {?}\n   */\n  MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\n\n\nvar MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/**\n * \\@docs-private\n */\n\nvar MatChipListBase =\n/**\n * @param {?} _defaultErrorStateMatcher\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nfunction MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n  _classCallCheck(this, MatChipListBase);\n\n  this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n  this._parentForm = _parentForm;\n  this._parentFormGroup = _parentFormGroup;\n  this.ngControl = ngControl;\n};\n\nif (false) {\n  /** @type {?} */\n  MatChipListBase.prototype._defaultErrorStateMatcher;\n  /** @type {?} */\n\n  MatChipListBase.prototype._parentForm;\n  /** @type {?} */\n\n  MatChipListBase.prototype._parentFormGroup;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\n\n\nvar _MatChipListMixinBase = mixinErrorState(MatChipListBase); // Increasing integer for generating unique ids for chip-list components.\n\n/** @type {?} */\n\n\nvar nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\n\nvar MatChipListChange =\n/**\n * @param {?} source\n * @param {?} value\n */\nfunction MatChipListChange(source, value) {\n  _classCallCheck(this, MatChipListChange);\n\n  this.source = source;\n  this.value = value;\n};\n\nif (false) {\n  /**\n   * Chip list that emitted the event.\n   * @type {?}\n   */\n  MatChipListChange.prototype.source;\n  /**\n   * Value of the chip list when the event was emitted.\n   * @type {?}\n   */\n\n  MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nvar MatChipList = /*#__PURE__*/function (_MatChipListMixinBase2) {\n  _inherits(MatChipList, _MatChipListMixinBase2);\n\n  var _super2 = _createSuper(MatChipList);\n\n  /**\n   * @param {?} _elementRef\n   * @param {?} _changeDetectorRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} ngControl\n   */\n  function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    var _this3;\n\n    _classCallCheck(this, MatChipList);\n\n    _this3 = _super2.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this3._elementRef = _elementRef;\n    _this3._changeDetectorRef = _changeDetectorRef;\n    _this3._dir = _dir;\n    _this3.ngControl = ngControl;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     */\n\n    _this3.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    _this3._lastDestroyedChipIndex = null;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    _this3._destroyed = new Subject();\n    /**\n     * Uid of the chip list\n     */\n\n    _this3._uid = \"mat-chip-list-\".concat(nextUniqueId++);\n    /**\n     * Tab index for the chip list.\n     */\n\n    _this3._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    _this3._userTabIndex = null;\n    /**\n     * Function when touched\n     */\n\n    _this3._onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n    /**\n     * Function when changed\n     */\n\n\n    _this3._onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    _this3._multiple = false;\n\n    _this3._compareWith =\n    /**\n    * @param {?} o1\n    * @param {?} o2\n    * @return {?}\n    */\n    function (o1, o2) {\n      return o1 === o2;\n    };\n\n    _this3._required = false;\n    _this3._disabled = false;\n    /**\n     * Orientation of the chip list.\n     */\n\n    _this3.ariaOrientation = 'horizontal';\n    _this3._selectable = true;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     */\n\n    _this3.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n\n    _this3.valueChange = new EventEmitter();\n\n    if (_this3.ngControl) {\n      _this3.ngControl.valueAccessor = _assertThisInitialized(_this3);\n    }\n\n    return _this3;\n  }\n  /**\n   * The array of selected chips inside chip list.\n   * @return {?}\n   */\n\n\n  _createClass(MatChipList, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this4 = this;\n\n      this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n      if (this._dir) {\n        this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(\n        /**\n        * @param {?} dir\n        * @return {?}\n        */\n        function (dir) {\n          return _this4._keyManager.withHorizontalOrientation(dir);\n        });\n      }\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this4._allowFocusEscape();\n      }); // When the list changes, re-subscribe\n\n\n      this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this4.disabled) {\n          // Since this happens after the content has been\n          // checked, we need to defer it to the next tick.\n          Promise.resolve().then(\n          /**\n          * @return {?}\n          */\n          function () {\n            _this4._syncChipsState();\n          });\n        }\n\n        _this4._resetChips(); // Reset chips selected/deselected status\n\n\n        _this4._initializeSelection(); // Check to see if we need to update our tab index\n\n\n        _this4._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n        _this4._updateFocusForDestroyedChips();\n\n        _this4.stateChanges.next();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n      this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n\n        if (this.ngControl.disabled !== this._disabled) {\n          this.disabled = !!this.ngControl.disabled;\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this.stateChanges.complete();\n\n      this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerInput\",\n    value: function registerInput(inputElement) {\n      this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (this.chips) {\n        this._setSelectionByValue(value, false);\n      }\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick(event) {\n      if (!this._originatesFromChip(event)) {\n        this.focus();\n      }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      if (this.disabled) {\n        return;\n      } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n      // Focus on first element if there's no chipInput inside chip-list\n\n\n      if (this._chipInput && this._chipInput.focused) {// do nothing\n      } else if (this.chips.length > 0) {\n        this._keyManager.setFirstItemActive();\n\n        this.stateChanges.next();\n      } else {\n        this._focusInput(options);\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focusInput\",\n    value: function _focusInput(options) {\n      if (this._chipInput) {\n        this._chipInput.focus(options);\n      }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      /** @type {?} */\n      var target =\n      /** @type {?} */\n      event.target; // If they are on an empty input and hit backspace, focus the last chip\n\n      if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n        this._keyManager.setLastItemActive();\n\n        event.preventDefault();\n      } else if (target && target.classList.contains('mat-chip')) {\n        if (event.keyCode === HOME) {\n          this._keyManager.setFirstItemActive();\n\n          event.preventDefault();\n        } else if (event.keyCode === END) {\n          this._keyManager.setLastItemActive();\n\n          event.preventDefault();\n        } else {\n          this._keyManager.onKeydown(event);\n        }\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTabIndex\",\n    value: function _updateTabIndex() {\n      // If we have 0 chips, we should not allow keyboard focus\n      this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateFocusForDestroyedChips\",\n    value: function _updateFocusForDestroyedChips() {\n      // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n      if (this._lastDestroyedChipIndex != null) {\n        if (this.chips.length) {\n          /** @type {?} */\n          var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n          this._keyManager.setActiveItem(newChipIndex);\n        } else {\n          this.focus();\n        }\n      }\n\n      this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isInputEmpty\",\n    value: function _isInputEmpty(element) {\n      if (element && element.nodeName.toLowerCase() === 'input') {\n        /** @type {?} */\n        var input =\n        /** @type {?} */\n        element;\n        return !input.value;\n      }\n\n      return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this5 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this._clearSelection();\n\n      this.chips.forEach(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip.deselect();\n      });\n\n      if (Array.isArray(value)) {\n        value.forEach(\n        /**\n        * @param {?} currentValue\n        * @return {?}\n        */\n        function (currentValue) {\n          return _this5._selectValue(currentValue, isUserInput);\n        });\n\n        this._sortValues();\n      } else {\n        /** @type {?} */\n        var correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what chip the user interacted with last.\n\n\n        if (correspondingChip) {\n          if (isUserInput) {\n            this._keyManager.setActiveItem(correspondingChip);\n          }\n        }\n      }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var _this6 = this;\n\n      var isUserInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      /** @type {?} */\n      var correspondingChip = this.chips.find(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip.value != null && _this6._compareWith(chip.value, value);\n      });\n\n      if (correspondingChip) {\n        isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n        this._selectionModel.select(correspondingChip);\n      }\n\n      return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this7 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this7.ngControl || _this7._value) {\n          _this7._setSelectionByValue(_this7.ngControl ? _this7.ngControl.value : _this7._value, false);\n\n          _this7.stateChanges.next();\n        }\n      });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection(skip) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        if (chip !== skip) {\n          chip.deselect();\n        }\n      });\n      this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this8 = this;\n\n      if (this._multiple) {\n        this._selectionModel.clear();\n\n        this.chips.forEach(\n        /**\n        * @param {?} chip\n        * @return {?}\n        */\n        function (chip) {\n          if (chip.selected) {\n            _this8._selectionModel.select(chip);\n          }\n        });\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      /** @type {?} */\n      var valueToEmit = null;\n\n      if (Array.isArray(this.selected)) {\n        valueToEmit = this.selected.map(\n        /**\n        * @param {?} chip\n        * @return {?}\n        */\n        function (chip) {\n          return chip.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.change.emit(new MatChipListChange(this, valueToEmit));\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      var _this9 = this;\n\n      if (!this._hasFocusedChip()) {\n        this._keyManager.setActiveItem(-1);\n      }\n\n      if (!this.disabled) {\n        if (this._chipInput) {\n          // If there's a chip input, we should check whether the focus moved to chip input.\n          // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n          // to chip input, do nothing.\n          // Timeout is needed to wait for the focus() event trigger on chip input.\n          setTimeout(\n          /**\n          * @return {?}\n          */\n          function () {\n            if (!_this9.focused) {\n              _this9._markAsTouched();\n            }\n          });\n        } else {\n          // If there's no chip input, then mark the field as touched.\n          this._markAsTouched();\n        }\n      }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markAsTouched\",\n    value: function _markAsTouched() {\n      this._onTouched();\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_allowFocusEscape\",\n    value: function _allowFocusEscape() {\n      var _this10 = this;\n\n      if (this._tabIndex !== -1) {\n        this._tabIndex = -1;\n        setTimeout(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this10._tabIndex = _this10._userTabIndex || 0;\n\n          _this10._changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_resetChips\",\n    value: function _resetChips() {\n      this._dropSubscriptions();\n\n      this._listenToChipsFocus();\n\n      this._listenToChipsSelection();\n\n      this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_dropSubscriptions\",\n    value: function _dropSubscriptions() {\n      if (this._chipFocusSubscription) {\n        this._chipFocusSubscription.unsubscribe();\n\n        this._chipFocusSubscription = null;\n      }\n\n      if (this._chipBlurSubscription) {\n        this._chipBlurSubscription.unsubscribe();\n\n        this._chipBlurSubscription = null;\n      }\n\n      if (this._chipSelectionSubscription) {\n        this._chipSelectionSubscription.unsubscribe();\n\n        this._chipSelectionSubscription = null;\n      }\n\n      if (this._chipRemoveSubscription) {\n        this._chipRemoveSubscription.unsubscribe();\n\n        this._chipRemoveSubscription = null;\n      }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsSelection\",\n    value: function _listenToChipsSelection() {\n      var _this11 = this;\n\n      this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        event.source.selected ? _this11._selectionModel.select(event.source) : _this11._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n        if (!_this11.multiple) {\n          _this11.chips.forEach(\n          /**\n          * @param {?} chip\n          * @return {?}\n          */\n          function (chip) {\n            if (!_this11._selectionModel.isSelected(chip) && chip.selected) {\n              chip.deselect();\n            }\n          });\n        }\n\n        if (event.isUserInput) {\n          _this11._propagateChanges();\n        }\n      });\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsFocus\",\n    value: function _listenToChipsFocus() {\n      var _this12 = this;\n\n      this._chipFocusSubscription = this.chipFocusChanges.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        /** @type {?} */\n        var chipIndex = _this12.chips.toArray().indexOf(event.chip);\n\n        if (_this12._isValidIndex(chipIndex)) {\n          _this12._keyManager.updateActiveItem(chipIndex);\n        }\n\n        _this12.stateChanges.next();\n      });\n      this._chipBlurSubscription = this.chipBlurChanges.subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this12._blur();\n\n        _this12.stateChanges.next();\n      });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_listenToChipsRemoved\",\n    value: function _listenToChipsRemoved() {\n      var _this13 = this;\n\n      this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        /** @type {?} */\n        var chip = event.chip;\n        /** @type {?} */\n\n        var chipIndex = _this13.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n        // the index in order to be able to determine an appropriate sibling chip that will\n        // receive focus.\n\n\n        if (_this13._isValidIndex(chipIndex) && chip._hasFocus) {\n          _this13._lastDestroyedChipIndex = chipIndex;\n        }\n      });\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_originatesFromChip\",\n    value: function _originatesFromChip(event) {\n      /** @type {?} */\n      var currentElement =\n      /** @type {?} */\n      event.target;\n\n      while (currentElement && currentElement !== this._elementRef.nativeElement) {\n        if (currentElement.classList.contains('mat-chip')) {\n          return true;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n\n      return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_hasFocusedChip\",\n    value: function _hasFocusedChip() {\n      return this.chips.some(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip._hasFocus;\n      });\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_syncChipsState\",\n    value: function _syncChipsState() {\n      var _this14 = this;\n\n      if (this.chips) {\n        this.chips.forEach(\n        /**\n        * @param {?} chip\n        * @return {?}\n        */\n        function (chip) {\n          chip._chipListDisabled = _this14._disabled;\n          chip._chipListMultiple = _this14.multiple;\n        });\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n\n  }, {\n    key: \"role\",\n    get: function get() {\n      return this.empty ? null : 'listbox';\n    }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    ,\n    set: function set(fn) {\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this.writeValue(value);\n      this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      return this._required;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focused\",\n    get: function get() {\n      return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectable\",\n    get: function get() {\n      return this._selectable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      var _this15 = this;\n\n      this._selectable = coerceBooleanProperty(value);\n\n      if (this.chips) {\n        this.chips.forEach(\n        /**\n        * @param {?} chip\n        * @return {?}\n        */\n        function (chip) {\n          return chip.chipListSelectable = _this15._selectable;\n        });\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"tabIndex\",\n    set: function set(value) {\n      this._userTabIndex = value;\n      this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipSelectionChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip.selectionChange;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipFocusChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip._onFocus;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipBlurChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip._onBlur;\n      })));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n\n  }, {\n    key: \"chipRemoveChanges\",\n    get: function get() {\n      return merge.apply(void 0, _toConsumableArray(this.chips.map(\n      /**\n      * @param {?} chip\n      * @return {?}\n      */\n      function (chip) {\n        return chip.destroyed;\n      })));\n    }\n  }]);\n\n  return MatChipList;\n}(_MatChipListMixinBase);\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10));\n};\n\nMatChipList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatChip, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx._uid);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      ɵngcc0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\",\n    errorStateMatcher: \"errorStateMatcher\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatChipList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: NgForm,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: FormGroupDirective,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: ErrorStateMatcher\n  }, {\n    type: NgControl,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Self\n    }]\n  }];\n};\n\nMatChipList.propDecorators = {\n  errorStateMatcher: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  ariaOrientation: [{\n    type: Input,\n    args: ['aria-orientation']\n  }],\n  selectable: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  chips: [{\n    type: ContentChildren,\n    args: [MatChip, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc2.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc3.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.ErrorStateMatcher\n    }, {\n      type: ɵngcc3.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatChipList.ngAcceptInputType_multiple;\n  /** @type {?} */\n\n  MatChipList.ngAcceptInputType_required;\n  /** @type {?} */\n\n  MatChipList.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatChipList.ngAcceptInputType_selectable;\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatChipList.prototype.controlType;\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._lastDestroyedChipIndex;\n  /**\n   * Subject that emits when the component has been destroyed.\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._destroyed;\n  /**\n   * Subscription to focus changes in the chips.\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._chipFocusSubscription;\n  /**\n   * Subscription to blur changes in the chips.\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._chipBlurSubscription;\n  /**\n   * Subscription to selection changes in chips.\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._chipSelectionSubscription;\n  /**\n   * Subscription to remove changes in chips.\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._chipRemoveSubscription;\n  /**\n   * The chip input to add more chips\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._chipInput;\n  /**\n   * Uid of the chip list\n   * @type {?}\n   */\n\n  MatChipList.prototype._uid;\n  /**\n   * The aria-describedby attribute on the chip list for improved a11y.\n   * @type {?}\n   */\n\n  MatChipList.prototype._ariaDescribedby;\n  /**\n   * Tab index for the chip list.\n   * @type {?}\n   */\n\n  MatChipList.prototype._tabIndex;\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   * @type {?}\n   */\n\n  MatChipList.prototype._userTabIndex;\n  /**\n   * The FocusKeyManager which handles focus.\n   * @type {?}\n   */\n\n  MatChipList.prototype._keyManager;\n  /**\n   * Function when touched\n   * @type {?}\n   */\n\n  MatChipList.prototype._onTouched;\n  /**\n   * Function when changed\n   * @type {?}\n   */\n\n  MatChipList.prototype._onChange;\n  /** @type {?} */\n\n  MatChipList.prototype._selectionModel;\n  /**\n   * An object used to control when error messages are shown.\n   * @type {?}\n   */\n\n  MatChipList.prototype.errorStateMatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._multiple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._compareWith;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._value;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._required;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._placeholder;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._disabled;\n  /**\n   * Orientation of the chip list.\n   * @type {?}\n   */\n\n  MatChipList.prototype.ariaOrientation;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._selectable;\n  /**\n   * Event emitted when the selected chip list value has been changed by the user.\n   * @type {?}\n   */\n\n  MatChipList.prototype.change;\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatChipList.prototype.valueChange;\n  /**\n   * The chip components contained within this chip list.\n   * @type {?}\n   */\n\n  MatChipList.prototype.chips;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipList.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._changeDetectorRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChipList.prototype._dir;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatChipList.prototype.ngControl;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\n\n\nfunction MatChipInputEvent() {}\n\nif (false) {\n  /**\n   * The native `<input>` element that the event is being fired for.\n   * @type {?}\n   */\n  MatChipInputEvent.prototype.input;\n  /**\n   * The value of the input.\n   * @type {?}\n   */\n\n  MatChipInputEvent.prototype.value;\n} // Increasing integer for generating unique ids.\n\n/** @type {?} */\n\n\nvar nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nvar MatChipInput = /*#__PURE__*/function () {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultOptions\n   */\n  function MatChipInput(_elementRef, _defaultOptions) {\n    _classCallCheck(this, MatChipInput);\n\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /**\n     * Whether the control is focused.\n     */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     */\n\n    this.chipEnd = new EventEmitter();\n    /**\n     * The input's placeholder text.\n     */\n\n    this.placeholder = '';\n    /**\n     * Unique id for the input.\n     */\n\n    this.id = \"mat-chip-list-input-\".concat(nextUniqueId$1++);\n    this._disabled = false;\n    this._inputElement =\n    /** @type {?} */\n    this._elementRef.nativeElement;\n  }\n  /**\n   * Register input for chip list\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  _createClass(MatChipInput, [{\n    key: \"ngOnChanges\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnChanges() {\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      }\n\n      this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_blur\",\n    value: function _blur() {\n      if (this.addOnBlur) {\n        this._emitChipEnd();\n      }\n\n      this.focused = false; // Blur the chip list if it is not focused\n\n      if (!this._chipList.focused) {\n        this._chipList._blur();\n      }\n\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_focus\",\n    value: function _focus() {\n      this.focused = true;\n\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChipEnd\",\n    value: function _emitChipEnd(event) {\n      if (!this._inputElement.value && !!event) {\n        this._chipList._keydown(event);\n      }\n\n      if (!event || this._isSeparatorKey(event)) {\n        this.chipEnd.emit({\n          input: this._inputElement,\n          value: this._inputElement.value\n        });\n\n        if (event) {\n          event.preventDefault();\n        }\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {\n      // Let chip list know whenever the value changes.\n      this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isSeparatorKey\",\n    value: function _isSeparatorKey(event) {\n      if (hasModifierKey(event)) {\n        return false;\n      }\n      /** @type {?} */\n\n\n      var separators = this.separatorKeyCodes;\n      /** @type {?} */\n\n      var keyCode = event.keyCode;\n      return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n  }, {\n    key: \"chipList\",\n    set: function set(value) {\n      if (value) {\n        this._chipList = value;\n\n        this._chipList.registerInput(this);\n      }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n\n  }, {\n    key: \"addOnBlur\",\n    get: function get() {\n      return this._addOnBlur;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this._chipList && this._chipList.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._inputElement.value;\n    }\n  }]);\n\n  return MatChipInput;\n}();\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nMatChipInput.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_CHIPS_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatChipInput.propDecorators = {\n  chipList: [{\n    type: Input,\n    args: ['matChipInputFor']\n  }],\n  addOnBlur: [{\n    type: Input,\n    args: ['matChipInputAddOnBlur']\n  }],\n  separatorKeyCodes: [{\n    type: Input,\n    args: ['matChipInputSeparatorKeyCodes']\n  }],\n  chipEnd: [{\n    type: Output,\n    args: ['matChipInputTokenEnd']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatChipInput.ngAcceptInputType_addOnBlur;\n  /** @type {?} */\n\n  MatChipInput.ngAcceptInputType_disabled;\n  /**\n   * Whether the control is focused.\n   * @type {?}\n   */\n\n  MatChipInput.prototype.focused;\n  /** @type {?} */\n\n  MatChipInput.prototype._chipList;\n  /** @type {?} */\n\n  MatChipInput.prototype._addOnBlur;\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   * @type {?}\n   */\n\n  MatChipInput.prototype.separatorKeyCodes;\n  /**\n   * Emitted when a chip is to be added.\n   * @type {?}\n   */\n\n  MatChipInput.prototype.chipEnd;\n  /**\n   * The input's placeholder text.\n   * @type {?}\n   */\n\n  MatChipInput.prototype.placeholder;\n  /**\n   * Unique id for the input.\n   * @type {?}\n   */\n\n  MatChipInput.prototype.id;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChipInput.prototype._disabled;\n  /**\n   * The native input element to which this directive is attached.\n   * @type {?}\n   * @protected\n   */\n\n  MatChipInput.prototype._inputElement;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  MatChipInput.prototype._elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatChipInput.prototype._defaultOptions;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nvar ɵ0 = {\n  separatorKeyCodes: [ENTER]\n};\n\nvar MatChipsModule = function MatChipsModule() {\n  _classCallCheck(this, MatChipsModule);\n};\n\nMatChipsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatChipsModule_Factory(t) {\n    return new (t || MatChipsModule)();\n  },\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue:\n    /** @type {?} */\n    ɵ0\n  }]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatChipsModule, {\n    declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon],\n    exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue:\n        /** @type {?} */\n        ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };","map":{"version":3,"sources":["../../../../../material/chips/chip.ts","../../../../../material/chips/chip-default-options.ts","../../../../../material/chips/chip-list.ts","../../../../../material/chips/chip-input.ts","../../../../../material/chips/chips-module.ts","../../../../../material/chips/index.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ChangeDetectorRef,\n  Attribute,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  disabled: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor &\n    HasTabIndexCtor & typeof MatChipBase =\n      mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip mat-focus-indicator',\n    '[attr.tabindex]': 'disabled ? null : tabIndex',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisableRipple, RippleTarget, HasTabIndex {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Reference to the element that acts as the chip's ripple target. This element is\n   * dynamically added as a child node of the chip. The chip itself cannot be used as the\n   * ripple target because it must be the host of the focus indicator.\n   */\n  private _chipRippleTarget: HTMLElement;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** Whether the chip list as a whole is disabled. */\n  _chipListDisabled: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is disabled. */\n  @Input()\n  get disabled(): boolean { return this._chipListDisabled || this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  protected _disabled: boolean = false;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n              globalRippleOptions: RippleGlobalOptions | null,\n              // @breaking-change 8.0.0 `animationMode` parameter to become required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              // @breaking-change 9.0.0 `_changeDetectorRef` parameter to become required.\n              private _changeDetectorRef?: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex?: string,\n              // @breaking-change 11.0.0 `_document` parameter to become required.\n              @Optional() @Inject(DOCUMENT) _document?: any) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = (_document || document).createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  private _markForCheck() {\n    // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_removable: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(\n    protected _parentChip: MatChip,\n    // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n    elementRef?: ElementRef<HTMLElement>) {\n\n      // @breaking-change 11.0.0 Remove null check for `elementRef`.\n    if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n   }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipList && _chipList.required || null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    if (hasModifierKey(event)) {\n      return false;\n    }\n\n    const separators = this.separatorKeyCodes;\n    const keyCode = event.keyCode;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n\n  static ngAcceptInputType_addOnBlur: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}