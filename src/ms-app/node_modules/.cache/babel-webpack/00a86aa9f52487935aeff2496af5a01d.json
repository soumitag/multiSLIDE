{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport var HotObservable = /*#__PURE__*/function (_Subject) {\n  _inherits(HotObservable, _Subject);\n\n  var _super = _createSuper(HotObservable);\n\n  function HotObservable(messages, scheduler) {\n    var _this;\n\n    _classCallCheck(this, HotObservable);\n\n    _this = _super.call(this);\n    _this.messages = messages;\n    _this.subscriptions = [];\n    _this.scheduler = scheduler;\n    return _this;\n  }\n\n  _createClass(HotObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var subject = this;\n      var index = subject.logSubscribedFrame();\n      var subscription = new Subscription();\n      subscription.add(new Subscription(function () {\n        subject.logUnsubscribedFrame(index);\n      }));\n      subscription.add(_get(_getPrototypeOf(HotObservable.prototype), \"_subscribe\", this).call(this, subscriber));\n      return subscription;\n    }\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      var subject = this;\n      var messagesLength = subject.messages.length;\n\n      for (var i = 0; i < messagesLength; i++) {\n        (function () {\n          var message = subject.messages[i];\n          subject.scheduler.schedule(function () {\n            message.notification.observe(subject);\n          }, message.frame);\n        })();\n      }\n    }\n  }]);\n\n  return HotObservable;\n}(Subject);\napplyMixins(HotObservable, [SubscriptionLoggable]);","map":{"version":3,"sources":["../../../src/internal/testing/HotObservable.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,OAAT,QAAwB,YAAxB;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AAIA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAOA,WAAa,aAAb;AAAA;;AAAA;;AAME,yBAAmB,QAAnB,EACY,SADZ,EACgC;AAAA;;AAAA;;AAC9B;AAFiB,UAAA,QAAA,GAAA,QAAA;AALZ,UAAA,aAAA,GAAmC,EAAnC;AAQL,UAAK,SAAL,GAAiB,SAAjB;AAF8B;AAG/B;;AAVH;AAAA;AAAA,+BAaa,UAbb,EAawC;AACpC,UAAM,OAAO,GAAqB,IAAlC;AACA,UAAM,KAAK,GAAG,OAAO,CAAC,kBAAR,EAAd;AACA,UAAM,YAAY,GAAG,IAAI,YAAJ,EAArB;AACA,MAAA,YAAY,CAAC,GAAb,CAAiB,IAAI,YAAJ,CAAiB,YAAK;AACrC,QAAA,OAAO,CAAC,oBAAR,CAA6B,KAA7B;AACD,OAFgB,CAAjB;AAGA,MAAA,YAAY,CAAC,GAAb,+EAAkC,UAAlC;AACA,aAAO,YAAP;AACD;AAtBH;AAAA;AAAA,4BAwBO;AACH,UAAM,OAAO,GAAG,IAAhB;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,QAAR,CAAiB,MAAxC;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACvC,SAAC,YAAK;AACJ,cAAI,OAAO,GAAG,OAAO,CAAC,QAAR,CAAiB,CAAjB,CAAd;AAEA,UAAA,OAAO,CAAC,SAAR,CAAkB,QAAlB,CACE,YAAK;AAAG,YAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,OAA7B;AAAwC,WADlD,EAEE,OAAO,CAAC,KAFV;AAID,SAPD;AAQD;AACF;AAtCH;;AAAA;AAAA,EAAsC,OAAtC;AAwCA,WAAW,CAAC,aAAD,EAAgB,CAAC,oBAAD,CAAhB,CAAX","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class HotObservable extends Subject {\n    constructor(messages, scheduler) {\n        super();\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    _subscribe(subscriber) {\n        const subject = this;\n        const index = subject.logSubscribedFrame();\n        const subscription = new Subscription();\n        subscription.add(new Subscription(() => {\n            subject.logUnsubscribedFrame(index);\n        }));\n        subscription.add(super._subscribe(subscriber));\n        return subscription;\n    }\n    setup() {\n        const subject = this;\n        const messagesLength = subject.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            (() => {\n                var message = subject.messages[i];\n                subject.scheduler.schedule(() => { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n//# sourceMappingURL=HotObservable.js.map"]},"metadata":{},"sourceType":"module"}