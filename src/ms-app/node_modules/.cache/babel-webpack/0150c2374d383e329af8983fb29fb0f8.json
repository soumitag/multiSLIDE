{"ast":null,"code":"import _regeneratorRuntime from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter, __decorate } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, EventEmitter, IterableDiffers, KeyValueDiffers, ViewChild, Input, Output, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common'; // The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"plot\"];\nvar environment = {\n  production: false\n};\nvar PlotlyService_1;\n\nvar PlotlyService = PlotlyService_1 = /*#__PURE__*/function () {\n  function PlotlyService() {\n    _classCallCheck(this, PlotlyService);\n  }\n\n  _createClass(PlotlyService, [{\n    key: \"getInstanceByDivId\",\n    value: function getInstanceByDivId(id) {\n      var _iterator = _createForOfIteratorHelper(PlotlyService_1.instances),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var instance = _step.value;\n\n          if (instance && instance.id === id) {\n            return instance;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getPlotly\",\n    value: function getPlotly() {\n      if (typeof PlotlyService_1._plotly === 'undefined') {\n        var msg = PlotlyService_1._moduleName === 'ViaCDN' ? \"Error loading Peer dependency plotly.js from CDN url\" : \"Peer dependency plotly.js isn't installed\";\n        throw new Error(msg);\n      }\n\n      return PlotlyService_1._plotly;\n    }\n  }, {\n    key: \"waitFor\",\n    value: function waitFor(fn) {\n      return new Promise(function (resolve) {\n        var localFn = function localFn() {\n          fn() ? resolve() : setTimeout(localFn, 10);\n        };\n\n        localFn();\n      });\n    } // tslint:disable max-line-length\n\n  }, {\n    key: \"newPlot\",\n    value: function newPlot(div, data, layout, config, frames) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        var obj;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.waitFor(function () {\n                  return _this.getPlotly() !== 'waiting';\n                });\n\n              case 2:\n                if (!frames) {\n                  _context.next = 5;\n                  break;\n                }\n\n                obj = {\n                  data: data,\n                  layout: layout,\n                  config: config,\n                  frames: frames\n                };\n                return _context.abrupt(\"return\", this.getPlotly().newPlot(div, obj).then(function () {\n                  return PlotlyService_1.insert(div);\n                }));\n\n              case 5:\n                return _context.abrupt(\"return\", this.getPlotly().newPlot(div, data, layout, config).then(function () {\n                  return PlotlyService_1.insert(div);\n                }));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"plot\",\n    value: function plot(div, data, layout, config, frames) {\n      if (frames) {\n        var obj = {\n          data: data,\n          layout: layout,\n          config: config,\n          frames: frames\n        };\n        return this.getPlotly().plot(div, obj);\n      }\n\n      return this.getPlotly().plot(div, data, layout, config);\n    }\n  }, {\n    key: \"update\",\n    value: function update(div, data, layout, config, frames) {\n      if (frames) {\n        var obj = {\n          data: data,\n          layout: layout,\n          config: config,\n          frames: frames\n        };\n        return this.getPlotly().react(div, obj);\n      }\n\n      return this.getPlotly().react(div, data, layout, config);\n    } // tslint:enable max-line-length\n\n  }, {\n    key: \"resize\",\n    value: function resize(div) {\n      return this.getPlotly().Plots.resize(div);\n    }\n  }, {\n    key: \"debug\",\n    get: function get() {\n      return environment.production === false;\n    }\n  }], [{\n    key: \"setModuleName\",\n    value: function setModuleName(moduleName) {\n      PlotlyService_1._moduleName = moduleName;\n    }\n  }, {\n    key: \"setPlotly\",\n    value: function setPlotly(plotly) {\n      if (typeof plotly === 'object' && typeof plotly.react !== 'function') {\n        throw new Error('Invalid plotly.js version. Please, use any version above 1.40.0');\n      }\n\n      PlotlyService_1._plotly = plotly;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(instance) {\n      var index = PlotlyService_1.instances.indexOf(instance);\n\n      if (index === -1) {\n        PlotlyService_1.instances.push(instance);\n      }\n\n      return instance;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(div) {\n      var index = PlotlyService_1.instances.indexOf(div);\n\n      if (index >= 0) {\n        PlotlyService_1.instances.splice(index, 1);\n\n        PlotlyService_1._plotly.purge(div);\n      }\n    }\n  }]);\n\n  return PlotlyService;\n}();\n\nPlotlyService.ɵfac = function PlotlyService_Factory(t) {\n  return new (t || PlotlyService)();\n};\n\nPlotlyService.instances = [];\nPlotlyService._plotly = undefined;\nPlotlyService._moduleName = undefined;\nPlotlyService.ɵprov = ɵɵdefineInjectable({\n  factory: function PlotlyService_Factory() {\n    return new PlotlyService();\n  },\n  token: PlotlyService,\n  providedIn: \"root\"\n}); // @dynamic\n\nvar PlotComponent = /*#__PURE__*/function () {\n  function PlotComponent(plotly, iterableDiffers, keyValueDiffers) {\n    _classCallCheck(this, PlotComponent);\n\n    this.plotly = plotly;\n    this.iterableDiffers = iterableDiffers;\n    this.keyValueDiffers = keyValueDiffers;\n    this.defaultClassName = 'js-plotly-plot';\n    this.revision = 0;\n    this.debug = false;\n    this.useResizeHandler = false;\n    this.updateOnLayoutChange = true;\n    this.updateOnDataChange = true;\n    this.updateOnlyWithRevision = false;\n    this.initialized = new EventEmitter();\n    this.update = new EventEmitter();\n    this.purge = new EventEmitter();\n    this.error = new EventEmitter();\n    this.afterExport = new EventEmitter();\n    this.afterPlot = new EventEmitter();\n    this.animated = new EventEmitter();\n    this.animatingFrame = new EventEmitter();\n    this.animationInterrupted = new EventEmitter();\n    this.autoSize = new EventEmitter();\n    this.beforeExport = new EventEmitter();\n    this.buttonClicked = new EventEmitter();\n    this.click = new EventEmitter();\n    this.plotly_click = new EventEmitter();\n    this.clickAnnotation = new EventEmitter();\n    this.deselect = new EventEmitter();\n    this.doubleClick = new EventEmitter();\n    this.framework = new EventEmitter();\n    this.hover = new EventEmitter();\n    this.legendClick = new EventEmitter();\n    this.legendDoubleClick = new EventEmitter();\n    this.relayout = new EventEmitter();\n    this.restyle = new EventEmitter();\n    this.redraw = new EventEmitter();\n    this.selected = new EventEmitter();\n    this.selecting = new EventEmitter();\n    this.sliderChange = new EventEmitter();\n    this.sliderEnd = new EventEmitter();\n    this.sliderStart = new EventEmitter();\n    this.transitioning = new EventEmitter();\n    this.transitionInterrupted = new EventEmitter();\n    this.unhover = new EventEmitter();\n    this.relayouting = new EventEmitter();\n    this.treemapclick = new EventEmitter();\n    this.sunburstclick = new EventEmitter();\n    this.eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize', 'beforeExport', 'buttonClicked', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover', 'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange', 'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover', 'relayouting', 'treemapclick', 'sunburstclick'];\n  }\n\n  _createClass(PlotComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this.createPlot().then(function () {\n        var figure = _this2.createFigure();\n\n        _this2.initialized.emit(figure);\n      });\n\n      if (this.plotly.debug && this.click.observers.length > 0) {\n        var msg = 'DEPRECATED: Reconsider using `(plotly_click)` instead of `(click)` to avoid event conflict. ' + 'Please check https://github.com/plotly/angular-plotly.js#FAQ';\n        console.error(msg);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (typeof this.resizeHandler === 'function') {\n        this.getWindow().removeEventListener('resize', this.resizeHandler);\n        this.resizeHandler = undefined;\n      }\n\n      var figure = this.createFigure();\n      this.purge.emit(figure);\n      PlotlyService.remove(this.plotlyInstance);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var shouldUpdate = false;\n      var revision = changes.revision;\n\n      if (revision && !revision.isFirstChange()) {\n        shouldUpdate = true;\n      }\n\n      var debug = changes.debug;\n\n      if (debug && !debug.isFirstChange()) {\n        shouldUpdate = true;\n      }\n\n      if (shouldUpdate) {\n        this.updatePlot();\n      }\n\n      this.updateWindowResizeHandler();\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.updateOnlyWithRevision) {\n        return false;\n      }\n\n      var shouldUpdate = false;\n\n      if (this.updateOnLayoutChange) {\n        if (this.layoutDiffer) {\n          var layoutHasDiff = this.layoutDiffer.diff(this.layout);\n\n          if (layoutHasDiff) {\n            shouldUpdate = true;\n          }\n        } else if (this.layout) {\n          this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\n        } else {\n          this.layoutDiffer = undefined;\n        }\n      }\n\n      if (this.updateOnDataChange) {\n        if (this.dataDiffer) {\n          var dataHasDiff = this.dataDiffer.diff(this.data);\n\n          if (dataHasDiff) {\n            shouldUpdate = true;\n          }\n        } else if (Array.isArray(this.data)) {\n          this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\n        } else {\n          this.dataDiffer = undefined;\n        }\n      }\n\n      if (shouldUpdate && this.plotlyInstance) {\n        this.updatePlot();\n      }\n    }\n  }, {\n    key: \"getWindow\",\n    value: function getWindow() {\n      return window;\n    }\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      var classes = [this.defaultClassName];\n\n      if (Array.isArray(this.className)) {\n        classes = classes.concat(this.className);\n      } else if (this.className) {\n        classes.push(this.className);\n      }\n\n      return classes.join(' ');\n    }\n  }, {\n    key: \"createPlot\",\n    value: function createPlot() {\n      var _this3 = this;\n\n      return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(function (plotlyInstance) {\n        _this3.plotlyInstance = plotlyInstance;\n        _this3.getWindow().gd = _this3.debug ? plotlyInstance : undefined;\n\n        _this3.eventNames.forEach(function (name) {\n          var eventName = \"plotly_\".concat(name.toLowerCase());\n          plotlyInstance.on(eventName, function (data) {\n            return _this3[name].emit(data);\n          });\n        });\n\n        plotlyInstance.on('plotly_click', function (data) {\n          _this3.click.emit(data);\n\n          _this3.plotly_click.emit(data);\n        });\n\n        _this3.updateWindowResizeHandler();\n      }, function (err) {\n        console.error('Error while plotting:', err);\n\n        _this3.error.emit(err);\n      });\n    }\n  }, {\n    key: \"createFigure\",\n    value: function createFigure() {\n      var p = this.plotlyInstance;\n      var figure = {\n        data: p.data,\n        layout: p.layout,\n        frames: p._transitionData ? p._transitionData._frames : null\n      };\n      return figure;\n    }\n  }, {\n    key: \"updatePlot\",\n    value: function updatePlot() {\n      var _this4 = this;\n\n      if (!this.plotlyInstance) {\n        var error = new Error(\"Plotly component wasn't initialized\");\n        this.error.emit(error);\n        throw error;\n      }\n\n      var layout = Object.assign({}, this.layout);\n      return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(function () {\n        var figure = _this4.createFigure();\n\n        _this4.update.emit(figure);\n      }, function (err) {\n        console.error('Error while updating plot:', err);\n\n        _this4.error.emit(err);\n      });\n    }\n  }, {\n    key: \"updateWindowResizeHandler\",\n    value: function updateWindowResizeHandler() {\n      var _this5 = this;\n\n      if (this.useResizeHandler) {\n        if (this.resizeHandler === undefined) {\n          this.resizeHandler = function () {\n            return _this5.plotly.resize(_this5.plotlyInstance);\n          };\n\n          this.getWindow().addEventListener('resize', this.resizeHandler);\n        }\n      } else {\n        if (typeof this.resizeHandler === 'function') {\n          this.getWindow().removeEventListener('resize', this.resizeHandler);\n          this.resizeHandler = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"dataDifferTrackBy\",\n    value: function dataDifferTrackBy(_, item) {\n      var obj = Object.assign({}, item, {\n        uid: ''\n      });\n      return JSON.stringify(obj);\n    }\n  }]);\n\n  return PlotComponent;\n}();\n\nPlotComponent.ɵfac = function PlotComponent_Factory(t) {\n  return new (t || PlotComponent)(ɵngcc0.ɵɵdirectiveInject(PlotlyService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers));\n};\n\nPlotComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: PlotComponent,\n  selectors: [[\"plotly-plot\"]],\n  viewQuery: function PlotComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.plotEl = _t.first);\n    }\n  },\n  inputs: {\n    revision: \"revision\",\n    debug: \"debug\",\n    useResizeHandler: \"useResizeHandler\",\n    updateOnLayoutChange: \"updateOnLayoutChange\",\n    updateOnDataChange: \"updateOnDataChange\",\n    updateOnlyWithRevision: \"updateOnlyWithRevision\",\n    data: \"data\",\n    layout: \"layout\",\n    config: \"config\",\n    frames: \"frames\",\n    style: \"style\",\n    divId: \"divId\",\n    className: \"className\"\n  },\n  outputs: {\n    initialized: \"initialized\",\n    update: \"update\",\n    purge: \"purge\",\n    error: \"error\",\n    afterExport: \"afterExport\",\n    afterPlot: \"afterPlot\",\n    animated: \"animated\",\n    animatingFrame: \"animatingFrame\",\n    animationInterrupted: \"animationInterrupted\",\n    autoSize: \"autoSize\",\n    beforeExport: \"beforeExport\",\n    buttonClicked: \"buttonClicked\",\n    click: \"click\",\n    plotly_click: \"plotly_click\",\n    clickAnnotation: \"clickAnnotation\",\n    deselect: \"deselect\",\n    doubleClick: \"doubleClick\",\n    framework: \"framework\",\n    hover: \"hover\",\n    legendClick: \"legendClick\",\n    legendDoubleClick: \"legendDoubleClick\",\n    relayout: \"relayout\",\n    restyle: \"restyle\",\n    redraw: \"redraw\",\n    selected: \"selected\",\n    selecting: \"selecting\",\n    sliderChange: \"sliderChange\",\n    sliderEnd: \"sliderEnd\",\n    sliderStart: \"sliderStart\",\n    transitioning: \"transitioning\",\n    transitionInterrupted: \"transitionInterrupted\",\n    unhover: \"unhover\",\n    relayouting: \"relayouting\",\n    treemapclick: \"treemapclick\",\n    sunburstclick: \"sunburstclick\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([PlotlyService]), ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[3, \"className\", \"ngStyle\"], [\"plot\", \"\"]],\n  template: function PlotComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelement(0, \"div\", 0, 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"className\", ctx.getClassName())(\"ngStyle\", ctx.style);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.divId);\n    }\n  },\n  directives: [ɵngcc1.NgStyle],\n  encapsulation: 2\n});\n\nPlotComponent.ctorParameters = function () {\n  return [{\n    type: PlotlyService\n  }, {\n    type: IterableDiffers\n  }, {\n    type: KeyValueDiffers\n  }];\n};\n\n__decorate([ViewChild('plot', {\n  static: true\n})], PlotComponent.prototype, \"plotEl\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"data\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"layout\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"config\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"frames\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"style\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"divId\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"revision\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"className\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"debug\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"useResizeHandler\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"updateOnLayoutChange\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"updateOnDataChange\", void 0);\n\n__decorate([Input()], PlotComponent.prototype, \"updateOnlyWithRevision\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"initialized\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"update\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"purge\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"error\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"afterExport\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"afterPlot\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"animated\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"animatingFrame\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"animationInterrupted\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"autoSize\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"beforeExport\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"buttonClicked\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"click\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"plotly_click\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"clickAnnotation\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"deselect\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"doubleClick\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"framework\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"hover\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"legendClick\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"legendDoubleClick\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"relayout\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"restyle\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"redraw\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"selected\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"selecting\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"sliderChange\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"sliderEnd\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"sliderStart\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"transitioning\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"transitionInterrupted\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"unhover\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"relayouting\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"treemapclick\", void 0);\n\n__decorate([Output()], PlotComponent.prototype, \"sunburstclick\", void 0);\n\nvar SharedModule = function SharedModule() {\n  _classCallCheck(this, SharedModule);\n};\n\nSharedModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: SharedModule\n});\nSharedModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function SharedModule_Factory(t) {\n    return new (t || SharedModule)();\n  },\n  providers: [PlotlyService],\n  imports: [[CommonModule]]\n});\nvar PlotlyModule_1;\n\nvar PlotlyModule = PlotlyModule_1 = /*#__PURE__*/function () {\n  function PlotlyModule() {\n    _classCallCheck(this, PlotlyModule);\n\n    if (!this.isValid()) {\n      var msg = \"Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start\" + \" to see how to add PlotlyJS to your project.\";\n      throw new Error(msg);\n    }\n\n    PlotlyService.setPlotly(PlotlyModule_1.plotlyjs);\n  }\n\n  _createClass(PlotlyModule, [{\n    key: \"isValid\",\n    value: function isValid() {\n      return PlotlyModule_1.plotlyjs !== undefined && typeof PlotlyModule_1.plotlyjs.plot === 'function';\n    }\n  }]);\n\n  return PlotlyModule;\n}();\n\nPlotlyModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PlotlyModule\n});\nPlotlyModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PlotlyModule_Factory(t) {\n    return new (t || PlotlyModule)();\n  },\n  imports: [[CommonModule, SharedModule]]\n});\nPlotlyModule.plotlyjs = {};\nvar PlotlyViaCDNModule_1; // @dynamic\n\nvar PlotlyViaCDNModule = PlotlyViaCDNModule_1 = /*#__PURE__*/function () {\n  function PlotlyViaCDNModule(plotlyService) {\n    _classCallCheck(this, PlotlyViaCDNModule);\n\n    this.plotlyService = plotlyService;\n    PlotlyService.setModuleName('ViaCDN');\n  }\n\n  _createClass(PlotlyViaCDNModule, null, [{\n    key: \"loadViaCDN\",\n    value: function loadViaCDN() {\n      PlotlyService.setPlotly('waiting');\n\n      var init = function init() {\n        var src = PlotlyViaCDNModule_1._plotlyBundle == null ? \"https://cdn.plot.ly/plotly-\".concat(PlotlyViaCDNModule_1._plotlyVersion, \".min.js\") : \"https://cdn.plot.ly/plotly-\".concat(PlotlyViaCDNModule_1._plotlyBundle, \"-\").concat(PlotlyViaCDNModule_1._plotlyVersion, \".min.js\");\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = src;\n\n        script.onerror = function () {\n          return console.error(\"Error loading plotly.js library from \".concat(src));\n        };\n\n        var head = document.getElementsByTagName('head')[0];\n        head.appendChild(script);\n        var counter = 200; // equivalent of 10 seconds...\n\n        var fn = function fn() {\n          var plotly = window.Plotly;\n\n          if (plotly) {\n            PlotlyService.setPlotly(plotly);\n          } else if (counter > 0) {\n            counter--;\n            setTimeout(fn, 50);\n          } else {\n            throw new Error(\"Error loading plotly.js library from \".concat(src, \". Timeout.\"));\n          }\n        };\n\n        fn();\n      };\n\n      setTimeout(init);\n    }\n  }, {\n    key: \"forRoot\",\n    value: function forRoot(config) {\n      var url = \"https://github.com/plotly/angular-plotly.js#customizing-the-plotlyjs-bundle\";\n      throw new Error(\"[PlotlyViaCDNModule] forRoot method is deprecated. Please see: \".concat(url));\n    }\n  }, {\n    key: \"plotlyVersion\",\n    set: function set(version) {\n      var isOk = version === 'latest' || /^\\d\\.\\d{1,2}\\.\\d{1,2}$/.test(version);\n\n      if (!isOk) {\n        throw new Error(\"Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)\");\n      }\n\n      PlotlyViaCDNModule_1.loadViaCDN();\n      PlotlyViaCDNModule_1._plotlyVersion = version;\n    }\n  }, {\n    key: \"plotlyBundle\",\n    set: function set(bundle) {\n      var isOk = bundle === null || PlotlyViaCDNModule_1.plotlyBundleNames.indexOf(bundle) >= 0;\n\n      if (!isOk) {\n        var names = PlotlyViaCDNModule_1.plotlyBundleNames.map(function (n) {\n          return \"\\\"\".concat(n, \"\\\"\");\n        }).join(', ');\n        throw new Error(\"Invalid plotly bundle. Please set to null for full or \".concat(names, \" for a partial bundle.\"));\n      }\n\n      PlotlyViaCDNModule_1._plotlyBundle = bundle;\n    }\n  }]);\n\n  return PlotlyViaCDNModule;\n}();\n\nPlotlyViaCDNModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PlotlyViaCDNModule\n});\nPlotlyViaCDNModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PlotlyViaCDNModule_Factory(t) {\n    return new (t || PlotlyViaCDNModule)(ɵngcc0.ɵɵinject(PlotlyService));\n  },\n  imports: [[CommonModule, SharedModule]]\n});\nPlotlyViaCDNModule._plotlyBundle = null;\nPlotlyViaCDNModule._plotlyVersion = 'latest';\nPlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];\n\nPlotlyViaCDNModule.ctorParameters = function () {\n  return [{\n    type: PlotlyService\n  }];\n};\n\nvar PlotlyViaWindowModule = /*#__PURE__*/function () {\n  function PlotlyViaWindowModule() {\n    _classCallCheck(this, PlotlyViaWindowModule);\n\n    var plotly = window.Plotly;\n\n    if (typeof plotly === 'undefined') {\n      throw new Error(\"Plotly object not found on window.\");\n    }\n\n    PlotlyService.setPlotly(plotly);\n  }\n\n  _createClass(PlotlyViaWindowModule, null, [{\n    key: \"forRoot\",\n    value: function forRoot() {\n      var url = \"https://github.com/plotly/angular-plotly.js#plotly-via-window-module\";\n      throw new Error(\"[PlotlyViaWindowModule] forRoot method is deprecated. Please see: \".concat(url));\n    }\n  }]);\n\n  return PlotlyViaWindowModule;\n}();\n\nPlotlyViaWindowModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PlotlyViaWindowModule\n});\nPlotlyViaWindowModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function PlotlyViaWindowModule_Factory(t) {\n    return new (t || PlotlyViaWindowModule)();\n  },\n  imports: [[CommonModule, SharedModule]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlotlyService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlotComponent, [{\n    type: Component,\n    args: [{\n      selector: 'plotly-plot',\n      template: \"<div #plot [attr.id]=\\\"divId\\\" [className]=\\\"getClassName()\\\" [ngStyle]=\\\"style\\\"></div>\",\n      providers: [PlotlyService]\n    }]\n  }], function () {\n    return [{\n      type: PlotlyService\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.KeyValueDiffers\n    }];\n  }, {\n    revision: [{\n      type: Input\n    }],\n    debug: [{\n      type: Input\n    }],\n    useResizeHandler: [{\n      type: Input\n    }],\n    updateOnLayoutChange: [{\n      type: Input\n    }],\n    updateOnDataChange: [{\n      type: Input\n    }],\n    updateOnlyWithRevision: [{\n      type: Input\n    }],\n    initialized: [{\n      type: Output\n    }],\n    update: [{\n      type: Output\n    }],\n    purge: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    afterExport: [{\n      type: Output\n    }],\n    afterPlot: [{\n      type: Output\n    }],\n    animated: [{\n      type: Output\n    }],\n    animatingFrame: [{\n      type: Output\n    }],\n    animationInterrupted: [{\n      type: Output\n    }],\n    autoSize: [{\n      type: Output\n    }],\n    beforeExport: [{\n      type: Output\n    }],\n    buttonClicked: [{\n      type: Output\n    }],\n    click: [{\n      type: Output\n    }],\n    plotly_click: [{\n      type: Output\n    }],\n    clickAnnotation: [{\n      type: Output\n    }],\n    deselect: [{\n      type: Output\n    }],\n    doubleClick: [{\n      type: Output\n    }],\n    framework: [{\n      type: Output\n    }],\n    hover: [{\n      type: Output\n    }],\n    legendClick: [{\n      type: Output\n    }],\n    legendDoubleClick: [{\n      type: Output\n    }],\n    relayout: [{\n      type: Output\n    }],\n    restyle: [{\n      type: Output\n    }],\n    redraw: [{\n      type: Output\n    }],\n    selected: [{\n      type: Output\n    }],\n    selecting: [{\n      type: Output\n    }],\n    sliderChange: [{\n      type: Output\n    }],\n    sliderEnd: [{\n      type: Output\n    }],\n    sliderStart: [{\n      type: Output\n    }],\n    transitioning: [{\n      type: Output\n    }],\n    transitionInterrupted: [{\n      type: Output\n    }],\n    unhover: [{\n      type: Output\n    }],\n    relayouting: [{\n      type: Output\n    }],\n    treemapclick: [{\n      type: Output\n    }],\n    sunburstclick: [{\n      type: Output\n    }],\n    plotEl: [{\n      type: ViewChild,\n      args: ['plot', {\n        static: true\n      }]\n    }],\n    data: [{\n      type: Input\n    }],\n    layout: [{\n      type: Input\n    }],\n    config: [{\n      type: Input\n    }],\n    frames: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    divId: [{\n      type: Input\n    }],\n    className: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SharedModule, {\n    declarations: function declarations() {\n      return [PlotComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [PlotComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SharedModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [PlotComponent],\n      providers: [PlotlyService],\n      exports: [PlotComponent]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlyModule, {\n    imports: function imports() {\n      return [CommonModule, SharedModule];\n    },\n    exports: function exports() {\n      return [PlotComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlotlyModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, SharedModule],\n      declarations: [],\n      exports: [PlotComponent]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlyViaCDNModule, {\n    imports: function imports() {\n      return [CommonModule, SharedModule];\n    },\n    exports: function exports() {\n      return [PlotComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlotlyViaCDNModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, SharedModule],\n      declarations: [],\n      exports: [PlotComponent]\n    }]\n  }], function () {\n    return [{\n      type: PlotlyService\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PlotlyViaWindowModule, {\n    imports: function imports() {\n      return [CommonModule, SharedModule];\n    },\n    exports: function exports() {\n      return [PlotComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlotlyViaWindowModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, SharedModule],\n      declarations: [],\n      exports: [PlotComponent]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PlotComponent, PlotlyModule, PlotlyService, PlotlyViaCDNModule, PlotlyViaWindowModule, SharedModule as ɵa };","map":{"version":3,"sources":["ng:/angular-plotly.js/src/environments/environment.ts","ng:/angular-plotly.js/src/app/shared/plotly.service.ts","ng:/angular-plotly.js/src/app/shared/plot/plot.component.ts","ng:/angular-plotly.js/src/app/shared/shared.module.ts","ng:/angular-plotly.js/src/app/plotly/plotly.module.ts","ng:/angular-plotly.js/src/app/plotly-via-cdn/plotly-via-cdn.module.ts","ng:/angular-plotly.js/src/app/plotly-via-window/plotly-via-window.module.ts","ng:/angular-plotly.js/angular-plotly.js.ts"],"names":[],"mappings":"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","sourcesContent":["// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { Injectable } from '@angular/core';\nimport { Plotly } from './plotly.interface';\nimport { environment } from '../../environments/environment';\n\ntype PlotlyName = 'Plotly' | 'ViaCDN' | 'ViaWindow';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PlotlyService {\n    protected static instances: Plotly.PlotlyHTMLElement[] = [];\n    protected static _plotly?: any = undefined;\n    protected static _moduleName?: PlotlyName = undefined;\n\n    public static setModuleName(moduleName: PlotlyName) {\n        PlotlyService._moduleName = moduleName;\n    }\n\n    public static setPlotly(plotly: any) {\n        if (typeof plotly === 'object' && typeof plotly.react !== 'function') {\n            throw new Error('Invalid plotly.js version. Please, use any version above 1.40.0');\n        }\n\n        PlotlyService._plotly = plotly;\n    }\n\n    public static insert(instance: Plotly.PlotlyHTMLElement) {\n        const index = PlotlyService.instances.indexOf(instance);\n        if (index === -1) {\n            PlotlyService.instances.push(instance);\n        }\n        return instance;\n    }\n\n    public static remove(div: Plotly.PlotlyHTMLElement) {\n        const index = PlotlyService.instances.indexOf(div);\n        if (index >= 0) {\n            PlotlyService.instances.splice(index, 1);\n            PlotlyService._plotly.purge(div);\n        }\n    }\n\n    public get debug(): boolean {\n        return environment.production === false;\n    }\n\n    public getInstanceByDivId(id: string): Plotly.PlotlyHTMLElement | undefined {\n        for (const instance of PlotlyService.instances) {\n            if (instance && instance.id === id) {\n                return instance;\n            }\n        }\n        return undefined;\n    }\n\n    public getPlotly() {\n        if (typeof PlotlyService._plotly === 'undefined') {\n            const msg = PlotlyService._moduleName === 'ViaCDN'\n                ? `Error loading Peer dependency plotly.js from CDN url`\n                : `Peer dependency plotly.js isn't installed`;\n\n            throw new Error(msg);\n        }\n\n        return PlotlyService._plotly;\n    }\n\n    protected waitFor(fn: () => boolean): Promise<void> {\n        return new Promise((resolve) => {\n            const localFn = () => {\n                fn() ? resolve() : setTimeout(localFn, 10);\n            };\n\n            localFn();\n        });\n    }\n\n    // tslint:disable max-line-length\n    public async newPlot(div: HTMLDivElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>, frames?: Partial<Plotly.Config>[]) {\n        await this.waitFor(() => this.getPlotly() !== 'waiting');\n\n        if (frames) {\n            const obj = {data, layout, config, frames};\n            return this.getPlotly().newPlot(div, obj).then(() => PlotlyService.insert(div as any)) as Promise<any>;\n        }\n\n        return this.getPlotly().newPlot(div, data, layout, config).then(() => PlotlyService.insert(div as any)) as Promise<any>;\n    }\n\n    public plot(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>, frames?: Partial<Plotly.Config>[]) {\n        if (frames) {\n            const obj = {data, layout, config, frames};\n            return this.getPlotly().plot(div, obj) as Promise<any>;\n        }\n\n        return this.getPlotly().plot(div, data, layout, config) as Promise<any>;\n    }\n\n    public update(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>, frames?: Partial<Plotly.Config>[]) {\n        if (frames) {\n            const obj = {data, layout, config, frames};\n            return this.getPlotly().react(div, obj) as Promise<any>;\n        }\n\n        return this.getPlotly().react(div, data, layout, config) as Promise<any>;\n    }\n    // tslint:enable max-line-length\n\n    public resize(div: Plotly.PlotlyHTMLElement): void {\n        return this.getPlotly().Plots.resize(div);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChange,\n    SimpleChanges,\n    ViewChild,\n    DoCheck,\n    IterableDiffer,\n    IterableDiffers,\n    KeyValueDiffer,\n    KeyValueDiffers,\n} from '@angular/core';\n\nimport { PlotlyService } from '../plotly.service';\nimport { Plotly } from '../plotly.interface';\n\n// @dynamic\n@Component({\n    selector: 'plotly-plot',\n    template: `<div #plot [attr.id]=\"divId\" [className]=\"getClassName()\" [ngStyle]=\"style\"></div>`,\n    providers: [PlotlyService],\n})\nexport class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {\n    protected defaultClassName = 'js-plotly-plot';\n\n    public plotlyInstance: Plotly.PlotlyHTMLElement;\n    public resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;\n    public layoutDiffer: KeyValueDiffer<string, any>;\n    public dataDiffer: IterableDiffer<Plotly.Data>;\n\n    @ViewChild('plot', {static: true}) plotEl: ElementRef;\n\n    @Input() data?: Plotly.Data[];\n    @Input() layout?: Partial<Plotly.Layout>;\n    @Input() config?: Partial<Plotly.Config>;\n    @Input() frames?: Partial<Plotly.Config>[];\n    @Input() style?: { [key: string]: string };\n\n    @Input() divId?: string;\n    @Input() revision: number = 0;\n    @Input() className?: string | string[];\n    @Input() debug: boolean = false;\n    @Input() useResizeHandler: boolean = false;\n\n    @Input() updateOnLayoutChange = true;\n    @Input() updateOnDataChange = true;\n    @Input() updateOnlyWithRevision = false;\n\n    @Output() initialized = new EventEmitter<Plotly.Figure>();\n    @Output() update = new EventEmitter<Plotly.Figure>();\n    @Output() purge = new EventEmitter<Plotly.Figure>();\n    @Output() error = new EventEmitter<Error>();\n\n    @Output() afterExport = new EventEmitter();\n    @Output() afterPlot = new EventEmitter();\n    @Output() animated = new EventEmitter();\n    @Output() animatingFrame = new EventEmitter();\n    @Output() animationInterrupted = new EventEmitter();\n    @Output() autoSize = new EventEmitter();\n    @Output() beforeExport = new EventEmitter();\n    @Output() buttonClicked = new EventEmitter();\n    @Output() click = new EventEmitter();\n    @Output() plotly_click = new EventEmitter();\n    @Output() clickAnnotation = new EventEmitter();\n    @Output() deselect = new EventEmitter();\n    @Output() doubleClick = new EventEmitter();\n    @Output() framework = new EventEmitter();\n    @Output() hover = new EventEmitter();\n    @Output() legendClick = new EventEmitter();\n    @Output() legendDoubleClick = new EventEmitter();\n    @Output() relayout = new EventEmitter();\n    @Output() restyle = new EventEmitter();\n    @Output() redraw = new EventEmitter();\n    @Output() selected = new EventEmitter();\n    @Output() selecting = new EventEmitter();\n    @Output() sliderChange = new EventEmitter();\n    @Output() sliderEnd = new EventEmitter();\n    @Output() sliderStart = new EventEmitter();\n    @Output() transitioning = new EventEmitter();\n    @Output() transitionInterrupted = new EventEmitter();\n    @Output() unhover = new EventEmitter();\n    @Output() relayouting = new EventEmitter();\n    @Output() treemapclick = new EventEmitter();\n    @Output() sunburstclick = new EventEmitter();\n\n    public eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',\n        'beforeExport', 'buttonClicked', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',\n        'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',\n        'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover', 'relayouting', 'treemapclick',\n        'sunburstclick'];\n\n    constructor(\n        public plotly: PlotlyService,\n        public iterableDiffers: IterableDiffers,\n        public keyValueDiffers: KeyValueDiffers,\n    ) { }\n\n    ngOnInit() {\n        this.createPlot().then(() => {\n            const figure = this.createFigure();\n            this.initialized.emit(figure);\n        });\n\n\n        if (this.plotly.debug && this.click.observers.length > 0) {\n            const msg = 'DEPRECATED: Reconsider using `(plotly_click)` instead of `(click)` to avoid event conflict. '\n                + 'Please check https://github.com/plotly/angular-plotly.js#FAQ';\n            console.error(msg);\n        }\n    }\n\n    ngOnDestroy() {\n        if (typeof this.resizeHandler === 'function') {\n            this.getWindow().removeEventListener('resize', this.resizeHandler as any);\n            this.resizeHandler = undefined;\n        }\n\n        const figure = this.createFigure();\n        this.purge.emit(figure);\n        PlotlyService.remove(this.plotlyInstance);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let shouldUpdate = false;\n\n        const revision: SimpleChange = changes.revision;\n        if (revision && !revision.isFirstChange()) {\n            shouldUpdate = true;\n        }\n\n        const debug: SimpleChange = changes.debug;\n        if (debug && !debug.isFirstChange()) {\n            shouldUpdate = true;\n        }\n\n        if (shouldUpdate) {\n            this.updatePlot();\n        }\n\n        this.updateWindowResizeHandler();\n    }\n\n    ngDoCheck() {\n        if (this.updateOnlyWithRevision) {\n            return false;\n        }\n\n        let shouldUpdate = false;\n\n        if (this.updateOnLayoutChange) {\n            if (this.layoutDiffer) {\n                const layoutHasDiff = this.layoutDiffer.diff(this.layout);\n                if (layoutHasDiff) {\n                    shouldUpdate = true;\n                }\n            } else if (this.layout) {\n                this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\n            } else {\n                this.layoutDiffer = undefined;\n            }\n        }\n\n        if (this.updateOnDataChange) {\n            if (this.dataDiffer) {\n                const dataHasDiff = this.dataDiffer.diff(this.data);\n                if (dataHasDiff) {\n                    shouldUpdate = true;\n                }\n            } else if (Array.isArray(this.data)) {\n                this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\n            } else {\n                this.dataDiffer = undefined;\n            }\n        }\n\n        if (shouldUpdate && this.plotlyInstance) {\n            this.updatePlot();\n        }\n    }\n\n    getWindow(): any {\n        return window;\n    }\n\n    getClassName(): string {\n        let classes = [this.defaultClassName];\n\n        if (Array.isArray(this.className)) {\n            classes = classes.concat(this.className);\n        } else if (this.className) {\n            classes.push(this.className);\n        }\n\n        return classes.join(' ');\n    }\n\n    createPlot(): Promise<void> {\n        return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(plotlyInstance => {\n            this.plotlyInstance = plotlyInstance;\n            this.getWindow().gd = this.debug ? plotlyInstance : undefined;\n\n            this.eventNames.forEach(name => {\n                const eventName = `plotly_${name.toLowerCase()}`;\n                plotlyInstance.on(eventName, (data: any) => (this[name] as EventEmitter<void>).emit(data));\n            });\n\n            plotlyInstance.on('plotly_click', (data: any) => {\n                this.click.emit(data);\n                this.plotly_click.emit(data);\n            });\n\n            this.updateWindowResizeHandler();\n        }, err => {\n            console.error('Error while plotting:', err);\n            this.error.emit(err);\n        });\n    }\n\n    createFigure(): Plotly.Figure {\n        const p: any = this.plotlyInstance;\n        const figure: Plotly.Figure = {\n            data: p.data,\n            layout: p.layout,\n            frames: p._transitionData ? p._transitionData._frames : null\n        };\n\n        return figure;\n    }\n\n    updatePlot() {\n        if (!this.plotlyInstance) {\n            const error = new Error(`Plotly component wasn't initialized`);\n            this.error.emit(error);\n            throw error;\n        }\n\n        const layout = {...this.layout};\n\n        return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(() => {\n            const figure = this.createFigure();\n            this.update.emit(figure);\n        }, err => {\n            console.error('Error while updating plot:', err);\n            this.error.emit(err);\n        });\n    }\n\n    updateWindowResizeHandler() {\n        if (this.useResizeHandler) {\n            if (this.resizeHandler === undefined) {\n                this.resizeHandler = () => this.plotly.resize(this.plotlyInstance);\n                this.getWindow().addEventListener('resize', this.resizeHandler as any);\n            }\n        } else {\n            if (typeof this.resizeHandler === 'function') {\n                this.getWindow().removeEventListener('resize', this.resizeHandler as any);\n                this.resizeHandler = undefined;\n            }\n        }\n    }\n\n    dataDifferTrackBy(_: number, item: any): any {\n        const obj = Object.assign({}, item, { uid: '' });\n        return JSON.stringify(obj);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlotComponent } from './plot/plot.component';\nimport { PlotlyService } from './plotly.service';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [PlotComponent],\n    providers: [PlotlyService],\n    exports: [PlotComponent]\n})\nexport class SharedModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlotComponent } from '../shared/plot/plot.component';\nimport { PlotlyService } from '../shared/plotly.service';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n    imports: [CommonModule, SharedModule],\n    declarations: [],\n    exports: [PlotComponent]\n})\nexport class PlotlyModule {\n    public static plotlyjs: any = {};\n\n    constructor() {\n        if (!this.isValid()) {\n            const msg = \"Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start\"\n                      + \" to see how to add PlotlyJS to your project.\";\n            throw new Error(msg);\n        }\n\n        PlotlyService.setPlotly(PlotlyModule.plotlyjs);\n    }\n\n    private isValid(): boolean {\n        return PlotlyModule.plotlyjs !== undefined\n            && typeof PlotlyModule.plotlyjs.plot === 'function';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlotComponent } from '../shared/plot/plot.component';\nimport { PlotlyService } from '../shared/plotly.service';\nimport { SharedModule } from '../shared/shared.module';\n\nexport type PlotlyBundleName = 'basic' | 'cartesian' | 'geo' | 'gl3d' | 'gl2d' | 'mapbox' | 'finance';\n\n// @dynamic\n@NgModule({\n    imports: [CommonModule, SharedModule],\n    declarations: [],\n    exports: [PlotComponent]\n})\nexport class PlotlyViaCDNModule {\n    private static _plotlyBundle?: string = null;\n    private static _plotlyVersion: string = 'latest';\n    static plotlyBundleNames: PlotlyBundleName[] = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];\n\n    constructor(public plotlyService: PlotlyService) {\n        PlotlyService.setModuleName('ViaCDN');\n    }\n\n    static set plotlyVersion(version: string) {\n        const isOk = version === 'latest' || /^\\d\\.\\d{1,2}\\.\\d{1,2}$/.test(version);\n        if (!isOk) {\n            throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);\n        }\n\n        PlotlyViaCDNModule.loadViaCDN();\n        PlotlyViaCDNModule._plotlyVersion = version;\n    }\n\n    static set plotlyBundle(bundle: PlotlyBundleName) {\n        const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;\n        if (!isOk) {\n            const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `\"${n}\"`).join(', ');\n            throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);\n        }\n\n        PlotlyViaCDNModule._plotlyBundle = bundle;\n    }\n\n    static loadViaCDN(): void {\n        PlotlyService.setPlotly('waiting');\n\n        const init = () => {\n            const src = PlotlyViaCDNModule._plotlyBundle == null\n                ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule._plotlyVersion}.min.js`\n                : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule._plotlyBundle}-${PlotlyViaCDNModule._plotlyVersion}.min.js`;\n\n            const script: HTMLScriptElement = document.createElement('script');\n            script.type = 'text/javascript';\n            script.src = src;\n            script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);\n\n            const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n            head.appendChild(script);\n\n            let counter = 200; // equivalent of 10 seconds...\n\n            const fn = () => {\n                const plotly = (window as any).Plotly;\n                if (plotly) {\n                    PlotlyService.setPlotly(plotly);\n                } else if (counter > 0) {\n                    counter --;\n                    setTimeout(fn, 50);\n                } else {\n                    throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);\n                }\n            };\n\n            fn();\n        };\n\n        setTimeout(init);\n    }\n\n    static forRoot(config: Partial<{version: string}>): never {\n        const url = \"https://github.com/plotly/angular-plotly.js#customizing-the-plotlyjs-bundle\";\n        throw new Error(`[PlotlyViaCDNModule] forRoot method is deprecated. Please see: ${url}`);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlotComponent } from '../shared/plot/plot.component';\nimport { PlotlyService } from '../shared/plotly.service';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n    imports: [CommonModule, SharedModule],\n    declarations: [],\n    exports: [PlotComponent]\n})\nexport class PlotlyViaWindowModule {\n    constructor() {\n        const plotly = (window as any).Plotly;\n\n        if (typeof plotly === 'undefined') {\n            throw new Error(`Plotly object not found on window.`);\n        }\n\n        PlotlyService.setPlotly(plotly);\n    }\n\n    static forRoot(): never {\n        const url = \"https://github.com/plotly/angular-plotly.js#plotly-via-window-module\";\n        throw new Error(`[PlotlyViaWindowModule] forRoot method is deprecated. Please see: ${url}`);\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {SharedModule as ɵa} from './src/app/shared/shared.module';"]},"metadata":{},"sourceType":"module"}