{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Directive, ChangeDetectorRef, Optional, ContentChildren, ContentChild, Input, forwardRef, Inject, ViewChild, EventEmitter, isDevMode, Attribute, Output, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinDisableRipple, setLines, MatLine, MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, A, END, HOME, ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDividerModule } from '@angular/material/divider';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatList.\n\n/**\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/core';\nimport * as ɵngcc2 from '@angular/common';\nvar _c0 = [\"*\"];\nvar _c1 = [[[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nvar _c2 = [\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\", \"[mat-line], [matLine]\", \"*\"];\nvar _c3 = [\"text\"];\n\nfunction MatListOption_mat_pseudo_checkbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"mat-pseudo-checkbox\", 5);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx_r0.disabled);\n  }\n}\n\nvar _c4 = [\"*\", [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]]];\nvar _c5 = [\"*\", \"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\"];\n\nvar MatListBase = function MatListBase() {\n  _classCallCheck(this, MatListBase);\n};\n/** @type {?} */\n\n\nvar _MatListMixinBase = mixinDisabled(mixinDisableRipple(MatListBase)); // Boilerplate for applying mixins to MatListItem.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatListItemBase = function MatListItemBase() {\n  _classCallCheck(this, MatListItemBase);\n};\n/** @type {?} */\n\n\nvar _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\nvar MatNavList = /*#__PURE__*/function (_MatListMixinBase2) {\n  _inherits(MatNavList, _MatListMixinBase2);\n\n  var _super = _createSuper(MatNavList);\n\n  function MatNavList() {\n    var _this;\n\n    _classCallCheck(this, MatNavList);\n\n    _this = _super.apply(this, arguments);\n    /**\n     * Emits when the state of the list changes.\n     */\n\n    _this._stateChanges = new Subject();\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatNavList, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }]);\n\n  return MatNavList;\n}(_MatListMixinBase);\n\nMatNavList.ɵfac = function MatNavList_Factory(t) {\n  return ɵMatNavList_BaseFactory(t || MatNavList);\n};\n\nMatNavList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatNavList,\n  selectors: [[\"mat-nav-list\"]],\n  hostAttrs: [\"role\", \"navigation\", 1, \"mat-nav-list\", \"mat-list-base\"],\n  inputs: {\n    disableRipple: \"disableRipple\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matNavList\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatNavList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\nvar ɵMatNavList_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatNavList);\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatNavList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-nav-list',\n      exportAs: 'matNavList',\n      host: {\n        'role': 'navigation',\n        'class': 'mat-nav-list mat-list-base'\n      },\n      template: \"<ng-content></ng-content>\\n\\n\",\n      inputs: ['disableRipple', 'disabled'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n    }]\n  }], null, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  MatNavList.ngAcceptInputType_disableRipple;\n  /** @type {?} */\n\n  MatNavList.ngAcceptInputType_disabled;\n  /**\n   * Emits when the state of the list changes.\n   * @type {?}\n   */\n\n  MatNavList.prototype._stateChanges;\n}\n\nvar MatList = /*#__PURE__*/function (_MatListMixinBase3) {\n  _inherits(MatList, _MatListMixinBase3);\n\n  var _super2 = _createSuper(MatList);\n\n  /**\n   * @param {?} _elementRef\n   */\n  function MatList(_elementRef) {\n    var _this2;\n\n    _classCallCheck(this, MatList);\n\n    _this2 = _super2.call(this);\n    _this2._elementRef = _elementRef;\n    /**\n     * Emits when the state of the list changes.\n     */\n\n    _this2._stateChanges = new Subject();\n\n    if (_this2._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n\n    return _this2;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(MatList, [{\n    key: \"_getListType\",\n    value: function _getListType() {\n      /** @type {?} */\n      var nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n\n      return null;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n  }]);\n\n  return MatList;\n}(_MatListMixinBase);\n\nMatList.ɵfac = function MatList_Factory(t) {\n  return new (t || MatList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nMatList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatList,\n  selectors: [[\"mat-list\"], [\"mat-action-list\"]],\n  hostAttrs: [1, \"mat-list\", \"mat-list-base\"],\n  inputs: {\n    disableRipple: \"disableRipple\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matList\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-list, mat-action-list',\n      exportAs: 'matList',\n      template: \"<ng-content></ng-content>\\n\\n\",\n      host: {\n        'class': 'mat-list mat-list-base'\n      },\n      inputs: ['disableRipple', 'disabled'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n\nif (false) {\n  /** @type {?} */\n  MatList.ngAcceptInputType_disableRipple;\n  /** @type {?} */\n\n  MatList.ngAcceptInputType_disabled;\n  /**\n   * Emits when the state of the list changes.\n   * @type {?}\n   */\n\n  MatList.prototype._stateChanges;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatList.prototype._elementRef;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatListAvatarCssMatStyler = function MatListAvatarCssMatStyler() {\n  _classCallCheck(this, MatListAvatarCssMatStyler);\n};\n\nMatListAvatarCssMatStyler.ɵfac = function MatListAvatarCssMatStyler_Factory(t) {\n  return new (t || MatListAvatarCssMatStyler)();\n};\n\nMatListAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatListAvatarCssMatStyler,\n  selectors: [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"matListAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-list-avatar\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-list-avatar], [matListAvatar]',\n      host: {\n        'class': 'mat-list-avatar'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatListIconCssMatStyler = function MatListIconCssMatStyler() {\n  _classCallCheck(this, MatListIconCssMatStyler);\n};\n\nMatListIconCssMatStyler.ɵfac = function MatListIconCssMatStyler_Factory(t) {\n  return new (t || MatListIconCssMatStyler)();\n};\n\nMatListIconCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatListIconCssMatStyler,\n  selectors: [[\"\", \"mat-list-icon\", \"\"], [\"\", \"matListIcon\", \"\"]],\n  hostAttrs: [1, \"mat-list-icon\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListIconCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-list-icon], [matListIcon]',\n      host: {\n        'class': 'mat-list-icon'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\n\n\nvar MatListSubheaderCssMatStyler = function MatListSubheaderCssMatStyler() {\n  _classCallCheck(this, MatListSubheaderCssMatStyler);\n};\n\nMatListSubheaderCssMatStyler.ɵfac = function MatListSubheaderCssMatStyler_Factory(t) {\n  return new (t || MatListSubheaderCssMatStyler)();\n};\n\nMatListSubheaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: MatListSubheaderCssMatStyler,\n  selectors: [[\"\", \"mat-subheader\", \"\"], [\"\", \"matSubheader\", \"\"]],\n  hostAttrs: [1, \"mat-subheader\"]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListSubheaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-subheader], [matSubheader]',\n      host: {\n        'class': 'mat-subheader'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * An item within a Material Design list.\n */\n\n\nvar MatListItem = /*#__PURE__*/function (_MatListItemMixinBase2) {\n  _inherits(MatListItem, _MatListItemMixinBase2);\n\n  var _super3 = _createSuper(MatListItem);\n\n  /**\n   * @param {?} _element\n   * @param {?} _changeDetectorRef\n   * @param {?=} navList\n   * @param {?=} list\n   */\n  function MatListItem(_element, _changeDetectorRef, navList, list) {\n    var _this3;\n\n    _classCallCheck(this, MatListItem);\n\n    _this3 = _super3.call(this);\n    _this3._element = _element;\n    _this3._isInteractiveList = false;\n    _this3._destroyed = new Subject();\n    _this3._disabled = false;\n    _this3._isInteractiveList = !!(navList || list && list._getListType() === 'action-list');\n    _this3._list = navList || list; // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n\n    /** @type {?} */\n\n    var element = _this3._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (_this3._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      _this3._list._stateChanges.pipe(takeUntil(_this3._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n\n    return _this3;\n  }\n  /**\n   * Whether the option is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(MatListItem, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return !this._isInteractiveList || this.disableRipple || !!(this._list && this._list.disableRipple);\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostElement\",\n    value: function _getHostElement() {\n      return this._element.nativeElement;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || !!(this._list && this._list.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatListItem;\n}(_MatListItemMixinBase);\n\nMatListItem.ɵfac = function MatListItem_Factory(t) {\n  return new (t || MatListItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatNavList, 8), ɵngcc0.ɵɵdirectiveInject(MatList, 8));\n};\n\nMatListItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatListItem,\n  selectors: [[\"mat-list-item\"], [\"a\", \"mat-list-item\", \"\"], [\"button\", \"mat-list-item\", \"\"]],\n  contentQueries: function MatListItem_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-list-item\", \"mat-focus-indicator\"],\n  hostVars: 6,\n  hostBindings: function MatListItem_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-avatar\", ctx._avatar || ctx._icon)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon);\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matListItem\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 6,\n  vars: 2,\n  consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-list-text\"]],\n  template: function MatListItem_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c1);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵprojection(4, 1);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(5, 2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n    }\n  },\n  directives: [ɵngcc1.MatRipple],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatListItem.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatNavList,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: MatList,\n    decorators: [{\n      type: Optional\n    }]\n  }];\n};\n\nMatListItem.propDecorators = {\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine, {\n      descendants: true\n    }]\n  }],\n  _avatar: [{\n    type: ContentChild,\n    args: [MatListAvatarCssMatStyler]\n  }],\n  _icon: [{\n    type: ContentChild,\n    args: [MatListIconCssMatStyler]\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListItem, [{\n    type: Component,\n    args: [{\n      selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n      exportAs: 'matListItem',\n      host: {\n        'class': 'mat-list-item mat-focus-indicator',\n        '[class.mat-list-item-disabled]': 'disabled',\n        // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n        '[class.mat-list-item-avatar]': '_avatar || _icon',\n        '[class.mat-list-item-with-avatar]': '_avatar || _icon'\n      },\n      inputs: ['disableRipple'],\n      template: \"<div class=\\\"mat-list-item-content\\\">\\n  <div class=\\\"mat-list-item-ripple\\\" mat-ripple\\n       [matRippleTrigger]=\\\"_getHostElement()\\\"\\n       [matRippleDisabled]=\\\"_isRippleDisabled()\\\">\\n  </div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n  <div class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n\\n  <ng-content></ng-content>\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatNavList,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatList,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }],\n    _avatar: [{\n      type: ContentChild,\n      args: [MatListAvatarCssMatStyler]\n    }],\n    _icon: [{\n      type: ContentChild,\n      args: [MatListIconCssMatStyler]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatListItem.ngAcceptInputType_disableRipple;\n  /** @type {?} */\n\n  MatListItem.ngAcceptInputType_disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListItem.prototype._isInteractiveList;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListItem.prototype._list;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListItem.prototype._destroyed;\n  /** @type {?} */\n\n  MatListItem.prototype._lines;\n  /** @type {?} */\n\n  MatListItem.prototype._avatar;\n  /** @type {?} */\n\n  MatListItem.prototype._icon;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListItem.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListItem.prototype._element;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/selection-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSelectionListBase = function MatSelectionListBase() {\n  _classCallCheck(this, MatSelectionListBase);\n};\n/** @type {?} */\n\n\nvar _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n/**\n * \\@docs-private\n */\n\n\nvar MatListOptionBase = function MatListOptionBase() {\n  _classCallCheck(this, MatListOptionBase);\n};\n/** @type {?} */\n\n\nvar _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatSelectionList;\n  }),\n  multi: true\n};\n/**\n * Change event that is being fired whenever the selected state of an option changes.\n */\n\nvar MatSelectionListChange =\n/**\n * @param {?} source\n * @param {?} option\n */\nfunction MatSelectionListChange(source, option) {\n  _classCallCheck(this, MatSelectionListChange);\n\n  this.source = source;\n  this.option = option;\n};\n\nif (false) {\n  /**\n   * Reference to the selection list that emitted the event.\n   * @type {?}\n   */\n  MatSelectionListChange.prototype.source;\n  /**\n   * Reference to the option that has been changed.\n   * @type {?}\n   */\n\n  MatSelectionListChange.prototype.option;\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n\n\nvar MatListOption = /*#__PURE__*/function (_MatListOptionMixinBa) {\n  _inherits(MatListOption, _MatListOptionMixinBa);\n\n  var _super4 = _createSuper(MatListOption);\n\n  /**\n   * @param {?} _element\n   * @param {?} _changeDetector\n   * @param {?} selectionList\n   */\n  function MatListOption(_element, _changeDetector, selectionList) {\n    var _this4;\n\n    _classCallCheck(this, MatListOption);\n\n    _this4 = _super4.call(this);\n    _this4._element = _element;\n    _this4._changeDetector = _changeDetector;\n    _this4.selectionList = selectionList;\n    _this4._selected = false;\n    _this4._disabled = false;\n    _this4._hasFocus = false;\n    /**\n     * Whether the label should appear before or after the checkbox. Defaults to 'after'\n     */\n\n    _this4.checkboxPosition = 'after';\n    /**\n     * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n     * in the first cycle.\n     */\n\n    _this4._inputsInitialized = false;\n    return _this4;\n  }\n  /**\n   * Theme color of the list option. This sets the color of the checkbox.\n   * @return {?}\n   */\n\n\n  _createClass(MatListOption, [{\n    key: \"ngOnInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngOnInit() {\n      var _this5 = this;\n\n      /** @type {?} */\n      var list = this.selectionList;\n\n      if (list._value && list._value.some(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      function (value) {\n        return list.compareWith(value, _this5._value);\n      })) {\n        this._setSelected(true);\n      }\n      /** @type {?} */\n\n\n      var wasSelected = this._selected; // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n\n      Promise.resolve().then(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this5._selected || wasSelected) {\n          _this5.selected = true;\n\n          _this5._changeDetector.markForCheck();\n        }\n      });\n      this._inputsInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this6 = this;\n\n      if (this.selected) {\n        // We have to delay this until the next tick in order\n        // to avoid changed after checked errors.\n        Promise.resolve().then(\n        /**\n        * @return {?}\n        */\n        function () {\n          _this6.selected = false;\n        });\n      }\n      /** @type {?} */\n\n\n      var hadFocus = this._hasFocus;\n      /** @type {?} */\n\n      var newActiveItem = this.selectionList._removeOptionFromList(this); // Only move focus if this option was focused at the time it was destroyed.\n\n\n      if (hadFocus && newActiveItem) {\n        newActiveItem.focus();\n      }\n    }\n    /**\n     * Toggles the selection state of the option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.selected = !this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the option.\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this._element.nativeElement.focus();\n    }\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * \\@docs-private\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      return this._text ? this._text.nativeElement.textContent || '' : '';\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_isRippleDisabled\",\n    value: function _isRippleDisabled() {\n      return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n        this.toggle(); // Emit a change event if the selected state of the option changed through user interaction.\n\n        this.selectionList._emitChangeEvent(this);\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      this.selectionList._setFocusedOption(this);\n\n      this._hasFocus = true;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"_handleBlur\",\n    value: function _handleBlur() {\n      this.selectionList._onTouched();\n\n      this._hasFocus = false;\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getHostElement\",\n    value: function _getHostElement() {\n      return this._element.nativeElement;\n    }\n    /**\n     * Sets the selected state of the option. Returns whether the value has changed.\n     * @param {?} selected\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setSelected\",\n    value: function _setSelected(selected) {\n      if (selected === this._selected) {\n        return false;\n      }\n\n      this._selected = selected;\n\n      if (selected) {\n        this.selectionList.selectedOptions.select(this);\n      } else {\n        this.selectionList.selectedOptions.deselect(this);\n      }\n\n      this._changeDetector.markForCheck();\n\n      return true;\n    }\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      this._changeDetector.markForCheck();\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this._color || this.selectionList.color;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      this._color = newValue;\n    }\n    /**\n     * Value of the option\n     * @return {?}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    ,\n    set: function set(newValue) {\n      if (this.selected && newValue !== this.value && this._inputsInitialized) {\n        this.selected = false;\n      }\n\n      this._value = newValue;\n    }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.selectionList && this.selectionList.disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /**\n     * Whether the option is selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this.selectionList.selectedOptions.isSelected(this);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var isSelected = coerceBooleanProperty(value);\n\n      if (isSelected !== this._selected) {\n        this._setSelected(isSelected);\n\n        this.selectionList._reportValueChange();\n      }\n    }\n  }]);\n\n  return MatListOption;\n}(_MatListOptionMixinBase);\n\nMatListOption.ɵfac = function MatListOption_Factory(t) {\n  return new (t || MatListOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return MatSelectionList;\n  })));\n};\n\nMatListOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatListOption,\n  selectors: [[\"mat-list-option\"]],\n  contentQueries: function MatListOption_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, true);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    }\n  },\n  viewQuery: function MatListOption_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c3, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._text = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-list-item\", \"mat-list-option\", \"mat-focus-indicator\"],\n  hostVars: 15,\n  hostBindings: function MatListOption_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatListOption_focus_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatListOption_blur_HostBindingHandler() {\n        return ctx._handleBlur();\n      })(\"click\", function MatListOption_click_HostBindingHandler() {\n        return ctx._handleClick();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-selected\", ctx.selected)(\"aria-disabled\", ctx.disabled)(\"tabindex\", 0 - 1);\n      ɵngcc0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color !== \"primary\" && ctx.color !== \"warn\")(\"mat-warn\", ctx.color === \"warn\")(\"mat-list-single-selected-option\", ctx.selected && !ctx.selectionList.multiple);\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    checkboxPosition: \"checkboxPosition\",\n    color: \"color\",\n    value: \"value\",\n    selected: \"selected\",\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matListOption\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c5,\n  decls: 7,\n  vars: 5,\n  consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-list-text\"], [\"text\", \"\"], [3, \"state\", \"disabled\"]],\n  template: function MatListOption_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c4);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵelement(1, \"div\", 1);\n      ɵngcc0.ɵɵtemplate(2, MatListOption_mat_pseudo_checkbox_2_Template, 1, 2, \"mat-pseudo-checkbox\", 2);\n      ɵngcc0.ɵɵelementStart(3, \"div\", 3, 4);\n      ɵngcc0.ɵɵprojection(5);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵprojection(6, 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-list-item-content-reverse\", ctx.checkboxPosition == \"after\");\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selectionList.multiple);\n    }\n  },\n  directives: [ɵngcc1.MatRipple, ɵngcc2.NgIf, ɵngcc1.MatPseudoCheckbox],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatListOption.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: MatSelectionList,\n    decorators: [{\n      type: Inject,\n      args: [forwardRef(\n      /**\n      * @return {?}\n      */\n      function () {\n        return MatSelectionList;\n      })]\n    }]\n  }];\n};\n\nMatListOption.propDecorators = {\n  _avatar: [{\n    type: ContentChild,\n    args: [MatListAvatarCssMatStyler]\n  }],\n  _icon: [{\n    type: ContentChild,\n    args: [MatListIconCssMatStyler]\n  }],\n  _lines: [{\n    type: ContentChildren,\n    args: [MatLine, {\n      descendants: true\n    }]\n  }],\n  _text: [{\n    type: ViewChild,\n    args: ['text']\n  }],\n  checkboxPosition: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  selected: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListOption, [{\n    type: Component,\n    args: [{\n      selector: 'mat-list-option',\n      exportAs: 'matListOption',\n      inputs: ['disableRipple'],\n      host: {\n        'role': 'option',\n        'class': 'mat-list-item mat-list-option mat-focus-indicator',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()',\n        '[class.mat-list-item-disabled]': 'disabled',\n        '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n        // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n        // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n        // its theme.\n        '[class.mat-primary]': 'color === \"primary\"',\n        // Even though accent is the default, we need to set this class anyway, because the  list might\n        // be placed inside a parent that has one of the other colors with a higher specificity.\n        '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n        '[class.mat-warn]': 'color === \"warn\"',\n        '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n        '[attr.aria-selected]': 'selected',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.tabindex]': '-1'\n      },\n      template: \"<div class=\\\"mat-list-item-content\\\"\\n  [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\">\\n\\n  <div mat-ripple\\n    class=\\\"mat-list-item-ripple\\\"\\n    [matRippleTrigger]=\\\"_getHostElement()\\\"\\n    [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div>\\n\\n  <mat-pseudo-checkbox\\n    *ngIf=\\\"selectionList.multiple\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n    [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n  <div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: MatSelectionList,\n      decorators: [{\n        type: Inject,\n        args: [forwardRef(\n        /**\n         * @return {?}\n         */\n        function () {\n          return MatSelectionList;\n        })]\n      }]\n    }];\n  }, {\n    checkboxPosition: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _avatar: [{\n      type: ContentChild,\n      args: [MatListAvatarCssMatStyler]\n    }],\n    _icon: [{\n      type: ContentChild,\n      args: [MatListIconCssMatStyler]\n    }],\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }],\n    _text: [{\n      type: ViewChild,\n      args: ['text']\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatListOption.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatListOption.ngAcceptInputType_selected;\n  /** @type {?} */\n\n  MatListOption.ngAcceptInputType_disableRipple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._selected;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._disabled;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._hasFocus;\n  /** @type {?} */\n\n  MatListOption.prototype._avatar;\n  /** @type {?} */\n\n  MatListOption.prototype._icon;\n  /** @type {?} */\n\n  MatListOption.prototype._lines;\n  /**\n   * DOM element containing the item's text.\n   * @type {?}\n   */\n\n  MatListOption.prototype._text;\n  /**\n   * Whether the label should appear before or after the checkbox. Defaults to 'after'\n   * @type {?}\n   */\n\n  MatListOption.prototype.checkboxPosition;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._color;\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._inputsInitialized;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._value;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatListOption.prototype._changeDetector;\n  /**\n   * \\@docs-private\n   * @type {?}\n   */\n\n  MatListOption.prototype.selectionList;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n\n\nvar MatSelectionList = /*#__PURE__*/function (_MatSelectionListMixi) {\n  _inherits(MatSelectionList, _MatSelectionListMixi);\n\n  var _super5 = _createSuper(MatSelectionList);\n\n  /**\n   * @param {?} _element\n   * @param {?} tabIndex\n   * @param {?} _changeDetector\n   */\n  function MatSelectionList(_element, // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n  tabIndex, _changeDetector) {\n    var _this7;\n\n    _classCallCheck(this, MatSelectionList);\n\n    _this7 = _super5.call(this);\n    _this7._element = _element;\n    _this7._changeDetector = _changeDetector;\n    _this7._multiple = true;\n    _this7._contentInitialized = false;\n    /**\n     * Emits a change event whenever the selected state of an option changes.\n     */\n\n    _this7.selectionChange = new EventEmitter();\n    /**\n     * Tabindex of the selection list.\n     * \\@breaking-change 11.0.0 Remove `tabIndex` input.\n     */\n\n    _this7.tabIndex = 0;\n    /**\n     * Theme color of the selection list. This sets the checkbox color for all list options.\n     */\n\n    _this7.color = 'accent';\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     */\n\n    _this7.compareWith =\n    /**\n    * @param {?} a1\n    * @param {?} a2\n    * @return {?}\n    */\n    function (a1, a2) {\n      return a1 === a2;\n    };\n\n    _this7._disabled = false;\n    /**\n     * The currently selected options.\n     */\n\n    _this7.selectedOptions = new SelectionModel(_this7._multiple);\n    /**\n     * The tabindex of the selection list.\n     */\n\n    _this7._tabIndex = -1;\n    /**\n     * View to model callback that should be called whenever the selected options change.\n     */\n\n    _this7._onChange =\n    /**\n    * @param {?} _\n    * @return {?}\n    */\n    function (_) {};\n    /**\n     * Emits when the list has been destroyed.\n     */\n\n\n    _this7._destroyed = new Subject();\n    /**\n     * View to model callback that should be called if the list or its options lost focus.\n     */\n\n    _this7._onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    return _this7;\n  }\n  /**\n   * Whether the selection list is disabled.\n   * @return {?}\n   */\n\n\n  _createClass(MatSelectionList, [{\n    key: \"ngAfterContentInit\",\n\n    /**\n     * @return {?}\n     */\n    value: function ngAfterContentInit() {\n      var _this8 = this;\n\n      this._contentInitialized = true;\n      this._keyManager = new FocusKeyManager(this.options).withWrap().withTypeAhead() // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(\n      /**\n      * @return {?}\n      */\n      function () {\n        return false;\n      }).withAllowedModifierKeys(['shiftKey']);\n\n      if (this._value) {\n        this._setOptionsFromValues(this._value);\n      } // If the user attempts to tab out of the selection list, allow focus to escape.\n\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this8._allowFocusEscape();\n      }); // When the number of options change, update the tabindex of the selection list.\n\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this8._updateTabIndex();\n      }); // Sync external changes to the model back to the options.\n\n      this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(\n      /**\n      * @param {?} event\n      * @return {?}\n      */\n      function (event) {\n        if (event.added) {\n          var _iterator = _createForOfIteratorHelper(event.added),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n              item.selected = true;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        if (event.removed) {\n          var _iterator2 = _createForOfIteratorHelper(event.removed),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _item = _step2.value;\n              _item.selected = false;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      /** @type {?} */\n      var disableRippleChanges = changes['disableRipple'];\n      /** @type {?} */\n\n      var colorChanges = changes['color'];\n\n      if (disableRippleChanges && !disableRippleChanges.firstChange || colorChanges && !colorChanges.firstChange) {\n        this._markOptionsForCheck();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._isDestroyed = true;\n    }\n    /**\n     * Focuses the selection list.\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._element.nativeElement.focus(options);\n    }\n    /**\n     * Selects all of the options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      this._setAllOptionsSelected(true);\n    }\n    /**\n     * Deselects all of the options.\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselectAll\",\n    value: function deselectAll() {\n      this._setAllOptionsSelected(false);\n    }\n    /**\n     * Sets the focused option of the selection-list.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setFocusedOption\",\n    value: function _setFocusedOption(option) {\n      this._keyManager.updateActiveItem(option);\n    }\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @param {?} option\n     * @return {?} Currently-active item.\n     */\n\n  }, {\n    key: \"_removeOptionFromList\",\n    value: function _removeOptionFromList(option) {\n      /** @type {?} */\n      var optionIndex = this._getOptionIndex(option);\n\n      if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n        // Check whether the option is the last item\n        if (optionIndex > 0) {\n          this._keyManager.updateActiveItem(optionIndex - 1);\n        } else if (optionIndex === 0 && this.options.length > 1) {\n          this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n        }\n      }\n\n      return this._keyManager.activeItem;\n    }\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n\n  }, {\n    key: \"_keydown\",\n    value: function _keydown(event) {\n      /** @type {?} */\n      var keyCode = event.keyCode;\n      /** @type {?} */\n\n      var manager = this._keyManager;\n      /** @type {?} */\n\n      var previousFocusIndex = manager.activeItemIndex;\n      /** @type {?} */\n\n      var hasModifier = hasModifierKey(event);\n\n      switch (keyCode) {\n        case SPACE:\n        case ENTER:\n          if (!hasModifier && !manager.isTyping()) {\n            this._toggleFocusedOption(); // Always prevent space from scrolling the page since the list has focus\n\n\n            event.preventDefault();\n          }\n\n          break;\n\n        case HOME:\n        case END:\n          if (!hasModifier) {\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            event.preventDefault();\n          }\n\n          break;\n\n        default:\n          // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n          if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') && !manager.isTyping()) {\n            /** @type {?} */\n            var shouldSelect = this.options.some(\n            /**\n            * @param {?} option\n            * @return {?}\n            */\n            function (option) {\n              return !option.disabled && !option.selected;\n            });\n\n            this._setAllOptionsSelected(shouldSelect, true);\n\n            event.preventDefault();\n          } else {\n            manager.onKeydown(event);\n          }\n\n      }\n\n      if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey && manager.activeItemIndex !== previousFocusIndex) {\n        this._toggleFocusedOption();\n      }\n    }\n    /**\n     * Reports a value change to the ControlValueAccessor\n     * @return {?}\n     */\n\n  }, {\n    key: \"_reportValueChange\",\n    value: function _reportValueChange() {\n      // Stop reporting value changes after the list has been destroyed. This avoids\n      // cases where the list might wrongly reset its value once it is removed, but\n      // the form control is still live.\n      if (this.options && !this._isDestroyed) {\n        /** @type {?} */\n        var value = this._getSelectedOptionValues();\n\n        this._onChange(value);\n\n        this._value = value;\n      }\n    }\n    /**\n     * Emits a change event if the selected state of an option changed.\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent(option) {\n      this.selectionChange.emit(new MatSelectionListChange(this, option));\n    }\n    /**\n     * When the selection list is focused, we want to move focus to an option within the list. Do this\n     * by setting the appropriate option to be active.\n     * @return {?}\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      /** @type {?} */\n      var activeIndex = this._keyManager.activeItemIndex;\n\n      if (!activeIndex || activeIndex === -1) {\n        // If there is no active index, set focus to the first option.\n        this._keyManager.setFirstItemActive();\n      } else {\n        // Otherwise, set focus to the active option.\n        this._keyManager.setActiveItem(activeIndex);\n      }\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(values) {\n      this._value = values;\n\n      if (this.options) {\n        this._setOptionsFromValues(values || []);\n      }\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Sets the selected options based on the specified values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setOptionsFromValues\",\n    value: function _setOptionsFromValues(values) {\n      var _this9 = this;\n\n      this.options.forEach(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      function (option) {\n        return option._setSelected(false);\n      });\n      values.forEach(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      function (value) {\n        /** @type {?} */\n        var correspondingOption = _this9.options.find(\n        /**\n        * @param {?} option\n        * @return {?}\n        */\n        function (option) {\n          // Skip options that are already in the model. This allows us to handle cases\n          // where the same primitive value is selected multiple times.\n          return option.selected ? false : _this9.compareWith(option.value, value);\n        });\n\n        if (correspondingOption) {\n          correspondingOption._setSelected(true);\n        }\n      });\n    }\n    /**\n     * Returns the values of the selected options.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getSelectedOptionValues\",\n    value: function _getSelectedOptionValues() {\n      return this.options.filter(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      function (option) {\n        return option.selected;\n      }).map(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      function (option) {\n        return option.value;\n      });\n    }\n    /**\n     * Toggles the state of the currently focused option if enabled.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_toggleFocusedOption\",\n    value: function _toggleFocusedOption() {\n      /** @type {?} */\n      var focusedIndex = this._keyManager.activeItemIndex;\n\n      if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n        /** @type {?} */\n        var focusedOption = this.options.toArray()[focusedIndex];\n\n        if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n          focusedOption.toggle(); // Emit a change event because the focused option changed its state through user\n          // interaction.\n\n          this._emitChangeEvent(focusedOption);\n        }\n      }\n    }\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     * @private\n     * @param {?} isSelected\n     * @param {?=} skipDisabled\n     * @return {?}\n     */\n\n  }, {\n    key: \"_setAllOptionsSelected\",\n    value: function _setAllOptionsSelected(isSelected, skipDisabled) {\n      // Keep track of whether anything changed, because we only want to\n      // emit the changed event when something actually changed.\n\n      /** @type {?} */\n      var hasChanged = false;\n      this.options.forEach(\n      /**\n      * @param {?} option\n      * @return {?}\n      */\n      function (option) {\n        if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n          hasChanged = true;\n        }\n      });\n\n      if (hasChanged) {\n        this._reportValueChange();\n      }\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of options.\n     */\n\n  }, {\n    key: \"_isValidIndex\",\n    value: function _isValidIndex(index) {\n      return index >= 0 && index < this.options.length;\n    }\n    /**\n     * Returns the index of the specified list option.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n\n  }, {\n    key: \"_getOptionIndex\",\n    value: function _getOptionIndex(option) {\n      return this.options.toArray().indexOf(option);\n    }\n    /**\n     * Marks all the options to be checked in the next change detection run.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markOptionsForCheck\",\n    value: function _markOptionsForCheck() {\n      if (this.options) {\n        this.options.forEach(\n        /**\n        * @param {?} option\n        * @return {?}\n        */\n        function (option) {\n          return option._markForCheck();\n        });\n      }\n    }\n    /**\n     * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n     * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n     * the list, creating a focus trap if it user tries to tab away.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_allowFocusEscape\",\n    value: function _allowFocusEscape() {\n      var _this10 = this;\n\n      this._tabIndex = -1;\n      setTimeout(\n      /**\n      * @return {?}\n      */\n      function () {\n        _this10._tabIndex = 0;\n\n        _this10._changeDetector.markForCheck();\n      });\n    }\n    /**\n     * Updates the tabindex based upon if the selection list is empty.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_updateTabIndex\",\n    value: function _updateTabIndex() {\n      this._tabIndex = this.options.length === 0 ? -1 : 0;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n      // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n      // changed its state. Since we know that a change to `disabled` property of the list affects\n      // the state of the options, we manually mark each option for check.\n\n      this._markOptionsForCheck();\n    }\n    /**\n     * Whether selection is limited to one or multiple items (default multiple).\n     * @return {?}\n     */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ,\n    set: function set(value) {\n      /** @type {?} */\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._multiple) {\n        if (isDevMode() && this._contentInitialized) {\n          throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');\n        }\n\n        this._multiple = newValue;\n        this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n      }\n    }\n  }]);\n\n  return MatSelectionList;\n}(_MatSelectionListMixinBase);\n\nMatSelectionList.ɵfac = function MatSelectionList_Factory(t) {\n  return new (t || MatSelectionList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nMatSelectionList.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: MatSelectionList,\n  selectors: [[\"mat-selection-list\"]],\n  contentQueries: function MatSelectionList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatListOption, true);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"mat-selection-list\", \"mat-list-base\"],\n  hostVars: 3,\n  hostBindings: function MatSelectionList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatSelectionList_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"keydown\", function MatSelectionList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-multiselectable\", ctx.multiple)(\"aria-disabled\", ctx.disabled.toString())(\"tabindex\", ctx._tabIndex);\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    color: \"color\",\n    compareWith: \"compareWith\",\n    disabled: \"disabled\",\n    multiple: \"multiple\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\"\n  },\n  exportAs: [\"matSelectionList\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_SELECTION_LIST_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatSelectionList_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nMatSelectionList.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }];\n};\n\nMatSelectionList.propDecorators = {\n  options: [{\n    type: ContentChildren,\n    args: [MatListOption, {\n      descendants: true\n    }]\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  color: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatSelectionList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-selection-list',\n      exportAs: 'matSelectionList',\n      inputs: ['disableRipple'],\n      host: {\n        'role': 'listbox',\n        'class': 'mat-selection-list mat-list-base',\n        '(focus)': '_onFocus()',\n        '(keydown)': '_keydown($event)',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabindex]': '_tabIndex'\n      },\n      template: '<ng-content></ng-content>',\n      encapsulation: ViewEncapsulation.None,\n      providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    selectionChange: [{\n      type: Output\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatListOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nif (false) {\n  /** @type {?} */\n  MatSelectionList.ngAcceptInputType_disabled;\n  /** @type {?} */\n\n  MatSelectionList.ngAcceptInputType_disableRipple;\n  /** @type {?} */\n\n  MatSelectionList.ngAcceptInputType_multiple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._multiple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._contentInitialized;\n  /**\n   * The FocusKeyManager which handles focus.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype._keyManager;\n  /**\n   * The option components contained within this selection-list.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype.options;\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype.selectionChange;\n  /**\n   * Tabindex of the selection list.\n   * \\@breaking-change 11.0.0 Remove `tabIndex` input.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype.tabIndex;\n  /**\n   * Theme color of the selection list. This sets the checkbox color for all list options.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype.color;\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype.compareWith;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._disabled;\n  /**\n   * The currently selected options.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype.selectedOptions;\n  /**\n   * The tabindex of the selection list.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype._tabIndex;\n  /**\n   * View to model callback that should be called whenever the selected options change.\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._onChange;\n  /**\n   * Keeps track of the currently-selected value.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype._value;\n  /**\n   * Emits when the list has been destroyed.\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._destroyed;\n  /**\n   * View to model callback that should be called if the list or its options lost focus.\n   * @type {?}\n   */\n\n  MatSelectionList.prototype._onTouched;\n  /**\n   * Whether the list has been destroyed.\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._isDestroyed;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._element;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  MatSelectionList.prototype._changeDetector;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatListModule = function MatListModule() {\n  _classCallCheck(this, MatListModule);\n};\n\nMatListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: MatListModule\n});\nMatListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function MatListModule_Factory(t) {\n    return new (t || MatListModule)();\n  },\n  imports: [[MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule], MatLineModule, MatCommonModule, MatPseudoCheckboxModule, MatDividerModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatListModule, {\n    declarations: function declarations() {\n      return [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatSelectionList, MatListOption];\n    },\n    imports: function imports() {\n      return [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule];\n    },\n    exports: function exports() {\n      return [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatLineModule, MatCommonModule, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatPseudoCheckboxModule, MatSelectionList, MatListOption, MatDividerModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MatListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n      exports: [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatLineModule, MatCommonModule, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatPseudoCheckboxModule, MatSelectionList, MatListOption, MatDividerModule],\n      declarations: [MatList, MatNavList, MatListItem, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatSelectionList, MatListOption]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECTION_LIST_VALUE_ACCESSOR, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListItem, MatListModule, MatListOption, MatListSubheaderCssMatStyler, MatNavList, MatSelectionList, MatSelectionListChange };","map":{"version":3,"sources":["../../../../../material/list/list.ts","../../../../../material/list/selection-list.ts","../../../../../material/list/list-module.ts","../../../../../material/list/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n  Input,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase =\n    mixinDisabled(mixinDisableRipple(MatListBase));\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple,\n  OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item mat-focus-indicator',\n    '[class.mat-list-item-disabled]': 'disabled',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n  isDevMode,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\n\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabindex]': '-1',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': '_onFocus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': '_tabIndex',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n  private _multiple = true;\n  private _contentInitialized = false;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /**\n   * Tabindex of the selection list.\n   * @breaking-change 11.0.0 Remove `tabIndex` input.\n   */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if (isDevMode() && this._contentInitialized) {\n        throw new Error(\n            'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** The tabindex of the selection list. */\n  _tabIndex = -1;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    @Attribute('tabindex') tabIndex: string,\n    private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    this._contentInitialized = true;\n\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n            !manager.isTyping()) {\n          const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n          this._setAllOptionsSelected(shouldSelect, true);\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /**\n   * When the selection list is focused, we want to move focus to an option within the list. Do this\n   * by setting the appropriate option to be active.\n   */\n  _onFocus(): void {\n    const activeIndex = this._keyManager.activeItemIndex;\n\n    if (!activeIndex || (activeIndex === -1)) {\n      // If there is no active index, set focus to the first option.\n      this._keyManager.setFirstItemActive();\n    } else {\n      // Otherwise, set focus to the active option.\n      this._keyManager.setActiveItem(activeIndex);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean, skipDisabled?: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  private _allowFocusEscape() {\n    this._tabIndex = -1;\n\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n\n  /** Updates the tabindex based upon if the selection list is empty. */\n  private _updateTabIndex(): void {\n    this._tabIndex = (this.options.length === 0) ? -1 : 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}