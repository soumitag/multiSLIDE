{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: function deserializer(e) {\n    return JSON.parse(e.data);\n  },\n  serializer: function serializer(value) {\n    return JSON.stringify(value);\n  }\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport var WebSocketSubject = /*#__PURE__*/function (_AnonymousSubject) {\n  _inherits(WebSocketSubject, _AnonymousSubject);\n\n  var _super = _createSuper(WebSocketSubject);\n\n  function WebSocketSubject(urlConfigOrSource, destination) {\n    var _this;\n\n    _classCallCheck(this, WebSocketSubject);\n\n    _this = _super.call(this);\n\n    if (urlConfigOrSource instanceof Observable) {\n      _this.destination = destination;\n      _this.source = urlConfigOrSource;\n    } else {\n      var config = _this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      _this._output = new Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (var key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      _this.destination = new ReplaySubject();\n    }\n\n    return _this;\n  }\n\n  _createClass(WebSocketSubject, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var sock = new WebSocketSubject(this._config, this.destination);\n      sock.operator = operator;\n      sock.source = this;\n      return sock;\n    }\n  }, {\n    key: \"_resetState\",\n    value: function _resetState() {\n      this._socket = null;\n\n      if (!this.source) {\n        this.destination = new ReplaySubject();\n      }\n\n      this._output = new Subject();\n    }\n  }, {\n    key: \"multiplex\",\n    value: function multiplex(subMsg, unsubMsg, messageFilter) {\n      var self = this;\n      return new Observable(function (observer) {\n        try {\n          self.next(subMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n\n        var subscription = self.subscribe(function (x) {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        }, function (err) {\n          return observer.error(err);\n        }, function () {\n          return observer.complete();\n        });\n        return function () {\n          try {\n            self.next(unsubMsg());\n          } catch (err) {\n            observer.error(err);\n          }\n\n          subscription.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: \"_connectSocket\",\n    value: function _connectSocket() {\n      var _this2 = this;\n\n      var _this$_config = this._config,\n          WebSocketCtor = _this$_config.WebSocketCtor,\n          protocol = _this$_config.protocol,\n          url = _this$_config.url,\n          binaryType = _this$_config.binaryType;\n      var observer = this._output;\n      var socket = null;\n\n      try {\n        socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n        this._socket = socket;\n\n        if (binaryType) {\n          this._socket.binaryType = binaryType;\n        }\n      } catch (e) {\n        observer.error(e);\n        return;\n      }\n\n      var subscription = new Subscription(function () {\n        _this2._socket = null;\n\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n      });\n\n      socket.onopen = function (e) {\n        var _socket = _this2._socket;\n\n        if (!_socket) {\n          socket.close();\n\n          _this2._resetState();\n\n          return;\n        }\n\n        var openObserver = _this2._config.openObserver;\n\n        if (openObserver) {\n          openObserver.next(e);\n        }\n\n        var queue = _this2.destination;\n        _this2.destination = Subscriber.create(function (x) {\n          if (socket.readyState === 1) {\n            try {\n              var serializer = _this2._config.serializer;\n              socket.send(serializer(x));\n            } catch (e) {\n              _this2.destination.error(e);\n            }\n          }\n        }, function (e) {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n          }\n\n          _this2._resetState();\n        }, function () {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          socket.close();\n\n          _this2._resetState();\n        });\n\n        if (queue && queue instanceof ReplaySubject) {\n          subscription.add(queue.subscribe(_this2.destination));\n        }\n      };\n\n      socket.onerror = function (e) {\n        _this2._resetState();\n\n        observer.error(e);\n      };\n\n      socket.onclose = function (e) {\n        _this2._resetState();\n\n        var closeObserver = _this2._config.closeObserver;\n\n        if (closeObserver) {\n          closeObserver.next(e);\n        }\n\n        if (e.wasClean) {\n          observer.complete();\n        } else {\n          observer.error(e);\n        }\n      };\n\n      socket.onmessage = function (e) {\n        try {\n          var deserializer = _this2._config.deserializer;\n          observer.next(deserializer(e));\n        } catch (err) {\n          observer.error(err);\n        }\n      };\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var _this3 = this;\n\n      var source = this.source;\n\n      if (source) {\n        return source.subscribe(subscriber);\n      }\n\n      if (!this._socket) {\n        this._connectSocket();\n      }\n\n      this._output.subscribe(subscriber);\n\n      subscriber.add(function () {\n        var _socket = _this3._socket;\n\n        if (_this3._output.observers.length === 0) {\n          if (_socket && _socket.readyState === 1) {\n            _socket.close();\n          }\n\n          _this3._resetState();\n        }\n      });\n      return subscriber;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _socket = this._socket;\n\n      if (_socket && _socket.readyState === 1) {\n        _socket.close();\n      }\n\n      this._resetState();\n\n      _get(_getPrototypeOf(WebSocketSubject.prototype), \"unsubscribe\", this).call(this);\n    }\n  }]);\n\n  return WebSocketSubject;\n}(AnonymousSubject);","map":{"version":3,"sources":["../../../../src/internal/observable/dom/WebSocketSubject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (let key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe(x => {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, err => observer.error(err), () => observer.complete());\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (e) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (e) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            this._resetState();\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n//# sourceMappingURL=WebSocketSubject.js.map"]},"metadata":{},"sourceType":"module"}