{"ast":null,"code":"import _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport var ColdObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ColdObservable, _Observable);\n\n  var _super = _createSuper(ColdObservable);\n\n  function ColdObservable(messages, scheduler) {\n    var _this;\n\n    _classCallCheck(this, ColdObservable);\n\n    _this = _super.call(this, function (subscriber) {\n      var observable = this;\n      var index = observable.logSubscribedFrame();\n      var subscription = new Subscription();\n      subscription.add(new Subscription(function () {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    });\n    _this.messages = messages;\n    _this.subscriptions = [];\n    _this.scheduler = scheduler;\n    return _this;\n  }\n\n  _createClass(ColdObservable, [{\n    key: \"scheduleMessages\",\n    value: function scheduleMessages(subscriber) {\n      var messagesLength = this.messages.length;\n\n      for (var i = 0; i < messagesLength; i++) {\n        var message = this.messages[i];\n        subscriber.add(this.scheduler.schedule(function (_ref) {\n          var message = _ref.message,\n              subscriber = _ref.subscriber;\n          message.notification.observe(subscriber);\n        }, message.frame, {\n          message: message,\n          subscriber: subscriber\n        }));\n      }\n    }\n  }]);\n\n  return ColdObservable;\n}(Observable);\napplyMixins(ColdObservable, [SubscriptionLoggable]);","map":{"version":3,"sources":["../../../src/internal/testing/ColdObservable.ts"],"names":[],"mappings":";;;;AAAA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,YAAT,QAA6B,iBAA7B;AAIA,SAAS,oBAAT,QAAqC,wBAArC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AAQA,WAAa,cAAb;AAAA;;AAAA;;AAME,0BAAmB,QAAnB,EACY,SADZ,EACgC;AAAA;;AAAA;;AAC9B,8BAAM,UAA+B,UAA/B,EAA0D;AAC9D,UAAM,UAAU,GAAsB,IAAtC;AACA,UAAM,KAAK,GAAG,UAAU,CAAC,kBAAX,EAAd;AACA,UAAM,YAAY,GAAG,IAAI,YAAJ,EAArB;AACA,MAAA,YAAY,CAAC,GAAb,CAAiB,IAAI,YAAJ,CAAiB,YAAK;AACrC,QAAA,UAAU,CAAC,oBAAX,CAAgC,KAAhC;AACD,OAFgB,CAAjB;AAGA,MAAA,UAAU,CAAC,gBAAX,CAA4B,UAA5B;AACA,aAAO,YAAP;AACD,KATD;AAFiB,UAAA,QAAA,GAAA,QAAA;AALZ,UAAA,aAAA,GAAmC,EAAnC;AAiBL,UAAK,SAAL,GAAiB,SAAjB;AAX8B;AAY/B;;AAnBH;AAAA;AAAA,qCAqBmB,UArBnB,EAqB8C;AAC1C,UAAM,cAAc,GAAG,KAAK,QAAL,CAAc,MAArC;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACvC,YAAM,OAAO,GAAG,KAAK,QAAL,CAAc,CAAd,CAAhB;AACA,QAAA,UAAU,CAAC,GAAX,CACE,KAAK,SAAL,CAAe,QAAf,CAAwB,gBAA4B;AAAA,cAAzB,OAAyB,QAAzB,OAAyB;AAAA,cAAhB,UAAgB,QAAhB,UAAgB;AAAG,UAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,UAA7B;AAA2C,SAAlG,EACE,OAAO,CAAC,KADV,EAEE;AAAE,UAAA,OAAO,EAAP,OAAF;AAAW,UAAA,UAAU,EAAV;AAAX,SAFF,CADF;AAKD;AACF;AA/BH;;AAAA;AAAA,EAAuC,UAAvC;AAiCA,WAAW,CAAC,cAAD,EAAiB,CAAC,oBAAD,CAAjB,CAAX","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class ColdObservable extends Observable {\n    constructor(messages, scheduler) {\n        super(function (subscriber) {\n            const observable = this;\n            const index = observable.logSubscribedFrame();\n            const subscription = new Subscription();\n            subscription.add(new Subscription(() => {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscription;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    scheduleMessages(subscriber) {\n        const messagesLength = this.messages.length;\n        for (let i = 0; i < messagesLength; i++) {\n            const message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(({ message, subscriber }) => { message.notification.observe(subscriber); }, message.frame, { message, subscriber }));\n        }\n    }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map"]},"metadata":{},"sourceType":"module"}