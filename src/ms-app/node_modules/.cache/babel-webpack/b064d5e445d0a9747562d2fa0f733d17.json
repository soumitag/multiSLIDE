{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/soumitaghosh/Documents/GitHub/multi-slide/src/ms-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { isObservable, of, Subject } from 'rxjs';\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @abstract\n * @template T\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar DataSource = function DataSource() {\n  _classCallCheck(this, DataSource);\n};\n\nif (false) {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @abstract\n   * @param {?} collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @return {?} Observable that emits a new value when the data changes.\n   */\n  DataSource.prototype.connect = function (collectionViewer) {};\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @abstract\n   * @param {?} collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @return {?}\n   */\n\n\n  DataSource.prototype.disconnect = function (collectionViewer) {};\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isDataSource(value) {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/array-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\n\n\nvar ArrayDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(ArrayDataSource, _DataSource);\n\n  var _super = _createSuper(ArrayDataSource);\n\n  /**\n   * @param {?} _data\n   */\n  function ArrayDataSource(_data) {\n    var _this;\n\n    _classCallCheck(this, ArrayDataSource);\n\n    _this = _super.call(this);\n    _this._data = _data;\n    return _this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(ArrayDataSource, [{\n    key: \"connect\",\n    value: function connect() {\n      return isObservable(this._data) ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {}\n  }]);\n\n  return ArrayDataSource;\n}(DataSource);\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  ArrayDataSource.prototype._data;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/collection-viewer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Interface for any component that provides a view of some data collection and wants to provide\n * information regarding the view and any changes made.\n * @record\n */\n\n\nfunction CollectionViewer() {}\n\nif (false) {\n  /**\n   * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\n   * data. The `start` index is inclusive, while the `end` is exclusive.\n   * @type {?}\n   */\n  CollectionViewer.prototype.viewChange;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/selection-model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\n\n\nvar SelectionModel = /*#__PURE__*/function () {\n  /**\n   * @param {?=} _multiple\n   * @param {?=} initiallySelectedValues\n   * @param {?=} _emitChanges\n   */\n  function SelectionModel() {\n    var _this2 = this;\n\n    var _multiple = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var initiallySelectedValues = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _emitChanges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    _classCallCheck(this, SelectionModel);\n\n    this._multiple = _multiple;\n    this._emitChanges = _emitChanges;\n    /**\n     * Currently-selected values.\n     */\n\n    this._selection = new Set();\n    /**\n     * Keeps track of the deselected options that haven't been emitted by the change event.\n     */\n\n    this._deselectedToEmit = [];\n    /**\n     * Keeps track of the selected options that haven't been emitted by the change event.\n     */\n\n    this._selectedToEmit = [];\n    /**\n     * Event emitted when the value has changed.\n     */\n\n    this.changed = new Subject();\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(\n        /**\n        * @param {?} value\n        * @return {?}\n        */\n        function (value) {\n          return _this2._markSelected(value);\n        });\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      } // Clear the array in order to avoid firing the change event for preselected values.\n\n\n      this._selectedToEmit.length = 0;\n    }\n  }\n  /**\n   * Selected values.\n   * @return {?}\n   */\n\n\n  _createClass(SelectionModel, [{\n    key: \"select\",\n\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    value: function select() {\n      var _this3 = this;\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      function (value) {\n        return _this3._markSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"deselect\",\n    value: function deselect() {\n      var _this4 = this;\n\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n\n      this._verifyValueAssignment(values);\n\n      values.forEach(\n      /**\n      * @param {?} value\n      * @return {?}\n      */\n      function (value) {\n        return _this4._unmarkSelected(value);\n      });\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle(value) {\n      this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._unmarkAll();\n\n      this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(value) {\n      return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(predicate) {\n      if (this._multiple && this.selected) {\n        /** @type {?} */\n        this._selected.sort(predicate);\n      }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n\n  }, {\n    key: \"isMultipleSelection\",\n    value: function isMultipleSelection() {\n      return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      // Clear the selected values so they can be re-cached.\n      this._selected = null;\n\n      if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n        this.changed.next({\n          source: this,\n          added: this._selectedToEmit,\n          removed: this._deselectedToEmit\n        });\n        this._deselectedToEmit = [];\n        this._selectedToEmit = [];\n      }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_markSelected\",\n    value: function _markSelected(value) {\n      if (!this.isSelected(value)) {\n        if (!this._multiple) {\n          this._unmarkAll();\n        }\n\n        this._selection.add(value);\n\n        if (this._emitChanges) {\n          this._selectedToEmit.push(value);\n        }\n      }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unmarkSelected\",\n    value: function _unmarkSelected(value) {\n      if (this.isSelected(value)) {\n        this._selection.delete(value);\n\n        if (this._emitChanges) {\n          this._deselectedToEmit.push(value);\n        }\n      }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n\n  }, {\n    key: \"_unmarkAll\",\n    value: function _unmarkAll() {\n      var _this5 = this;\n\n      if (!this.isEmpty()) {\n        this._selection.forEach(\n        /**\n        * @param {?} value\n        * @return {?}\n        */\n        function (value) {\n          return _this5._unmarkSelected(value);\n        });\n      }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n\n  }, {\n    key: \"_verifyValueAssignment\",\n    value: function _verifyValueAssignment(values) {\n      if (values.length > 1 && !this._multiple) {\n        throw getMultipleValuesInSingleSelectionError();\n      }\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      if (!this._selected) {\n        this._selected = Array.from(this._selection.values());\n      }\n\n      return this._selected;\n    }\n  }]);\n\n  return SelectionModel;\n}();\n\nif (false) {\n  /**\n   * Currently-selected values.\n   * @type {?}\n   * @private\n   */\n  SelectionModel.prototype._selection;\n  /**\n   * Keeps track of the deselected options that haven't been emitted by the change event.\n   * @type {?}\n   * @private\n   */\n\n  SelectionModel.prototype._deselectedToEmit;\n  /**\n   * Keeps track of the selected options that haven't been emitted by the change event.\n   * @type {?}\n   * @private\n   */\n\n  SelectionModel.prototype._selectedToEmit;\n  /**\n   * Cache for the array value of the selected items.\n   * @type {?}\n   * @private\n   */\n\n  SelectionModel.prototype._selected;\n  /**\n   * Event emitted when the value has changed.\n   * @type {?}\n   */\n\n  SelectionModel.prototype.changed;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SelectionModel.prototype._multiple;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  SelectionModel.prototype._emitChanges;\n}\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * \\@docs-private\n * @record\n * @template T\n */\n\n\nfunction SelectionChange() {}\n\nif (false) {\n  /**\n   * Model that dispatched the event.\n   * @type {?}\n   */\n  SelectionChange.prototype.source;\n  /**\n   * Options that were added to the model.\n   * @type {?}\n   */\n\n  SelectionChange.prototype.added;\n  /**\n   * Options that were removed from the model.\n   * @type {?}\n   */\n\n  SelectionChange.prototype.removed;\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/unique-selection-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n\n\nvar UniqueSelectionDispatcher = /*#__PURE__*/function () {\n  function UniqueSelectionDispatcher() {\n    _classCallCheck(this, UniqueSelectionDispatcher);\n\n    this._listeners = [];\n  }\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param {?} id ID of the item.\n   * @param {?} name Name of the item.\n   * @return {?}\n   */\n\n\n  _createClass(UniqueSelectionDispatcher, [{\n    key: \"notify\",\n    value: function notify(id, name) {\n      var _iterator = _createForOfIteratorHelper(this._listeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener(id, name);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n\n  }, {\n    key: \"listen\",\n    value: function listen(listener) {\n      var _this6 = this;\n\n      this._listeners.push(listener);\n\n      return (\n        /**\n        * @return {?}\n        */\n        function () {\n          _this6._listeners = _this6._listeners.filter(\n          /**\n          * @param {?} registered\n          * @return {?}\n          */\n          function (registered) {\n            return listener !== registered;\n          });\n        }\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._listeners = [];\n    }\n  }]);\n\n  return UniqueSelectionDispatcher;\n}();\n\nUniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t) {\n  return new (t || UniqueSelectionDispatcher)();\n};\n/** @nocollapse */\n\n\nUniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({\n  factory: function UniqueSelectionDispatcher_Factory() {\n    return new UniqueSelectionDispatcher();\n  },\n  token: UniqueSelectionDispatcher,\n  providedIn: \"root\"\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(UniqueSelectionDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  UniqueSelectionDispatcher.prototype._listeners;\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/tree-adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n * @record\n * @template T\n */\n\n\nfunction TreeDataNodeFlattener() {}\n\nif (false) {\n  /**\n   * Transforms a set of hierarchical structured data into a flattened data array.\n   * @param {?} structuredData\n   * @return {?}\n   */\n  TreeDataNodeFlattener.prototype.flattenNodes = function (structuredData) {};\n  /**\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\n   * model.\n   * @param {?} nodes\n   * @param {?} expansionModel\n   * @return {?}\n   */\n\n\n  TreeDataNodeFlattener.prototype.expandFlattenedNodes = function (nodes, expansionModel) {};\n  /**\n   * Put node descendants of node in array.\n   * If `onlyExpandable` is true, then only process expandable descendants.\n   * @param {?} node\n   * @param {?} nodes\n   * @param {?} onlyExpandable\n   * @return {?}\n   */\n\n\n  TreeDataNodeFlattener.prototype.nodeDescendents = function (node, nodes, onlyExpandable) {};\n}\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, getMultipleValuesInSingleSelectionError, isDataSource };","map":{"version":3,"sources":["../../../../../cdk/collections/data-source.ts","../../../../../cdk/collections/array-data-source.ts","../../../../../cdk/collections/collection-viewer.ts","../../../../../cdk/collections/selection-model.ts","../../../../../cdk/collections/unique-selection-dispatcher.ts","../../../../../cdk/collections/tree-adapter.ts","../../../../../cdk/collections/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {CollectionViewer} from './collection-viewer';\n\nexport abstract class DataSource<T> {\n  /**\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\n   * the stream provided will be accessed during change detection and should not directly change\n   * values that are bound in template views.\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   * @returns Observable that emits a new value when the data changes.\n   */\n  abstract connect(collectionViewer: CollectionViewer): Observable<T[] | ReadonlyArray<T>>;\n\n  /**\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\n   *\n   * @param collectionViewer The component that exposes a view over the data provided by this\n   *     data source.\n   */\n  abstract disconnect(collectionViewer: CollectionViewer): void;\n}\n\n/** Checks whether an object is a data source. */\nexport function isDataSource(value: any): value is DataSource<any> {\n  // Check if the value is a DataSource by observing if it has a connect function. Cannot\n  // be checked as an `instanceof DataSource` since people could create their own sources\n  // that match the interface, but don't extend DataSource.\n  return value && typeof value.connect === 'function';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, isObservable, of as observableOf} from 'rxjs';\nimport {DataSource} from './data-source';\n\n\n/** DataSource wrapper for a native array. */\nexport class ArrayDataSource<T> extends DataSource<T> {\n  constructor(private _data: T[] | ReadonlyArray<T> | Observable<T[] | ReadonlyArray<T>>) {\n    super();\n  }\n\n  connect(): Observable<T[] | ReadonlyArray<T>> {\n    return isObservable(this._data) ? this._data : observableOf(this._data);\n  }\n\n  disconnect() {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\n\n/** Represents a range of numbers with a specified start and end. */\nexport type ListRange = {start: number, end: number};\n\n\n/**\n * Interface for any component that provides a view of some data collection and wants to provide\n * information regarding the view and any changes made.\n */\nexport interface CollectionViewer {\n  /**\n   * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\n   * data. The `start` index is inclusive, while the `end` is exclusive.\n   */\n  viewChange: Observable<ListRange>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject} from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n  /** Currently-selected values. */\n  private _selection = new Set<T>();\n\n  /** Keeps track of the deselected options that haven't been emitted by the change event. */\n  private _deselectedToEmit: T[] = [];\n\n  /** Keeps track of the selected options that haven't been emitted by the change event. */\n  private _selectedToEmit: T[] = [];\n\n  /** Cache for the array value of the selected items. */\n  private _selected: T[] | null;\n\n  /** Selected values. */\n  get selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n\n  /** Event emitted when the value has changed. */\n  changed: Subject<SelectionChange<T>> = new Subject();\n\n  constructor(\n    private _multiple = false,\n    initiallySelectedValues?: T[],\n    private _emitChanges = true) {\n\n    if (initiallySelectedValues && initiallySelectedValues.length) {\n      if (_multiple) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n\n  /**\n   * Selects a value or an array of values.\n   */\n  select(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._markSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Deselects a value or an array of values.\n   */\n  deselect(...values: T[]): void {\n    this._verifyValueAssignment(values);\n    values.forEach(value => this._unmarkSelected(value));\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Toggles a value between selected and deselected.\n   */\n  toggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n\n  /**\n   * Clears all of the selected values.\n   */\n  clear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n\n  /**\n   * Determines whether a value is selected.\n   */\n  isSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n\n  /**\n   * Determines whether the model does not have a value.\n   */\n  isEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n\n  /**\n   * Determines whether the model has a value.\n   */\n  hasValue(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Sorts the selected values based on a predicate function.\n   */\n  sort(predicate?: (a: T, b: T) => number): void {\n    if (this._multiple && this.selected) {\n      this._selected!.sort(predicate);\n    }\n  }\n\n  /**\n   * Gets whether multiple values can be selected.\n   */\n  isMultipleSelection() {\n    return this._multiple;\n  }\n\n  /** Emits a change event and clears the records of selected and deselected values. */\n  private _emitChangeEvent() {\n    // Clear the selected values so they can be re-cached.\n    this._selected = null;\n\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      this.changed.next({\n        source: this,\n        added: this._selectedToEmit,\n        removed: this._deselectedToEmit\n      });\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n  }\n\n  /** Selects a value. */\n  private _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._multiple) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Deselects a value. */\n  private _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n\n  /** Clears out the selected values. */\n  private _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n\n  /**\n   * Verifies the value assignment and throws an error if the specified value array is\n   * including multiple values while the selection model is not supporting multiple values.\n   */\n  private _verifyValueAssignment(values: T[]) {\n    if (values.length > 1 && !this._multiple) {\n      throw getMultipleValuesInSingleSelectionError();\n    }\n  }\n}\n\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * @docs-private\n */\nexport interface SelectionChange<T> {\n  /** Model that dispatched the event. */\n  source: SelectionModel<T>;\n  /** Options that were added to the model. */\n  added: T[];\n  /** Options that were removed from the model. */\n  removed: T[];\n}\n\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nexport function getMultipleValuesInSingleSelectionError() {\n  return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SelectionModel} from './selection-model';\n\n\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n */\nexport interface TreeDataNodeFlattener<T> {\n  /** Transforms a set of hierarchical structured data into a flattened data array. */\n  flattenNodes(structuredData: any[]): T[];\n\n  /**\n   * Expands a flattened array of data into its hierarchical form using the provided expansion\n   * model.\n   */\n  expandFlattenedNodes(nodes: T[], expansionModel: SelectionModel<T>): T[];\n\n  /**\n   * Put node descendants of node in array.\n   * If `onlyExpandable` is true, then only process expandable descendants.\n   */\n  nodeDescendents(node: T, nodes: T[], onlyExpandable: boolean): void;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}